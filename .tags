!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
) print	.\test\testtimer.lua	/^	skynet.timeout(10, function() print("test timeout 10") end)$/;"	f
) skynet.exit	.\service\cmemory.lua	/^skynet.start(function() skynet.exit() end)$/;"	f
+  m.P(function (s, i) return i%2 ~	.\3rd\lpeg\test.lua	/^  +  m.P(function (s, i) return i%2 ~= 0 and i + 2 <= s:len() and i end) * 3)^0$/;"	f
+ "	.\3rd\lpeg\re.lua	/^            + "=" * name \/ function (n) return mm.Cmt(mm.Cb(n), equalcap) end$/;"	f
+ m.P(function (s,i) if i <	.\3rd\lpeg\test.lua	/^  + m.P(function (s,i) if i <= #s then return i, "aaa" end end) * 1)^0$/;"	f
ALLONES	.\3rd\lua\lbitlib.c	22;"	d	file:
ALPHABIT	.\3rd\lua\lctype.h	39;"	d
AUXMARK	.\3rd\lua\loadlib.c	622;"	d	file:
BACKLOG	.\lualib-src\lua-socket.c	19;"	d	file:
BACKLOG	.\service-src\service_gate.c	14;"	d	file:
BASIC_STACK_SIZE	.\3rd\lua\lstate.h	50;"	d
BITRK	.\3rd\lua\lopcodes.h	134;"	d
BITSPERCHAR	.\3rd\lpeg\lptypes.h	87;"	d
BIT_ISCOLLECTABLE	.\3rd\lua\lobject.h	61;"	d
BLACKBIT	.\3rd\lua\lgc.h	89;"	d
BLOCKSIZE	.\3rd\lua-md5\md5lib.c	63;"	d	file:
BLOCKSIZE	.\lualib-src\lsha1.c	261;"	d	file:
BLOCK_SIZE	.\lualib-src\lua-seri.c	30;"	d	file:
BSON_ARRAY	.\lualib-src\lua-bson.c	37;"	d	file:
BSON_BINARY	.\lualib-src\lua-bson.c	38;"	d	file:
BSON_BOOLEAN	.\lualib-src\lua-bson.c	41;"	d	file:
BSON_CODEWS	.\lualib-src\lua-bson.c	48;"	d	file:
BSON_DATE	.\lualib-src\lua-bson.c	42;"	d	file:
BSON_DBPOINTER	.\lualib-src\lua-bson.c	45;"	d	file:
BSON_DOCUMENT	.\lualib-src\lua-bson.c	36;"	d	file:
BSON_INT32	.\lualib-src\lua-bson.c	49;"	d	file:
BSON_INT64	.\lualib-src\lua-bson.c	51;"	d	file:
BSON_JSCODE	.\lualib-src\lua-bson.c	46;"	d	file:
BSON_MAXKEY	.\lualib-src\lua-bson.c	53;"	d	file:
BSON_MINKEY	.\lualib-src\lua-bson.c	52;"	d	file:
BSON_NULL	.\lualib-src\lua-bson.c	43;"	d	file:
BSON_OBJECTID	.\lualib-src\lua-bson.c	40;"	d	file:
BSON_REAL	.\lualib-src\lua-bson.c	34;"	d	file:
BSON_REGEX	.\lualib-src\lua-bson.c	44;"	d	file:
BSON_STRING	.\lualib-src\lua-bson.c	35;"	d	file:
BSON_SYMBOL	.\lualib-src\lua-bson.c	47;"	d	file:
BSON_TIMESTAMP	.\lualib-src\lua-bson.c	50;"	d	file:
BSON_TYPE_SHIFT	.\lualib-src\lua-bson.c	55;"	d	file:
BSON_UNDEFINED	.\lualib-src\lua-bson.c	39;"	d	file:
BUFFER_LIMIT	.\lualib-src\lua-socket.c	22;"	d	file:
BinOpr	.\3rd\lua\lcode.h	/^typedef enum BinOpr {$/;"	g
BinOpr	.\3rd\lua\lcode.h	/^} BinOpr;$/;"	t	typeref:enum:BinOpr
BlockCnt	.\3rd\lua\lparser.c	/^typedef struct BlockCnt {$/;"	s	file:
BlockCnt	.\3rd\lua\lparser.c	/^} BlockCnt;$/;"	t	typeref:struct:BlockCnt	file:
CACHE_SIZE	.\lualib-src\lua-clientsocket.c	21;"	d	file:
CAP_POSITION	.\3rd\lua\lstrlib.c	195;"	d	file:
CAP_UNFINISHED	.\3rd\lua\lstrlib.c	194;"	d	file:
CC	.\3rd\lua\lauxlib.c	/^static struct codecache CC = { 0 , NULL };$/;"	v	typeref:struct:codecache	file:
CC	.\platform.mk	/^CC ?= gcc$/;"	m
CClosure	.\3rd\lua\lobject.h	/^typedef struct CClosure {$/;"	s
CClosure	.\3rd\lua\lobject.h	/^} CClosure;$/;"	t	typeref:struct:CClosure
CHARSETINSTSIZE	.\3rd\lpeg\lptypes.h	136;"	d
CHARSETSIZE	.\3rd\lpeg\lptypes.h	89;"	d
CHECKCALLING_BEGIN	.\skynet-src\skynet_server.c	31;"	d	file:
CHECKCALLING_BEGIN	.\skynet-src\skynet_server.c	38;"	d	file:
CHECKCALLING_DECL	.\skynet-src\skynet_server.c	34;"	d	file:
CHECKCALLING_DECL	.\skynet-src\skynet_server.c	41;"	d	file:
CHECKCALLING_END	.\skynet-src\skynet_server.c	32;"	d	file:
CHECKCALLING_END	.\skynet-src\skynet_server.c	39;"	d	file:
CHECKCALLING_INIT	.\skynet-src\skynet_server.c	33;"	d	file:
CHECKCALLING_INIT	.\skynet-src\skynet_server.c	40;"	d	file:
CHECK_ABORT	.\skynet-src\skynet_start.c	39;"	d	file:
CHUNK_SIZE	.\lualib-src\sproto\sproto.c	10;"	d	file:
CIST_HOOKED	.\3rd\lua\lstate.h	96;"	d
CIST_HOOKYIELD	.\3rd\lua\lstate.h	103;"	d
CIST_LUA	.\3rd\lua\lstate.h	95;"	d
CIST_REENTRY	.\3rd\lua\lstate.h	97;"	d
CIST_STAT	.\3rd\lua\lstate.h	101;"	d
CIST_TAIL	.\3rd\lua\lstate.h	102;"	d
CIST_YIELDED	.\3rd\lua\lstate.h	99;"	d
CIST_YPCALL	.\3rd\lua\lstate.h	100;"	d
CLIBS	.\3rd\lua\loadlib.c	96;"	d	file:
CLOCK_TIMER	.\skynet-src\skynet_timer.c	257;"	d	file:
CMD.accept	.\service\gate.lua	/^function CMD.accept(source, fd)$/;"	f
CMD.afk	.\examples\login\msgagent.lua	/^function CMD.afk(source)$/;"	f
CMD.blackhole	.\test\testoverload.lua	/^function CMD.blackhole()$/;"	f
CMD.close	.\lualib\snax\gateserver.lua	/^	function CMD.close()$/;"	f
CMD.confirm	.\service\sharedatad.lua	/^function CMD.confirm(cobj)$/;"	f
CMD.delete	.\service\sharedatad.lua	/^function CMD.delete(name)$/;"	f
CMD.forward	.\service\gate.lua	/^function CMD.forward(source, fd, client, address)$/;"	f
CMD.kick	.\service\gate.lua	/^function CMD.kick(source, fd)$/;"	f
CMD.login	.\examples\login\msgagent.lua	/^function CMD.login(source, uid, sid, secret)$/;"	f
CMD.logout	.\examples\login\logind.lua	/^function CMD.logout(uid, subid)$/;"	f
CMD.logout	.\examples\login\msgagent.lua	/^function CMD.logout(source)$/;"	f
CMD.monitor	.\service\sharedatad.lua	/^function CMD.monitor(name, obj)$/;"	f
CMD.new	.\service\sharedatad.lua	/^function CMD.new(name, t)$/;"	f
CMD.open	.\lualib\snax\gateserver.lua	/^	function CMD.open( source, conf )$/;"	f
CMD.query	.\service\sharedatad.lua	/^function CMD.query(name)$/;"	f
CMD.register_gate	.\examples\login\logind.lua	/^function CMD.register_gate(server, address)$/;"	f
CMD.start	.\examples\agent.lua	/^function CMD.start(gate, fd, proto)$/;"	f
CMD.start	.\examples\watchdog.lua	/^function CMD.start(conf)$/;"	f
CMD.sum	.\test\testoverload.lua	/^function CMD.sum(n)$/;"	f
CMD.update	.\service\sharedatad.lua	/^function CMD.update(name, t)$/;"	f
COMBINE_TYPE	.\lualib-src\lua-seri.c	28;"	d	file:
COMMAND.clearcache	.\service\debug_console.lua	/^function COMMAND.clearcache()$/;"	f
COMMAND.exit	.\service\debug_console.lua	/^function COMMAND.exit(address)$/;"	f
COMMAND.help	.\service\debug_console.lua	/^function COMMAND.help()$/;"	f
COMMAND.info	.\service\debug_console.lua	/^function COMMAND.info(address)$/;"	f
COMMAND.inject	.\service\debug_console.lua	/^function COMMAND.inject(address, filename)$/;"	f
COMMAND.log	.\service\debug_console.lua	/^function COMMAND.log(...)$/;"	f
COMMAND.logoff	.\service\debug_console.lua	/^function COMMAND.logoff(address)$/;"	f
COMMAND.logon	.\service\debug_console.lua	/^function COMMAND.logon(address)$/;"	f
COMMAND.service	.\service\debug_console.lua	/^function COMMAND.service()$/;"	f
COMMAND.snax	.\service\debug_console.lua	/^function COMMAND.snax(...)$/;"	f
COMMAND.start	.\service\debug_console.lua	/^function COMMAND.start(...)$/;"	f
COMMAND.task	.\service\debug_console.lua	/^function COMMAND.task(address)$/;"	f
CREATE_ABC	.\3rd\lua\lopcodes.h	116;"	d
CREATE_ABx	.\3rd\lua\lopcodes.h	121;"	d
CREATE_Ax	.\3rd\lua\lopcodes.h	125;"	d
CSV	.\3rd\lpeg\lpeg.html	/^<h3><a name="CSV"><\/a>Comma-Separated Values (CSV)<\/h3>$/;"	a
CallInfo	.\3rd\lua\lstate.h	/^typedef struct CallInfo {$/;"	s
CallInfo	.\3rd\lua\lstate.h	/^} CallInfo;$/;"	t	typeref:struct:CallInfo
CallS	.\3rd\lua\lapi.c	/^struct CallS {  \/* data to `f_call' *\/$/;"	s	file:
CapKind	.\3rd\lpeg\lpcap.h	/^typedef enum CapKind {$/;"	g
CapKind	.\3rd\lpeg\lpcap.h	/^} CapKind;$/;"	t	typeref:enum:CapKind
CapState	.\3rd\lpeg\lpcap.h	/^typedef struct CapState {$/;"	s
CapState	.\3rd\lpeg\lpcap.h	/^} CapState;$/;"	t	typeref:struct:CapState
Capture	.\3rd\lpeg\lpcap.h	/^typedef struct Capture {$/;"	s
Capture	.\3rd\lpeg\lpcap.h	/^} Capture;$/;"	t	typeref:struct:Capture
Carg	.\3rd\lpeg\lpcap.h	/^  Cclose, Cposition, Cconst, Cbackref, Carg, Csimple, Ctable, Cfunction,$/;"	e	enum:CapKind
Cbackref	.\3rd\lpeg\lpcap.h	/^  Cclose, Cposition, Cconst, Cbackref, Carg, Csimple, Ctable, Cfunction,$/;"	e	enum:CapKind
Cclose	.\3rd\lpeg\lpcap.h	/^  Cclose, Cposition, Cconst, Cbackref, Carg, Csimple, Ctable, Cfunction,$/;"	e	enum:CapKind
Cconst	.\3rd\lpeg\lpcap.h	/^  Cclose, Cposition, Cconst, Cbackref, Carg, Csimple, Ctable, Cfunction,$/;"	e	enum:CapKind
Cfold	.\3rd\lpeg\lpcap.h	/^  Cquery, Cstring, Cnum, Csubst, Cfold, Cruntime, Cgroup$/;"	e	enum:CapKind
Cfunction	.\3rd\lpeg\lpcap.h	/^  Cclose, Cposition, Cconst, Cbackref, Carg, Csimple, Ctable, Cfunction,$/;"	e	enum:CapKind
Cgroup	.\3rd\lpeg\lpcap.h	/^  Cquery, Cstring, Cnum, Csubst, Cfold, Cruntime, Cgroup$/;"	e	enum:CapKind
Charset	.\3rd\lpeg\lptypes.h	/^typedef struct Charset {$/;"	s
Charset	.\3rd\lpeg\lptypes.h	/^} Charset;$/;"	t	typeref:struct:Charset
Closure	.\3rd\lua\lobject.h	/^typedef union Closure {$/;"	u
Closure	.\3rd\lua\lobject.h	/^} Closure;$/;"	t	typeref:union:Closure
ClosureHeader	.\3rd\lua\lobject.h	/^  ClosureHeader;$/;"	m	struct:CClosure
ClosureHeader	.\3rd\lua\lobject.h	/^  ClosureHeader;$/;"	m	struct:LClosure
ClosureHeader	.\3rd\lua\lobject.h	518;"	d
Cnum	.\3rd\lpeg\lpcap.h	/^  Cquery, Cstring, Cnum, Csubst, Cfold, Cruntime, Cgroup$/;"	e	enum:CapKind
CommonHeader	.\3rd\lua\lobject.h	/^    CommonHeader;$/;"	m	struct:TString::__anon6
CommonHeader	.\3rd\lua\lobject.h	/^    CommonHeader;$/;"	m	struct:Udata::__anon7
CommonHeader	.\3rd\lua\lobject.h	/^  CommonHeader;$/;"	m	struct:GCheader
CommonHeader	.\3rd\lua\lobject.h	/^  CommonHeader;$/;"	m	struct:Proto
CommonHeader	.\3rd\lua\lobject.h	/^  CommonHeader;$/;"	m	struct:Table
CommonHeader	.\3rd\lua\lobject.h	/^  CommonHeader;$/;"	m	struct:UpVal
CommonHeader	.\3rd\lua\lobject.h	77;"	d
CommonHeader	.\3rd\lua\lstate.h	/^  CommonHeader;$/;"	m	struct:lua_State
CompileState	.\3rd\lpeg\lpcode.c	/^typedef struct CompileState {$/;"	s	file:
CompileState	.\3rd\lpeg\lpcode.c	/^} CompileState;$/;"	t	typeref:struct:CompileState	file:
ConsControl	.\3rd\lua\lparser.c	/^struct ConsControl {$/;"	s	file:
Cposition	.\3rd\lpeg\lpcap.h	/^  Cclose, Cposition, Cconst, Cbackref, Carg, Csimple, Ctable, Cfunction,$/;"	e	enum:CapKind
Cquery	.\3rd\lpeg\lpcap.h	/^  Cquery, Cstring, Cnum, Csubst, Cfold, Cruntime, Cgroup$/;"	e	enum:CapKind
Cruntime	.\3rd\lpeg\lpcap.h	/^  Cquery, Cstring, Cnum, Csubst, Cfold, Cruntime, Cgroup$/;"	e	enum:CapKind
Csimple	.\3rd\lpeg\lpcap.h	/^  Cclose, Cposition, Cconst, Cbackref, Carg, Csimple, Ctable, Cfunction,$/;"	e	enum:CapKind
Cstring	.\3rd\lpeg\lpcap.h	/^  Cquery, Cstring, Cnum, Csubst, Cfold, Cruntime, Cgroup$/;"	e	enum:CapKind
Csubst	.\3rd\lpeg\lpcap.h	/^  Cquery, Cstring, Cnum, Csubst, Cfold, Cruntime, Cgroup$/;"	e	enum:CapKind
Ctable	.\3rd\lpeg\lpcap.h	/^  Cclose, Cposition, Cconst, Cbackref, Carg, Csimple, Ctable, Cfunction,$/;"	e	enum:CapKind
DEFAULT_CAP	.\lualib-src\lua-bson.c	31;"	d	file:
DEFAULT_CAP	.\lualib-src\lua-mongo.c	25;"	d	file:
DEFAULT_QUEUE_SIZE	.\service-src\service_harbor.c	25;"	d	file:
DEFAULT_QUEUE_SIZE	.\skynet-src\skynet_mq.c	13;"	d	file:
DEFAULT_SLOT_SIZE	.\skynet-src\skynet_handle.c	12;"	d	file:
DES_FP	.\lualib-src\lua-crypt.c	214;"	d	file:
DES_IP	.\lualib-src\lua-crypt.c	201;"	d	file:
DES_ROUND	.\lualib-src\lua-crypt.c	227;"	d	file:
DIGITBIT	.\3rd\lua\lctype.h	40;"	d
DLMSG	.\3rd\lua\loadlib.c	226;"	d	file:
DumpBlock	.\3rd\lua\ldump.c	/^static void DumpBlock(const void* b, size_t size, DumpState* D)$/;"	f	file:
DumpChar	.\3rd\lua\ldump.c	/^static void DumpChar(int y, DumpState* D)$/;"	f	file:
DumpCode	.\3rd\lua\ldump.c	76;"	d	file:
DumpConstants	.\3rd\lua\ldump.c	/^static void DumpConstants(const Proto* f, DumpState* D)$/;"	f	file:
DumpDebug	.\3rd\lua\ldump.c	/^static void DumpDebug(const SharedProto* f, DumpState* D)$/;"	f	file:
DumpFunction	.\3rd\lua\ldump.c	/^static void DumpFunction(const Proto* f, DumpState* D)$/;"	f	file:
DumpHeader	.\3rd\lua\ldump.c	/^static void DumpHeader(DumpState* D)$/;"	f	file:
DumpInt	.\3rd\lua\ldump.c	/^static void DumpInt(int x, DumpState* D)$/;"	f	file:
DumpMem	.\3rd\lua\ldump.c	26;"	d	file:
DumpNumber	.\3rd\lua\ldump.c	/^static void DumpNumber(lua_Number x, DumpState* D)$/;"	f	file:
DumpState	.\3rd\lua\ldump.c	/^} DumpState;$/;"	t	typeref:struct:__anon4	file:
DumpString	.\3rd\lua\ldump.c	/^static void DumpString(const TString* s, DumpState* D)$/;"	f	file:
DumpUpvalues	.\3rd\lua\ldump.c	/^static void DumpUpvalues(const Proto* f, DumpState* D)$/;"	f	file:
DumpVar	.\3rd\lua\ldump.c	27;"	d	file:
DumpVector	.\3rd\lua\ldump.c	/^static void DumpVector(const void* b, int n, size_t size, DumpState* D)$/;"	f	file:
Dyndata	.\3rd\lua\lparser.h	/^typedef struct Dyndata {$/;"	s
Dyndata	.\3rd\lua\lparser.h	/^} Dyndata;$/;"	t	typeref:struct:Dyndata
E	.\skynet-src\skynet_env.c	/^static struct skynet_env *E = NULL;$/;"	v	typeref:struct:skynet_env	file:
ENCODE_BUFFERSIZE	.\lualib-src\sproto\lsproto.c	8;"	d	file:
ENCODE_DEEPLEVEL	.\lualib-src\sproto\lsproto.c	12;"	d	file:
ENCODE_MAXSIZE	.\lualib-src\sproto\lsproto.c	11;"	d	file:
EOFMARK	.\3rd\lua\lua.c	244;"	d	file:
EOZ	.\3rd\lua\lzio.h	16;"	d
ERRFUNC	.\3rd\lua\loadlib.c	103;"	d	file:
ERRLIB	.\3rd\lua\loadlib.c	102;"	d	file:
ERRORSTACKSIZE	.\3rd\lua\ldo.c	158;"	d	file:
EXPORT	.\platform.mk	/^EXPORT := -Wl,-E$/;"	m
EXPORT	.\platform.mk	/^macosx : EXPORT :=$/;"	m
EXTRA_STACK	.\3rd\lua\lstate.h	47;"	d
F	.\3rd\lua-md5\md5.c	41;"	d	file:
FINALIZEDBIT	.\3rd\lua\lgc.h	90;"	d
FIRST_RESERVED	.\3rd\lua\llex.h	14;"	d
FIXEDARGS	.\3rd\lpeg\lptypes.h	71;"	d
FIXEDBIT	.\3rd\lua\lgc.h	92;"	d
FLAGS	.\3rd\lua\lstrlib.c	825;"	d	file:
FORMAT	.\3rd\lua\lundump.c	238;"	d	file:
FREE	.\skynet-src\socket_server.c	211;"	d	file:
FUNCTION	.\3rd\lua\luac.c	117;"	d	file:
FuncState	.\3rd\lua\lparser.h	/^typedef struct FuncState {$/;"	s
FuncState	.\3rd\lua\lparser.h	/^} FuncState;$/;"	t	typeref:struct:FuncState
G	.\3rd\lua-md5\md5.c	42;"	d	file:
G	.\3rd\lua\lstate.h	179;"	d
G	.\lualib-src\lua-crypt.c	699;"	d	file:
GCFINALIZENUM	.\3rd\lua\lgc.c	37;"	d	file:
GCObject	.\3rd\lua\lobject.h	/^typedef union GCObject GCObject;$/;"	t	typeref:union:GCObject
GCObject	.\3rd\lua\lstate.h	/^union GCObject {$/;"	u
GCSTEPSIZE	.\3rd\lua\lgc.h	32;"	d
GCSWEEPCOST	.\3rd\lua\lgc.c	31;"	d	file:
GCSWEEPMAX	.\3rd\lua\lgc.c	34;"	d	file:
GCSatomic	.\3rd\lua\lgc.h	40;"	d
GCSpause	.\3rd\lua\lgc.h	44;"	d
GCSpropagate	.\3rd\lua\lgc.h	39;"	d
GCSsweep	.\3rd\lua\lgc.h	43;"	d
GCSsweepstring	.\3rd\lua\lgc.h	41;"	d
GCSsweepudata	.\3rd\lua\lgc.h	42;"	d
GCTM	.\3rd\lua\lgc.c	/^static void GCTM (lua_State *L, int propagateerrors) {$/;"	f	file:
GCdebt	.\3rd\lua\lstate.h	/^  l_mem GCdebt;  \/* bytes allocated not yet compensated by the collector *\/$/;"	m	struct:global_State
GCestimate	.\3rd\lua\lstate.h	/^  lu_mem GCestimate;  \/* an estimate of the non-garbage memory in use *\/$/;"	m	struct:global_State
GCheader	.\3rd\lua\lobject.h	/^typedef struct GCheader {$/;"	s
GCheader	.\3rd\lua\lobject.h	/^} GCheader;$/;"	t	typeref:struct:GCheader
GCmemtrav	.\3rd\lua\lstate.h	/^  lu_mem GCmemtrav;  \/* memory traversed by the GC *\/$/;"	m	struct:global_State
GETARG_A	.\3rd\lua\lopcodes.h	97;"	d
GETARG_Ax	.\3rd\lua\lopcodes.h	109;"	d
GETARG_B	.\3rd\lua\lopcodes.h	100;"	d
GETARG_Bx	.\3rd\lua\lopcodes.h	106;"	d
GETARG_C	.\3rd\lua\lopcodes.h	103;"	d
GETARG_sBx	.\3rd\lua\lopcodes.h	112;"	d
GET_OPCODE	.\3rd\lua\lopcodes.h	89;"	d
GET_UINT32	.\lualib-src\lua-crypt.c	183;"	d	file:
GLOBALNAME_LENGTH	.\skynet-src\skynet_harbor.h	8;"	d
G_NODE	.\skynet-src\skynet_server.c	/^static struct skynet_node G_NODE;$/;"	v	typeref:struct:skynet_node	file:
H	.\3rd\lua-md5\md5.c	43;"	d	file:
H	.\skynet-src\skynet_handle.c	/^static struct handle_storage *H = NULL;$/;"	v	typeref:struct:handle_storage	file:
HANDLE_MASK	.\skynet-src\skynet_harbor.h	13;"	d
HANDLE_REMOTE_SHIFT	.\skynet-src\skynet_harbor.h	14;"	d
HARBOR	.\skynet-src\skynet_harbor.c	/^static unsigned int HARBOR = ~0;$/;"	v	file:
HASHSIZE	.\3rd\lua-md5\md5.h	14;"	d
HASHSIZE	.\lualib-src\lua-netpack.c	15;"	d	file:
HASH_ID	.\skynet-src\socket_server.c	40;"	d	file:
HASH_SIZE	.\service-src\service_harbor.c	24;"	d	file:
HEADER_COOKIE_LENGTH	.\service-src\service_harbor.c	28;"	d	file:
HEX	.\lualib-src\lua-crypt.c	486;"	d	file:
HOOKKEY	.\3rd\lua\ldblib.c	21;"	d	file:
Hash	.\lualib-src\lua-crypt.c	/^Hash(const char * str, int sz, uint8_t key[8]) {$/;"	f	file:
I	.\3rd\lua-md5\md5.c	44;"	d	file:
IAny	.\3rd\lpeg\lpvm.h	/^  IAny, \/* if no char, fail *\/$/;"	e	enum:Opcode
IBackCommit	.\3rd\lpeg\lpvm.h	/^  IBackCommit,  \/* "fails" but jump to its own 'offset' *\/$/;"	e	enum:Opcode
IBehind	.\3rd\lpeg\lpvm.h	/^  IBehind,  \/* walk back 'aux' characters (fail if not possible) *\/$/;"	e	enum:Opcode
ICall	.\3rd\lpeg\lpvm.h	/^  ICall,  \/* call rule at 'offset' *\/$/;"	e	enum:Opcode
IChar	.\3rd\lpeg\lpvm.h	/^  IChar,  \/* if char != aux, fail *\/$/;"	e	enum:Opcode
IChoice	.\3rd\lpeg\lpvm.h	/^  IChoice,  \/* stack a choice; next fail will jump to 'offset' *\/$/;"	e	enum:Opcode
ICloseCapture	.\3rd\lpeg\lpvm.h	/^  ICloseCapture,$/;"	e	enum:Opcode
ICloseRunTime	.\3rd\lpeg\lpvm.h	/^  ICloseRunTime$/;"	e	enum:Opcode
ICommit	.\3rd\lpeg\lpvm.h	/^  ICommit,  \/* pop choice and jump to 'offset' *\/$/;"	e	enum:Opcode
IEnd	.\3rd\lpeg\lpvm.h	/^  IEnd,  \/* end of pattern *\/$/;"	e	enum:Opcode
IFail	.\3rd\lpeg\lpvm.h	/^  IFail,  \/* go back to saved state on choice and jump to saved offset *\/$/;"	e	enum:Opcode
IFailTwice	.\3rd\lpeg\lpvm.h	/^  IFailTwice,  \/* pop one choice and then fail *\/$/;"	e	enum:Opcode
IFullCapture	.\3rd\lpeg\lpvm.h	/^  IFullCapture,  \/* complete capture of last 'off' chars *\/$/;"	e	enum:Opcode
IGiveup	.\3rd\lpeg\lpvm.h	/^  IGiveup,  \/* internal use *\/$/;"	e	enum:Opcode
IJmp	.\3rd\lpeg\lpvm.h	/^  IJmp,  \/* jump to 'offset' *\/$/;"	e	enum:Opcode
INDEXK	.\3rd\lua\lopcodes.h	140;"	d
INITBACK	.\3rd\lpeg\lpvm.c	21;"	d	file:
INITCAPSIZE	.\3rd\lpeg\lptypes.h	64;"	d
IO_INPUT	.\3rd\lua\liolib.c	118;"	d	file:
IO_OUTPUT	.\3rd\lua\liolib.c	119;"	d	file:
IO_PREFIX	.\3rd\lua\liolib.c	117;"	d	file:
IOpenCall	.\3rd\lpeg\lpvm.h	/^  IOpenCall,  \/* call rule number 'key' (must be closed to a ICall) *\/$/;"	e	enum:Opcode
IOpenCapture	.\3rd\lpeg\lpvm.h	/^  IOpenCapture,  \/* start a capture *\/$/;"	e	enum:Opcode
IPartialCommit	.\3rd\lpeg\lpvm.h	/^  IPartialCommit,  \/* update top choice to current position and jump *\/$/;"	e	enum:Opcode
IRet	.\3rd\lpeg\lpvm.h	/^  IRet,  \/* return from a rule *\/$/;"	e	enum:Opcode
IS	.\3rd\lua\luac.c	67;"	d	file:
ISK	.\3rd\lua\lopcodes.h	137;"	d
ISet	.\3rd\lpeg\lpvm.h	/^  ISet,  \/* if char not in buff, fail *\/$/;"	e	enum:Opcode
ISpan	.\3rd\lpeg\lpvm.h	/^  ISpan,  \/* read a span of chars in buff *\/$/;"	e	enum:Opcode
ITestAny	.\3rd\lpeg\lpvm.h	/^  ITestAny,  \/* in no char, jump to 'offset' *\/$/;"	e	enum:Opcode
ITestChar	.\3rd\lpeg\lpvm.h	/^  ITestChar,  \/* if char != aux, jump to 'offset' *\/$/;"	e	enum:Opcode
ITestSet	.\3rd\lpeg\lpvm.h	/^  ITestSet,  \/* if char not in buff, jump to 'offset' *\/$/;"	e	enum:Opcode
Inst	.\3rd\lpeg\lpvm.h	/^  struct Inst {$/;"	s	union:Instruction
Instruction	.\3rd\lpeg\lpvm.h	/^typedef union Instruction {$/;"	u
Instruction	.\3rd\lpeg\lpvm.h	/^} Instruction;$/;"	t	typeref:union:Instruction
Instruction	.\3rd\lua\llimits.h	/^typedef lu_int32 Instruction;$/;"	t
IntPoint	.\3rd\lua\llimits.h	44;"	d
KBx	.\3rd\lua\lvm.c	497;"	d	file:
KEYTYPE_INTEGER	.\lualib-src\lua-sharedata.c	10;"	d	file:
KEYTYPE_STRING	.\lualib-src\lua-sharedata.c	11;"	d	file:
KGC_EMERGENCY	.\3rd\lua\lstate.h	55;"	d
KGC_GEN	.\3rd\lua\lstate.h	56;"	d
KGC_NORMAL	.\3rd\lua\lstate.h	54;"	d
KNRM	.\lualib-src\lua-skynet.c	5;"	d	file:
KRED	.\lualib-src\lua-skynet.c	6;"	d	file:
L	.\3rd\lpeg\lpcap.h	/^  lua_State *L;$/;"	m	struct:CapState
L	.\3rd\lpeg\lpcode.c	/^  lua_State *L;$/;"	m	struct:CompileState	file:
L	.\3rd\lua\lauxlib.c	/^	lua_State *L;$/;"	m	struct:codecache	file:
L	.\3rd\lua\lauxlib.h	/^  lua_State *L;$/;"	m	struct:luaL_Buffer
L	.\3rd\lua\ldump.c	/^ lua_State* L;$/;"	m	struct:__anon4	file:
L	.\3rd\lua\llex.h	/^  struct lua_State *L;$/;"	m	struct:LexState	typeref:struct:LexState::lua_State
L	.\3rd\lua\lstrlib.c	/^  lua_State *L;$/;"	m	struct:MatchState	file:
L	.\3rd\lua\lundump.c	/^ lua_State* L;$/;"	m	struct:__anon22	file:
L	.\3rd\lua\lzio.h	/^  lua_State *L;			\/* Lua state (for reader) *\/$/;"	m	struct:Zio
L	.\lualib-src\lua-sharedata.c	/^	lua_State * L;$/;"	m	struct:context	file:
L	.\lualib-src\lua-sharedata.c	/^	lua_State * L;$/;"	m	struct:table	file:
L	.\lualib-src\lua-skynet.c	/^	lua_State * L;$/;"	m	struct:snlua	file:
L	.\lualib-src\sproto\lsproto.c	/^	lua_State *L;$/;"	m	struct:decode_ud	file:
L	.\lualib-src\sproto\lsproto.c	/^	lua_State *L;$/;"	m	struct:encode_ud	file:
L	.\service-src\service_snlua.c	/^	lua_State * L;\/\/一个lua虚拟机$/;"	m	struct:snlua	file:
L	.\skynet-src\skynet_env.c	/^	lua_State *L;		\/\/LUA虚拟机$/;"	m	struct:skynet_env	file:
LARGE_PAGE_NODE	.\lualib-src\lua-socket.c	21;"	d	file:
LClosure	.\3rd\lua\lobject.h	/^typedef struct LClosure {$/;"	s
LClosure	.\3rd\lua\lobject.h	/^} LClosure;$/;"	t	typeref:struct:LClosure
LEFTROTATE	.\lualib-src\lua-crypt.c	540;"	d	file:
LEVELS1	.\3rd\lua\lauxlib.c	34;"	d	file:
LEVELS2	.\3rd\lua\lauxlib.c	35;"	d	file:
LFIELDS_PER_FLUSH	.\3rd\lua\lopcodes.h	285;"	d
LG	.\3rd\lua\lstate.c	/^typedef struct LG {$/;"	s	file:
LG	.\3rd\lua\lstate.c	/^} LG;$/;"	t	typeref:struct:LG	file:
LHS_assign	.\3rd\lua\lparser.c	/^struct LHS_assign {$/;"	s	file:
LHs	.\lualib-src\lua-crypt.c	/^static uint32_t LHs[16] = {$/;"	v	file:
LIB_FAIL	.\3rd\lua\loadlib.c	222;"	d	file:
LIB_FAIL	.\3rd\lua\loadlib.c	223;"	d	file:
LIB_FAIL	.\3rd\lua\loadlib.c	98;"	d	file:
LL	.\3rd\lua\lobject.c	244;"	d	file:
LOCK	.\3rd\lua\lauxlib.c	962;"	d	file:
LOCK	.\lualib-src\lua-clientsocket.c	132;"	d	file:
LOCK	.\skynet-src\skynet_env.c	24;"	d	file:
LOCK	.\skynet-src\skynet_mq.c	46;"	d	file:
LOCK	.\skynet-src\skynet_timer.c	21;"	d	file:
LOG_MESSAGE_SIZE	.\skynet-src\skynet_error.c	12;"	d	file:
LStream	.\3rd\lua\liolib.c	/^typedef luaL_Stream LStream;$/;"	t	file:
LUAC_HEADERSIZE	.\3rd\lua\lundump.h	26;"	d
LUAC_TAIL	.\3rd\lua\lundump.h	23;"	d
LUAI_BITSINT	.\3rd\lua\luaconf.h	319;"	d
LUAI_BITSINT	.\3rd\lua\luaconf.h	322;"	d
LUAI_DDEC	.\3rd\lua\luaconf.h	180;"	d
LUAI_DDEC	.\3rd\lua\luaconf.h	185;"	d
LUAI_DDEF	.\3rd\lua\luaconf.h	181;"	d
LUAI_DDEF	.\3rd\lua\luaconf.h	186;"	d
LUAI_EXTRAIEEE	.\3rd\lua\llimits.h	219;"	d
LUAI_EXTRAIEEE	.\3rd\lua\llimits.h	224;"	d
LUAI_FIRSTPSEUDOIDX	.\3rd\lua\luaconf.h	363;"	d
LUAI_FUNC	.\3rd\lua\luaconf.h	179;"	d
LUAI_FUNC	.\3rd\lua\luaconf.h	184;"	d
LUAI_GCMAJOR	.\3rd\lua\lstate.c	34;"	d	file:
LUAI_GCMUL	.\3rd\lua\lstate.c	38;"	d	file:
LUAI_GCPAUSE	.\3rd\lua\lstate.c	30;"	d	file:
LUAI_HASHLIMIT	.\3rd\lua\lstring.c	26;"	d	file:
LUAI_MAXCCALLS	.\3rd\lua\llimits.h	119;"	d
LUAI_MAXNUMBER2STR	.\3rd\lua\luaconf.h	405;"	d
LUAI_MAXSHORTLEN	.\3rd\lua\luaconf.h	232;"	d
LUAI_MAXSTACK	.\3rd\lua\luaconf.h	357;"	d
LUAI_MAXSTACK	.\3rd\lua\luaconf.h	359;"	d
LUAI_MEM	.\3rd\lua\luaconf.h	341;"	d
LUAI_MEM	.\3rd\lua\luaconf.h	346;"	d
LUAI_THROW	.\3rd\lua\ldo.c	53;"	d	file:
LUAI_THROW	.\3rd\lua\ldo.c	60;"	d	file:
LUAI_THROW	.\3rd\lua\ldo.c	66;"	d	file:
LUAI_TRY	.\3rd\lua\ldo.c	54;"	d	file:
LUAI_TRY	.\3rd\lua\ldo.c	61;"	d	file:
LUAI_TRY	.\3rd\lua\ldo.c	67;"	d	file:
LUAI_UACNUMBER	.\3rd\lua\luaconf.h	393;"	d
LUAI_UMEM	.\3rd\lua\luaconf.h	340;"	d
LUAI_UMEM	.\3rd\lua\luaconf.h	345;"	d
LUAI_USER_ALIGNMENT_T	.\3rd\lua\llimits.h	50;"	d
LUALIB_API	.\3rd\lua\luaconf.h	159;"	d
LUAL_BUFFERSIZE	.\3rd\lua\luaconf.h	372;"	d
LUAMOD_API	.\3rd\lua\luaconf.h	160;"	d
LUA_ANSI	.\3rd\lua\luaconf.h	28;"	d
LUA_API	.\3rd\lua\luaconf.h	146;"	d
LUA_API	.\3rd\lua\luaconf.h	148;"	d
LUA_API	.\3rd\lua\luaconf.h	153;"	d
LUA_AUTHORS	.\3rd\lua\lua.h	27;"	d
LUA_BITLIBNAME	.\3rd\lua\lualib.h	32;"	d
LUA_CACHELIB	.\3rd\lua\lualib.h	44;"	d
LUA_CDIR	.\3rd\lua\luaconf.h	105;"	d
LUA_CDIR	.\3rd\lua\luaconf.h	93;"	d
LUA_COLIBNAME	.\3rd\lua\lualib.h	17;"	d
LUA_COMPAT_LOADERS	.\3rd\lua\luaconf.h	259;"	d
LUA_COMPAT_LOADSTRING	.\3rd\lua\luaconf.h	281;"	d
LUA_COMPAT_LOG10	.\3rd\lua\luaconf.h	275;"	d
LUA_COMPAT_MAXN	.\3rd\lua\luaconf.h	286;"	d
LUA_COMPAT_MODULE	.\3rd\lua\luaconf.h	304;"	d
LUA_COMPAT_UNPACK	.\3rd\lua\luaconf.h	253;"	d
LUA_COPYRIGHT	.\3rd\lua\lua.h	26;"	d
LUA_CORE	.\3rd\lua\lapi.c	12;"	d	file:
LUA_CORE	.\3rd\lua\lcode.c	11;"	d	file:
LUA_CORE	.\3rd\lua\lctype.c	8;"	d	file:
LUA_CORE	.\3rd\lua\ldebug.c	14;"	d	file:
LUA_CORE	.\3rd\lua\ldo.c	13;"	d	file:
LUA_CORE	.\3rd\lua\ldump.c	10;"	d	file:
LUA_CORE	.\3rd\lua\lfunc.c	11;"	d	file:
LUA_CORE	.\3rd\lua\lgc.c	10;"	d	file:
LUA_CORE	.\3rd\lua\llex.c	12;"	d	file:
LUA_CORE	.\3rd\lua\lmem.c	11;"	d	file:
LUA_CORE	.\3rd\lua\lobject.c	13;"	d	file:
LUA_CORE	.\3rd\lua\lopcodes.c	9;"	d	file:
LUA_CORE	.\3rd\lua\lparser.c	11;"	d	file:
LUA_CORE	.\3rd\lua\lstate.c	12;"	d	file:
LUA_CORE	.\3rd\lua\lstring.c	11;"	d	file:
LUA_CORE	.\3rd\lua\ltable.c	24;"	d	file:
LUA_CORE	.\3rd\lua\ltm.c	11;"	d	file:
LUA_CORE	.\3rd\lua\luac.c	13;"	d	file:
LUA_CORE	.\3rd\lua\luac.c	215;"	d	file:
LUA_CORE	.\3rd\lua\lundump.c	10;"	d	file:
LUA_CORE	.\3rd\lua\lvm.c	13;"	d	file:
LUA_CORE	.\3rd\lua\lzio.c	11;"	d	file:
LUA_CPATH	.\3rd\lua\loadlib.c	42;"	d	file:
LUA_CPATHVERSION	.\3rd\lua\loadlib.c	48;"	d	file:
LUA_CPATH_DEFAULT	.\3rd\lua\luaconf.h	109;"	d
LUA_CPATH_DEFAULT	.\3rd\lua\luaconf.h	97;"	d
LUA_CSUBSEP	.\3rd\lua\loadlib.c	80;"	d	file:
LUA_DBLIBNAME	.\3rd\lua\lualib.h	38;"	d
LUA_DIRSEP	.\3rd\lua\luaconf.h	120;"	d
LUA_DIRSEP	.\3rd\lua\luaconf.h	122;"	d
LUA_DL_DLL	.\3rd\lua\luaconf.h	37;"	d
LUA_ENV	.\3rd\lua\luaconf.h	131;"	d
LUA_ERRERR	.\3rd\lua\lua.h	51;"	d
LUA_ERRFILE	.\3rd\lua\lauxlib.h	20;"	d
LUA_ERRGCMM	.\3rd\lua\lua.h	50;"	d
LUA_ERRMEM	.\3rd\lua\lua.h	49;"	d
LUA_ERRRUN	.\3rd\lua\lua.h	47;"	d
LUA_ERRSYNTAX	.\3rd\lua\lua.h	48;"	d
LUA_EXEC_DIR	.\3rd\lua\loadlib.c	66;"	d	file:
LUA_FILEHANDLE	.\3rd\lua\lauxlib.h	185;"	d
LUA_FLTFRMLEN	.\3rd\lua\lstrlib.c	816;"	d	file:
LUA_FLTFRM_T	.\3rd\lua\lstrlib.c	817;"	d	file:
LUA_GCCOLLECT	.\3rd\lua\lua.h	284;"	d
LUA_GCCOUNT	.\3rd\lua\lua.h	285;"	d
LUA_GCCOUNTB	.\3rd\lua\lua.h	286;"	d
LUA_GCGEN	.\3rd\lua\lua.h	292;"	d
LUA_GCINC	.\3rd\lua\lua.h	293;"	d
LUA_GCISRUNNING	.\3rd\lua\lua.h	291;"	d
LUA_GCRESTART	.\3rd\lua\lua.h	283;"	d
LUA_GCSETMAJORINC	.\3rd\lua\lua.h	290;"	d
LUA_GCSETPAUSE	.\3rd\lua\lua.h	288;"	d
LUA_GCSETSTEPMUL	.\3rd\lua\lua.h	289;"	d
LUA_GCSTEP	.\3rd\lua\lua.h	287;"	d
LUA_GCSTOP	.\3rd\lua\lua.h	282;"	d
LUA_HOOKCALL	.\3rd\lua\lua.h	361;"	d
LUA_HOOKCOUNT	.\3rd\lua\lua.h	364;"	d
LUA_HOOKLINE	.\3rd\lua\lua.h	363;"	d
LUA_HOOKRET	.\3rd\lua\lua.h	362;"	d
LUA_HOOKTAILCALL	.\3rd\lua\lua.h	365;"	d
LUA_IDSIZE	.\3rd\lua\luaconf.h	204;"	d
LUA_IEEE754TRICK	.\3rd\lua\luaconf.h	511;"	d
LUA_IEEE754TRICK	.\3rd\lua\luaconf.h	519;"	d
LUA_IEEE754TRICK	.\3rd\lua\luaconf.h	524;"	d
LUA_IEEE754TRICK	.\3rd\lua\luaconf.h	530;"	d
LUA_IEEEENDIAN	.\3rd\lua\luaconf.h	504;"	d
LUA_IEEEENDIAN	.\3rd\lua\luaconf.h	513;"	d
LUA_IEEEENDIAN	.\3rd\lua\luaconf.h	520;"	d
LUA_IEEEENDIAN	.\3rd\lua\luaconf.h	525;"	d
LUA_IEEEENDIANLOC	.\3rd\lua\llimits.h	221;"	d
LUA_IEEEENDIANLOC	.\3rd\lua\llimits.h	223;"	d
LUA_IEEELL	.\3rd\lua\luaconf.h	512;"	d
LUA_IGMARK	.\3rd\lua\loadlib.c	69;"	d	file:
LUA_INIT	.\3rd\lua\lua.c	35;"	d	file:
LUA_INITVERSION	.\3rd\lua\lua.c	38;"	d	file:
LUA_INT32	.\3rd\lua\luaconf.h	339;"	d
LUA_INT32	.\3rd\lua\luaconf.h	344;"	d
LUA_INTEGER	.\3rd\lua\luaconf.h	460;"	d
LUA_INTFRMLEN	.\3rd\lua\lstrlib.c	797;"	d	file:
LUA_INTFRMLEN	.\3rd\lua\lstrlib.c	802;"	d	file:
LUA_INTFRM_T	.\3rd\lua\lstrlib.c	798;"	d	file:
LUA_INTFRM_T	.\3rd\lua\lstrlib.c	803;"	d	file:
LUA_IOLIBNAME	.\3rd\lua\lualib.h	23;"	d
LUA_LDIR	.\3rd\lua\luaconf.h	104;"	d
LUA_LDIR	.\3rd\lua\luaconf.h	92;"	d
LUA_LIB	.\3rd\lua\lauxlib.c	20;"	d	file:
LUA_LIB	.\3rd\lua\lbaselib.c	15;"	d	file:
LUA_LIB	.\3rd\lua\lbitlib.c	8;"	d	file:
LUA_LIB	.\3rd\lua\lcorolib.c	12;"	d	file:
LUA_LIB	.\3rd\lua\ldblib.c	13;"	d	file:
LUA_LIB	.\3rd\lua\linit.c	17;"	d	file:
LUA_LIB	.\3rd\lua\liolib.c	24;"	d	file:
LUA_LIB	.\3rd\lua\lmathlib.c	12;"	d	file:
LUA_LIB	.\3rd\lua\loadlib.c	25;"	d	file:
LUA_LIB	.\3rd\lua\loslib.c	15;"	d	file:
LUA_LIB	.\3rd\lua\lstrlib.c	15;"	d	file:
LUA_LIB	.\3rd\lua\ltablib.c	11;"	d	file:
LUA_LLE_FLAGS	.\3rd\lua\loadlib.c	164;"	d	file:
LUA_LOADLIBNAME	.\3rd\lua\lualib.h	41;"	d
LUA_LSUBSEP	.\3rd\lua\loadlib.c	84;"	d	file:
LUA_MASKCALL	.\3rd\lua\lua.h	371;"	d
LUA_MASKCOUNT	.\3rd\lua\lua.h	374;"	d
LUA_MASKLINE	.\3rd\lua\lua.h	373;"	d
LUA_MASKRET	.\3rd\lua\lua.h	372;"	d
LUA_MATHLIBNAME	.\3rd\lua\lualib.h	35;"	d
LUA_MAXCAPTURES	.\3rd\lua\lstrlib.c	28;"	d	file:
LUA_MAXINPUT	.\3rd\lua\lua.c	31;"	d	file:
LUA_MINBUFFER	.\3rd\lua\llimits.h	150;"	d
LUA_MINSTACK	.\3rd\lua\lua.h	93;"	d
LUA_MSASMTRICK	.\3rd\lua\luaconf.h	503;"	d
LUA_MULTRET	.\3rd\lua\lua.h	34;"	d
LUA_NANTRICK	.\3rd\lua\luaconf.h	505;"	d
LUA_NANTRICK	.\3rd\lua\luaconf.h	514;"	d
LUA_NBITS	.\3rd\lua\lbitlib.c	18;"	d	file:
LUA_NOREF	.\3rd\lua\lauxlib.h	69;"	d
LUA_NUMBER	.\3rd\lua\luaconf.h	387;"	d
LUA_NUMBER_DOUBLE	.\3rd\lua\luaconf.h	386;"	d
LUA_NUMBER_FMT	.\3rd\lua\luaconf.h	403;"	d
LUA_NUMBER_SCAN	.\3rd\lua\luaconf.h	402;"	d
LUA_NUMTAGS	.\3rd\lua\lua.h	88;"	d
LUA_OFSEP	.\3rd\lua\loadlib.c	92;"	d	file:
LUA_OK	.\3rd\lua\lua.h	45;"	d
LUA_OPADD	.\3rd\lua\lua.h	184;"	d
LUA_OPDIV	.\3rd\lua\lua.h	187;"	d
LUA_OPEQ	.\3rd\lua\lua.h	194;"	d
LUA_OPLE	.\3rd\lua\lua.h	196;"	d
LUA_OPLT	.\3rd\lua\lua.h	195;"	d
LUA_OPMOD	.\3rd\lua\lua.h	188;"	d
LUA_OPMUL	.\3rd\lua\lua.h	186;"	d
LUA_OPPOW	.\3rd\lua\lua.h	189;"	d
LUA_OPSUB	.\3rd\lua\lua.h	185;"	d
LUA_OPUNM	.\3rd\lua\lua.h	190;"	d
LUA_OSLIBNAME	.\3rd\lua\lualib.h	26;"	d
LUA_PATH	.\3rd\lua\loadlib.c	38;"	d	file:
LUA_PATHSUFFIX	.\3rd\lua\loadlib.c	45;"	d	file:
LUA_PATHVERSION	.\3rd\lua\loadlib.c	47;"	d	file:
LUA_PATH_DEFAULT	.\3rd\lua\luaconf.h	106;"	d
LUA_PATH_DEFAULT	.\3rd\lua\luaconf.h	94;"	d
LUA_PATH_MARK	.\3rd\lua\loadlib.c	63;"	d	file:
LUA_PATH_SEP	.\3rd\lua\loadlib.c	60;"	d	file:
LUA_POF	.\3rd\lua\loadlib.c	89;"	d	file:
LUA_PROGNAME	.\3rd\lua\lua.c	27;"	d	file:
LUA_PROMPT	.\3rd\lua\lua.c	22;"	d	file:
LUA_PROMPT2	.\3rd\lua\lua.c	23;"	d	file:
LUA_QL	.\3rd\lua\luaconf.h	195;"	d
LUA_QS	.\3rd\lua\luaconf.h	196;"	d
LUA_REFNIL	.\3rd\lua\lauxlib.h	70;"	d
LUA_REGISTRYINDEX	.\3rd\lua\lua.h	40;"	d
LUA_RELEASE	.\3rd\lua\lua.h	25;"	d
LUA_RIDX_GLOBALS	.\3rd\lua\lua.h	98;"	d
LUA_RIDX_LAST	.\3rd\lua\lua.h	99;"	d
LUA_RIDX_MAINTHREAD	.\3rd\lua\lua.h	97;"	d
LUA_ROOT	.\3rd\lua\luaconf.h	103;"	d
LUA_SERIALIZE_H	.\lualib-src\lua-seri.h	3;"	d
LUA_SIGNATURE	.\3rd\lua\lua.h	31;"	d
LUA_STRFTIMEOPTIONS	.\3rd\lua\loslib.c	29;"	d	file:
LUA_STRFTIMEOPTIONS	.\3rd\lua\loslib.c	31;"	d	file:
LUA_STRLIBNAME	.\3rd\lua\lualib.h	29;"	d
LUA_TABLIBNAME	.\3rd\lua\lualib.h	20;"	d
LUA_TBOOLEAN	.\3rd\lua\lua.h	79;"	d
LUA_TCCL	.\3rd\lua\lobject.h	52;"	d
LUA_TDEADKEY	.\3rd\lua\lobject.h	24;"	d
LUA_TFUNCTION	.\3rd\lua\lua.h	84;"	d
LUA_TLCF	.\3rd\lua\lobject.h	51;"	d
LUA_TLCL	.\3rd\lua\lobject.h	50;"	d
LUA_TLIGHTUSERDATA	.\3rd\lua\lua.h	80;"	d
LUA_TLNGSTR	.\3rd\lua\lobject.h	57;"	d
LUA_TMPNAMBUFSIZE	.\3rd\lua\loslib.c	47;"	d	file:
LUA_TMPNAMBUFSIZE	.\3rd\lua\loslib.c	56;"	d	file:
LUA_TNIL	.\3rd\lua\lua.h	78;"	d
LUA_TNONE	.\3rd\lua\lua.h	76;"	d
LUA_TNUMBER	.\3rd\lua\lua.h	81;"	d
LUA_TOTALTAGS	.\3rd\lua\lobject.h	29;"	d
LUA_TPROTO	.\3rd\lua\lobject.h	22;"	d
LUA_TSHRSTR	.\3rd\lua\lobject.h	56;"	d
LUA_TSTRING	.\3rd\lua\lua.h	82;"	d
LUA_TTABLE	.\3rd\lua\lua.h	83;"	d
LUA_TTHREAD	.\3rd\lua\lua.h	86;"	d
LUA_TUPVAL	.\3rd\lua\lobject.h	23;"	d
LUA_TUSERDATA	.\3rd\lua\lua.h	85;"	d
LUA_UNSIGNED	.\3rd\lua\luaconf.h	466;"	d
LUA_USE_AFORMAT	.\3rd\lua\luaconf.h	38;"	d
LUA_USE_AFORMAT	.\3rd\lua\luaconf.h	48;"	d
LUA_USE_AFORMAT	.\3rd\lua\luaconf.h	57;"	d
LUA_USE_CTYPE	.\3rd\lua\lctype.h	23;"	d
LUA_USE_CTYPE	.\3rd\lua\lctype.h	26;"	d
LUA_USE_DLOPEN	.\3rd\lua\luaconf.h	45;"	d
LUA_USE_DLOPEN	.\3rd\lua\luaconf.h	54;"	d
LUA_USE_GMTIME_R	.\3rd\lua\luaconf.h	73;"	d
LUA_USE_ISATTY	.\3rd\lua\luaconf.h	70;"	d
LUA_USE_LONGLONG	.\3rd\lua\luaconf.h	49;"	d
LUA_USE_LONGLONG	.\3rd\lua\luaconf.h	58;"	d
LUA_USE_MKSTEMP	.\3rd\lua\luaconf.h	69;"	d
LUA_USE_POPEN	.\3rd\lua\luaconf.h	71;"	d
LUA_USE_POSIX	.\3rd\lua\luaconf.h	44;"	d
LUA_USE_POSIX	.\3rd\lua\luaconf.h	53;"	d
LUA_USE_READLINE	.\3rd\lua\luaconf.h	46;"	d
LUA_USE_READLINE	.\3rd\lua\luaconf.h	55;"	d
LUA_USE_STRTODHEX	.\3rd\lua\luaconf.h	47;"	d
LUA_USE_STRTODHEX	.\3rd\lua\luaconf.h	56;"	d
LUA_USE_ULONGJMP	.\3rd\lua\luaconf.h	72;"	d
LUA_VDIR	.\3rd\lua\luaconf.h	102;"	d
LUA_VERSION	.\3rd\lua\lua.h	24;"	d
LUA_VERSION_MAJOR	.\3rd\lua\lua.h	19;"	d
LUA_VERSION_MINOR	.\3rd\lua\lua.h	20;"	d
LUA_VERSION_NUM	.\3rd\lua\lua.h	21;"	d
LUA_VERSION_RELEASE	.\3rd\lua\lua.h	22;"	d
LUA_WIN	.\3rd\lua\luaconf.h	33;"	d
LUA_YIELD	.\3rd\lua\lua.h	46;"	d
LX	.\3rd\lua\lstate.c	/^typedef struct LX {$/;"	s	file:
LX	.\3rd\lua\lstate.c	/^} LX;$/;"	t	typeref:struct:LX	file:
L_ESC	.\3rd\lua\lstrlib.c	222;"	d	file:
L_Umaxalign	.\3rd\lua\llimits.h	/^typedef LUAI_USER_ALIGNMENT_T L_Umaxalign;$/;"	t
Labeldesc	.\3rd\lua\lparser.h	/^typedef struct Labeldesc {$/;"	s
Labeldesc	.\3rd\lua\lparser.h	/^} Labeldesc;$/;"	t	typeref:struct:Labeldesc
Labellist	.\3rd\lua\lparser.h	/^typedef struct Labellist {$/;"	s
Labellist	.\3rd\lua\lparser.h	/^} Labellist;$/;"	t	typeref:struct:Labellist
LexState	.\3rd\lua\llex.h	/^typedef struct LexState {$/;"	s
LexState	.\3rd\lua\llex.h	/^} LexState;$/;"	t	typeref:struct:LexState
LoadBlock	.\3rd\lua\lundump.c	/^static void LoadBlock(LoadState* S, void* b, size_t size)$/;"	f	file:
LoadByte	.\3rd\lua\lundump.c	37;"	d	file:
LoadChar	.\3rd\lua\lundump.c	/^static int LoadChar(LoadState* S)$/;"	f	file:
LoadCode	.\3rd\lua\lundump.c	/^static void LoadCode(LoadState* S, SharedProto* f)$/;"	f	file:
LoadConstants	.\3rd\lua\lundump.c	/^static void LoadConstants(LoadState* S, Proto* f)$/;"	f	file:
LoadDebug	.\3rd\lua\lundump.c	/^static void LoadDebug(LoadState* S, SharedProto* f)$/;"	f	file:
LoadF	.\3rd\lua\lauxlib.c	/^typedef struct LoadF {$/;"	s	file:
LoadF	.\3rd\lua\lauxlib.c	/^} LoadF;$/;"	t	typeref:struct:LoadF	file:
LoadFunction	.\3rd\lua\lundump.c	/^static void LoadFunction(LoadState* S, Proto* f)$/;"	f	file:
LoadHeader	.\3rd\lua\lundump.c	/^static void LoadHeader(LoadState* S)$/;"	f	file:
LoadInt	.\3rd\lua\lundump.c	/^static int LoadInt(LoadState* S)$/;"	f	file:
LoadMem	.\3rd\lua\lundump.c	36;"	d	file:
LoadNumber	.\3rd\lua\lundump.c	/^static lua_Number LoadNumber(LoadState* S)$/;"	f	file:
LoadS	.\3rd\lua\lauxlib.c	/^typedef struct LoadS {$/;"	s	file:
LoadS	.\3rd\lua\lauxlib.c	/^} LoadS;$/;"	t	typeref:struct:LoadS	file:
LoadState	.\3rd\lua\lundump.c	/^} LoadState;$/;"	t	typeref:struct:__anon22	file:
LoadString	.\3rd\lua\lundump.c	/^static TString* LoadString(LoadState* S)$/;"	f	file:
LoadUpvalues	.\3rd\lua\lundump.c	/^static void LoadUpvalues(LoadState* S, SharedProto* f)$/;"	f	file:
LoadVar	.\3rd\lua\lundump.c	38;"	d	file:
LoadVector	.\3rd\lua\lundump.c	39;"	d	file:
LocVar	.\3rd\lua\lobject.h	/^typedef struct LocVar {$/;"	s
LocVar	.\3rd\lua\lobject.h	/^} LocVar;$/;"	t	typeref:struct:LocVar
M	.\skynet-src\skynet_module.c	/^static struct modules * M = NULL;$/;"	v	typeref:struct:modules	file:
M.parseheader	.\lualib\http\internal.lua	/^function M.parseheader(lines, from, header)$/;"	f
M.recvchunkedbody	.\lualib\http\internal.lua	/^function M.recvchunkedbody(readbytes, bodylimit, header, body)$/;"	f
M.recvheader	.\lualib\http\internal.lua	/^function M.recvheader(readbytes, lines, header)$/;"	f
MALLOC	.\skynet-src\socket_server.c	210;"	d	file:
MALLOC_STATICLIB	.\platform.mk	/^macosx : MALLOC_STATICLIB :=$/;"	m
MASK	.\3rd\lua-md5\md5.c	14;"	d	file:
MASK	.\3rd\lua\lctype.h	46;"	d
MASK0	.\3rd\lua\lopcodes.h	83;"	d
MASK1	.\3rd\lua\lopcodes.h	80;"	d
MAXARG_A	.\3rd\lua\lopcodes.h	74;"	d
MAXARG_Ax	.\3rd\lua\lopcodes.h	68;"	d
MAXARG_Ax	.\3rd\lua\lopcodes.h	70;"	d
MAXARG_B	.\3rd\lua\lopcodes.h	75;"	d
MAXARG_Bx	.\3rd\lua\lopcodes.h	60;"	d
MAXARG_Bx	.\3rd\lua\lopcodes.h	63;"	d
MAXARG_C	.\3rd\lua\lopcodes.h	76;"	d
MAXARG_sBx	.\3rd\lua\lopcodes.h	61;"	d
MAXARG_sBx	.\3rd\lua\lopcodes.h	64;"	d
MAXASIZE	.\3rd\lua\ltable.c	48;"	d	file:
MAXAUX	.\3rd\lpeg\lptypes.h	120;"	d
MAXBACK	.\3rd\lpeg\lptypes.h	54;"	d
MAXBEHIND	.\3rd\lpeg\lptypes.h	124;"	d
MAXBITS	.\3rd\lua\ltable.c	43;"	d	file:
MAXBITS	.\3rd\lua\ltable.c	45;"	d	file:
MAXCCALLS	.\3rd\lua\lstrlib.c	218;"	d	file:
MAXINDEXRK	.\3rd\lua\lopcodes.h	142;"	d
MAXKEY	.\3rd\lua-md5\md5lib.c	62;"	d	file:
MAXOFF	.\3rd\lpeg\lptypes.h	119;"	d
MAXPATTSIZE	.\3rd\lpeg\lptypes.h	128;"	d
MAXRULES	.\3rd\lpeg\lptypes.h	59;"	d
MAXSIZE	.\3rd\lua\lstrlib.c	106;"	d	file:
MAXSTACK	.\3rd\lua\llimits.h	138;"	d
MAXSTACKIDX	.\3rd\lpeg\lptypes.h	26;"	d
MAXSTRCAPS	.\3rd\lpeg\lpcap.c	322;"	d	file:
MAXTAGLOOP	.\3rd\lua\lvm.c	32;"	d	file:
MAXUPVAL	.\3rd\lua\llimits.h	126;"	d
MAXVARS	.\3rd\lua\lparser.c	32;"	d	file:
MAX_COOKIE	.\lualib-src\lua-seri.c	27;"	d	file:
MAX_DEPTH	.\lualib-src\lua-seri.c	31;"	d	file:
MAX_EVENT	.\skynet-src\socket_server.c	23;"	d	file:
MAX_FORMAT	.\3rd\lua\lstrlib.c	830;"	d	file:
MAX_GLOBAL_MQ	.\skynet-src\skynet_mq.c	14;"	d	file:
MAX_INFO	.\skynet-src\socket_server.c	19;"	d	file:
MAX_INT	.\3rd\lua\llimits.h	37;"	d
MAX_ITEM	.\3rd\lua\lstrlib.c	823;"	d	file:
MAX_LMEM	.\3rd\lua\llimits.h	34;"	d
MAX_LUMEM	.\3rd\lua\llimits.h	32;"	d
MAX_MODULE_TYPE	.\skynet-src\skynet_module.c	13;"	d	file:
MAX_NUMBER	.\lualib-src\lua-bson.c	32;"	d	file:
MAX_SIZET	.\3rd\lua\llimits.h	30;"	d
MAX_SIZE_T	.\3rd\lua\liolib.c	393;"	d	file:
MAX_SLOT_SIZE	.\skynet-src\skynet_handle.c	13;"	d	file:
MAX_SOCKET	.\skynet-src\socket_server.c	35;"	d	file:
MAX_SOCKET_P	.\skynet-src\socket_server.c	22;"	d	file:
MAX_UDP_PACKAGE	.\skynet-src\socket_server.c	48;"	d	file:
MEMERRMSG	.\3rd\lua\lstate.c	42;"	d	file:
MESSAGEPOOL	.\service-src\databuffer.h	9;"	d
MICROSEC	.\lualib-src\lua-profile.c	13;"	d	file:
MINSIZEARRAY	.\3rd\lua\lmem.c	43;"	d	file:
MINSTRTABSIZE	.\3rd\lua\llimits.h	144;"	d
MIN_READ_BUFFER	.\skynet-src\socket_server.c	24;"	d	file:
MQ_IN_GLOBAL	.\skynet-src\skynet_mq.c	19;"	d	file:
MQ_OVERLOAD	.\skynet-src\skynet_mq.c	20;"	d	file:
MSG.close	.\lualib\snax\gateserver.lua	/^	function MSG.close(fd)$/;"	f
MSG.error	.\lualib\snax\gateserver.lua	/^	function MSG.error(fd, msg)$/;"	f
MSG.open	.\lualib\snax\gateserver.lua	/^	function MSG.open(fd, msg)$/;"	f
MYINT	.\3rd\lua\lundump.c	236;"	d	file:
MYK	.\3rd\lua\luac.c	275;"	d	file:
MatchState	.\3rd\lua\lstrlib.c	/^typedef struct MatchState {$/;"	s	file:
MatchState	.\3rd\lua\lstrlib.c	/^} MatchState;$/;"	t	typeref:struct:MatchState	file:
Mbuffer	.\3rd\lua\lzio.h	/^typedef struct Mbuffer {$/;"	s
Mbuffer	.\3rd\lua\lzio.h	/^} Mbuffer;$/;"	t	typeref:struct:Mbuffer
N0	.\3rd\lua\lundump.c	186;"	d	file:
N1	.\3rd\lua\lundump.c	187;"	d	file:
N2	.\3rd\lua\lundump.c	188;"	d	file:
N3	.\3rd\lua\lundump.c	189;"	d	file:
NANOSEC	.\lualib-src\lua-profile.c	12;"	d	file:
NDEBUG	.\3rd\lpeg\lptypes.h	13;"	d
NILCONSTANT	.\3rd\lua\lobject.h	110;"	d
NILCONSTANT	.\3rd\lua\lobject.h	297;"	d
NILCONSTANT	.\3rd\lua\lobject.h	304;"	d
NILCONSTANT	.\3rd\lua\lobject.h	315;"	d
NNMARK	.\3rd\lua\lobject.h	293;"	d
NNMASK	.\3rd\lua\lobject.h	294;"	d
NOINST	.\3rd\lpeg\lpcode.c	17;"	d	file:
NONVALIDVALUE	.\3rd\lua\lapi.c	38;"	d	file:
NO_JUMP	.\3rd\lua\lcode.h	20;"	d
NO_REG	.\3rd\lua\lopcodes.h	151;"	d
NT 	.\3rd\lpeg\re.lua	/^local function NT (n, b)$/;"	f
NUM_OPCODES	.\3rd\lua\lopcodes.h	228;"	d
NUM_RESERVED	.\3rd\lua\llex.h	34;"	d
Node	.\3rd\lua\lobject.h	/^typedef struct Node {$/;"	s
Node	.\3rd\lua\lobject.h	/^} Node;$/;"	t	typeref:struct:Node
OLDBIT	.\3rd\lua\lgc.h	93;"	d
OPR_ADD	.\3rd\lua\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_AND	.\3rd\lua\lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_CONCAT	.\3rd\lua\lcode.h	/^  OPR_CONCAT,$/;"	e	enum:BinOpr
OPR_DIV	.\3rd\lua\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_EQ	.\3rd\lua\lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_GE	.\3rd\lua\lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_GT	.\3rd\lua\lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_LE	.\3rd\lua\lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_LEN	.\3rd\lua\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_LT	.\3rd\lua\lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_MINUS	.\3rd\lua\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_MOD	.\3rd\lua\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_MUL	.\3rd\lua\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_NE	.\3rd\lua\lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_NOBINOPR	.\3rd\lua\lcode.h	/^  OPR_NOBINOPR$/;"	e	enum:BinOpr
OPR_NOT	.\3rd\lua\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_NOUNOPR	.\3rd\lua\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_OR	.\3rd\lua\lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_POW	.\3rd\lua\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_SUB	.\3rd\lua\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_DIV, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OP_ADD	.\3rd\lua\lopcodes.h	/^OP_ADD,\/*	A B C	R(A) := RK(B) + RK(C)				*\/$/;"	e	enum:__anon11
OP_CALL	.\3rd\lua\lopcodes.h	/^OP_CALL,\/*	A B C	R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) *\/$/;"	e	enum:__anon11
OP_CLOSURE	.\3rd\lua\lopcodes.h	/^OP_CLOSURE,\/*	A Bx	R(A) := closure(KPROTO[Bx])			*\/$/;"	e	enum:__anon11
OP_CONCAT	.\3rd\lua\lopcodes.h	/^OP_CONCAT,\/*	A B C	R(A) := R(B).. ... ..R(C)			*\/$/;"	e	enum:__anon11
OP_DELETE	.\lualib-src\lua-mongo.c	18;"	d	file:
OP_DIV	.\3rd\lua\lopcodes.h	/^OP_DIV,\/*	A B C	R(A) := RK(B) \/ RK(C)				*\/$/;"	e	enum:__anon11
OP_EQ	.\3rd\lua\lopcodes.h	/^OP_EQ,\/*	A B C	if ((RK(B) == RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon11
OP_EXTRAARG	.\3rd\lua\lopcodes.h	/^OP_EXTRAARG\/*	Ax	extra (larger) argument for previous opcode	*\/$/;"	e	enum:__anon11
OP_FORLOOP	.\3rd\lua\lopcodes.h	/^OP_FORLOOP,\/*	A sBx	R(A)+=R(A+2);$/;"	e	enum:__anon11
OP_FORPREP	.\3rd\lua\lopcodes.h	/^OP_FORPREP,\/*	A sBx	R(A)-=R(A+2); pc+=sBx				*\/$/;"	e	enum:__anon11
OP_GETTABLE	.\3rd\lua\lopcodes.h	/^OP_GETTABLE,\/*	A B C	R(A) := R(B)[RK(C)]				*\/$/;"	e	enum:__anon11
OP_GETTABUP	.\3rd\lua\lopcodes.h	/^OP_GETTABUP,\/*	A B C	R(A) := UpValue[B][RK(C)]			*\/$/;"	e	enum:__anon11
OP_GETUPVAL	.\3rd\lua\lopcodes.h	/^OP_GETUPVAL,\/*	A B	R(A) := UpValue[B]				*\/$/;"	e	enum:__anon11
OP_GET_MORE	.\lualib-src\lua-mongo.c	17;"	d	file:
OP_INSERT	.\lualib-src\lua-mongo.c	15;"	d	file:
OP_JMP	.\3rd\lua\lopcodes.h	/^OP_JMP,\/*	A sBx	pc+=sBx; if (A) close all upvalues >= R(A) + 1	*\/$/;"	e	enum:__anon11
OP_KILL_CURSORS	.\lualib-src\lua-mongo.c	19;"	d	file:
OP_LE	.\3rd\lua\lopcodes.h	/^OP_LE,\/*	A B C	if ((RK(B) <= RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon11
OP_LEN	.\3rd\lua\lopcodes.h	/^OP_LEN,\/*	A B	R(A) := length of R(B)				*\/$/;"	e	enum:__anon11
OP_LOADBOOL	.\3rd\lua\lopcodes.h	/^OP_LOADBOOL,\/*	A B C	R(A) := (Bool)B; if (C) pc++			*\/$/;"	e	enum:__anon11
OP_LOADK	.\3rd\lua\lopcodes.h	/^OP_LOADK,\/*	A Bx	R(A) := Kst(Bx)					*\/$/;"	e	enum:__anon11
OP_LOADKX	.\3rd\lua\lopcodes.h	/^OP_LOADKX,\/*	A 	R(A) := Kst(extra arg)				*\/$/;"	e	enum:__anon11
OP_LOADNIL	.\3rd\lua\lopcodes.h	/^OP_LOADNIL,\/*	A B	R(A), R(A+1), ..., R(A+B) := nil		*\/$/;"	e	enum:__anon11
OP_LT	.\3rd\lua\lopcodes.h	/^OP_LT,\/*	A B C	if ((RK(B) <  RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon11
OP_MOD	.\3rd\lua\lopcodes.h	/^OP_MOD,\/*	A B C	R(A) := RK(B) % RK(C)				*\/$/;"	e	enum:__anon11
OP_MOVE	.\3rd\lua\lopcodes.h	/^OP_MOVE,\/*	A B	R(A) := R(B)					*\/$/;"	e	enum:__anon11
OP_MSG	.\lualib-src\lua-mongo.c	13;"	d	file:
OP_MUL	.\3rd\lua\lopcodes.h	/^OP_MUL,\/*	A B C	R(A) := RK(B) * RK(C)				*\/$/;"	e	enum:__anon11
OP_NEWTABLE	.\3rd\lua\lopcodes.h	/^OP_NEWTABLE,\/*	A B C	R(A) := {} (size = B,C)				*\/$/;"	e	enum:__anon11
OP_NOT	.\3rd\lua\lopcodes.h	/^OP_NOT,\/*	A B	R(A) := not R(B)				*\/$/;"	e	enum:__anon11
OP_POW	.\3rd\lua\lopcodes.h	/^OP_POW,\/*	A B C	R(A) := RK(B) ^ RK(C)				*\/$/;"	e	enum:__anon11
OP_QUERY	.\lualib-src\lua-mongo.c	16;"	d	file:
OP_REPLY	.\lualib-src\lua-mongo.c	12;"	d	file:
OP_RETURN	.\3rd\lua\lopcodes.h	/^OP_RETURN,\/*	A B	return R(A), ... ,R(A+B-2)	(see note)	*\/$/;"	e	enum:__anon11
OP_SELF	.\3rd\lua\lopcodes.h	/^OP_SELF,\/*	A B C	R(A+1) := R(B); R(A) := R(B)[RK(C)]		*\/$/;"	e	enum:__anon11
OP_SETLIST	.\3rd\lua\lopcodes.h	/^OP_SETLIST,\/*	A B C	R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B	*\/$/;"	e	enum:__anon11
OP_SETTABLE	.\3rd\lua\lopcodes.h	/^OP_SETTABLE,\/*	A B C	R(A)[RK(B)] := RK(C)				*\/$/;"	e	enum:__anon11
OP_SETTABUP	.\3rd\lua\lopcodes.h	/^OP_SETTABUP,\/*	A B C	UpValue[A][RK(B)] := RK(C)			*\/$/;"	e	enum:__anon11
OP_SETUPVAL	.\3rd\lua\lopcodes.h	/^OP_SETUPVAL,\/*	A B	UpValue[B] := R(A)				*\/$/;"	e	enum:__anon11
OP_SUB	.\3rd\lua\lopcodes.h	/^OP_SUB,\/*	A B C	R(A) := RK(B) - RK(C)				*\/$/;"	e	enum:__anon11
OP_TAILCALL	.\3rd\lua\lopcodes.h	/^OP_TAILCALL,\/*	A B C	return R(A)(R(A+1), ... ,R(A+B-1))		*\/$/;"	e	enum:__anon11
OP_TEST	.\3rd\lua\lopcodes.h	/^OP_TEST,\/*	A C	if not (R(A) <=> C) then pc++			*\/$/;"	e	enum:__anon11
OP_TESTSET	.\3rd\lua\lopcodes.h	/^OP_TESTSET,\/*	A B C	if (R(B) <=> C) then R(A) := R(B) else pc++	*\/$/;"	e	enum:__anon11
OP_TFORCALL	.\3rd\lua\lopcodes.h	/^OP_TFORCALL,\/*	A C	R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2));	*\/$/;"	e	enum:__anon11
OP_TFORLOOP	.\3rd\lua\lopcodes.h	/^OP_TFORLOOP,\/*	A sBx	if R(A+1) ~= nil then { R(A)=R(A+1); pc += sBx }*\/$/;"	e	enum:__anon11
OP_UNM	.\3rd\lua\lopcodes.h	/^OP_UNM,\/*	A B	R(A) := -R(B)					*\/$/;"	e	enum:__anon11
OP_UPDATE	.\lualib-src\lua-mongo.c	14;"	d	file:
OP_VARARG	.\3rd\lua\lopcodes.h	/^OP_VARARG,\/*	A B	R(A), R(A+1), ..., R(A+B-2) = vararg		*\/$/;"	e	enum:__anon11
OUTPUT	.\3rd\lua\luac.c	26;"	d	file:
OpArgK	.\3rd\lua\lopcodes.h	/^  OpArgK   \/* argument is a constant or register\/constant *\/$/;"	e	enum:OpArgMask
OpArgMask	.\3rd\lua\lopcodes.h	/^enum OpArgMask {$/;"	g
OpArgN	.\3rd\lua\lopcodes.h	/^  OpArgN,  \/* argument is not used *\/$/;"	e	enum:OpArgMask
OpArgR	.\3rd\lua\lopcodes.h	/^  OpArgR,  \/* argument is a register or a jump offset *\/$/;"	e	enum:OpArgMask
OpArgU	.\3rd\lua\lopcodes.h	/^  OpArgU,  \/* argument is used *\/$/;"	e	enum:OpArgMask
OpCode	.\3rd\lua\lopcodes.h	/^} OpCode;$/;"	t	typeref:enum:__anon11
OpMode	.\3rd\lua\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	g
Opcode	.\3rd\lpeg\lpvm.h	/^typedef enum Opcode {$/;"	g
Opcode	.\3rd\lpeg\lpvm.h	/^} Opcode;$/;"	t	typeref:enum:Opcode
Output	.\3rd\lua\luac.c	/^static char Output[]={ OUTPUT };	\/* default output file name *\/$/;"	v	file:
P	.\lualib-src\lua-crypt.c	627;"	d	file:
PATTERN_T	.\3rd\lpeg\lptypes.h	25;"	d
PAUSEADJ	.\3rd\lua\lgc.c	51;"	d	file:
PEnofail	.\3rd\lpeg\lpcode.h	25;"	d
PEnullable	.\3rd\lpeg\lpcode.h	24;"	d
PI	.\3rd\lua\lmathlib.c	20;"	d	file:
PI	.\3rd\lua\lmathlib.c	21;"	d	file:
PLAT	.\platform.mk	/^PLAT ?= none$/;"	m
PLAT	.\platform.mk	/^freebsd : PLAT = freebsd$/;"	m
PLAT	.\platform.mk	/^linux : PLAT = linux$/;"	m
PLAT	.\platform.mk	/^macosx : PLAT = macosx$/;"	m
PLATS	.\platform.mk	/^PLATS = linux freebsd macosx$/;"	m
POS	.\3rd\lua\lobject.c	248;"	d	file:
POS_A	.\3rd\lua\lopcodes.h	47;"	d
POS_Ax	.\3rd\lua\lopcodes.h	51;"	d
POS_B	.\3rd\lua\lopcodes.h	49;"	d
POS_Bx	.\3rd\lua\lopcodes.h	50;"	d
POS_C	.\3rd\lua\lopcodes.h	48;"	d
POS_OP	.\3rd\lua\lopcodes.h	46;"	d
PRE	.\3rd\lua\lobject.c	247;"	d	file:
PREFIX_SIZE	.\skynet-src\malloc_hook.c	18;"	d	file:
PRINTBIT	.\3rd\lua\lctype.h	41;"	d
PRIORITY_HIGH	.\skynet-src\socket_server.c	37;"	d	file:
PRIORITY_LOW	.\skynet-src\socket_server.c	38;"	d	file:
PROGNAME	.\3rd\lua\luac.c	25;"	d	file:
PROTOCOL_TCP	.\skynet-src\socket_server.c	42;"	d	file:
PROTOCOL_UDP	.\skynet-src\socket_server.c	43;"	d	file:
PROTOCOL_UDPv6	.\skynet-src\socket_server.c	44;"	d	file:
PTYPE_CLIENT	.\skynet-src\skynet.h	16;"	d
PTYPE_ERROR	.\skynet-src\skynet.h	21;"	d
PTYPE_HARBOR	.\skynet-src\skynet.h	18;"	d
PTYPE_MULTICAST	.\skynet-src\skynet.h	15;"	d
PTYPE_RESERVED_DEBUG	.\skynet-src\skynet.h	24;"	d
PTYPE_RESERVED_LUA	.\skynet-src\skynet.h	25;"	d
PTYPE_RESERVED_QUEUE	.\skynet-src\skynet.h	23;"	d
PTYPE_RESERVED_SNAX	.\skynet-src\skynet.h	26;"	d
PTYPE_RESPONSE	.\skynet-src\skynet.h	14;"	d
PTYPE_SOCKET	.\skynet-src\skynet.h	19;"	d
PTYPE_SYSTEM	.\skynet-src\skynet.h	17;"	d
PTYPE_TAG_ALLOCSESSION	.\skynet-src\skynet.h	29;"	d
PTYPE_TAG_DONTCOPY	.\skynet-src\skynet.h	28;"	d
PTYPE_TEXT	.\skynet-src\skynet.h	13;"	d
PUT_UINT32	.\lualib-src\lua-crypt.c	191;"	d	file:
Pattern	.\3rd\lpeg\lptree.h	/^typedef struct Pattern {$/;"	s
Pattern	.\3rd\lpeg\lptree.h	/^} Pattern;$/;"	t	typeref:struct:Pattern
Pfunc	.\3rd\lua\ldo.h	/^typedef void (*Pfunc) (lua_State *L, void *ud);$/;"	t
PrintCode	.\3rd\lua\luac.c	/^static void PrintCode(const Proto* f)$/;"	f	file:
PrintConstant	.\3rd\lua\luac.c	/^static void PrintConstant(const Proto* f, int i)$/;"	f	file:
PrintDebug	.\3rd\lua\luac.c	/^static void PrintDebug(const Proto* f)$/;"	f	file:
PrintFunction	.\3rd\lua\luac.c	/^static void PrintFunction(const Proto* f, int full)$/;"	f	file:
PrintHeader	.\3rd\lua\luac.c	/^static void PrintHeader(const SharedProto* f)$/;"	f	file:
PrintString	.\3rd\lua\luac.c	/^static void PrintString(const TString* ts)$/;"	f	file:
Protect	.\3rd\lua\lvm.c	511;"	d	file:
Proto	.\3rd\lua\lobject.h	/^typedef struct Proto {$/;"	s
Proto	.\3rd\lua\lobject.h	/^} Proto;$/;"	t	typeref:struct:Proto
Q	.\skynet-src\skynet_mq.c	/^static struct global_queue *Q = NULL;	\/\/全局队列引用$/;"	v	typeref:struct:global_queue	file:
QUEUESIZE	.\lualib-src\lua-netpack.c	14;"	d	file:
QUEUE_SIZE	.\lualib-src\lua-clientsocket.c	130;"	d	file:
R0	.\lualib-src\lsha1.c	114;"	d	file:
R1	.\lualib-src\lsha1.c	115;"	d	file:
R2	.\lualib-src\lsha1.c	116;"	d	file:
R3	.\lualib-src\lsha1.c	117;"	d	file:
R4	.\lualib-src\lsha1.c	118;"	d	file:
RA	.\3rd\lua\lvm.c	489;"	d	file:
RADIANS_PER_DEGREE	.\3rd\lua\lmathlib.c	22;"	d	file:
RB	.\3rd\lua\lvm.c	491;"	d	file:
RC	.\3rd\lua\lvm.c	492;"	d	file:
REMOTE	.\skynet-src\skynet_harbor.c	/^static struct skynet_context * REMOTE = 0;$/;"	v	typeref:struct:skynet_context	file:
REMOTE_MAX	.\skynet-src\skynet_harbor.h	9;"	d
REPLY_AWAITCAPABLE	.\lualib-src\lua-mongo.c	23;"	d	file:
REPLY_CURSORNOTFOUND	.\lualib-src\lua-mongo.c	21;"	d	file:
REPLY_QUERYFAILURE	.\lualib-src\lua-mongo.c	22;"	d	file:
REQUEST:get	.\examples\agent.lua	/^function REQUEST:get()$/;"	f
REQUEST:handshake	.\examples\agent.lua	/^function REQUEST:handshake()$/;"	f
REQUEST:set	.\examples\agent.lua	/^function REQUEST:set()$/;"	f
RESERVED	.\3rd\lua\llex.h	/^enum RESERVED {$/;"	g
RESERVEDSLOT	.\3rd\lua\lbaselib.c	283;"	d	file:
RETS	.\3rd\lua\lobject.c	246;"	d	file:
RHs	.\lualib-src\lua-crypt.c	/^static uint32_t RHs[16] = {$/;"	v	file:
RKASK	.\3rd\lua\lopcodes.h	145;"	d
RKB	.\3rd\lua\lvm.c	493;"	d	file:
RKC	.\3rd\lua\lvm.c	495;"	d	file:
S	.\3rd\lua\luac.c	377;"	d	file:
SB1	.\lualib-src\lua-crypt.c	/^uint32_t SB1[64] = {$/;"	v
SB2	.\lualib-src\lua-crypt.c	/^static uint32_t SB2[64] = {$/;"	v	file:
SB3	.\lualib-src\lua-crypt.c	/^static uint32_t SB3[64] = {$/;"	v	file:
SB4	.\lualib-src\lua-crypt.c	/^static uint32_t SB4[64] = {$/;"	v	file:
SB5	.\lualib-src\lua-crypt.c	/^static uint32_t SB5[64] = {$/;"	v	file:
SB6	.\lualib-src\lua-crypt.c	/^static uint32_t SB6[64] = {$/;"	v	file:
SB7	.\lualib-src\lua-crypt.c	/^static uint32_t SB7[64] = {$/;"	v	file:
SB8	.\lualib-src\lua-crypt.c	/^static uint32_t SB8[64] = {$/;"	v	file:
SEPARATED	.\3rd\lua\lgc.h	91;"	d
SETARG_A	.\3rd\lua\lopcodes.h	98;"	d
SETARG_Ax	.\3rd\lua\lopcodes.h	110;"	d
SETARG_B	.\3rd\lua\lopcodes.h	101;"	d
SETARG_Bx	.\3rd\lua\lopcodes.h	107;"	d
SETARG_C	.\3rd\lua\lopcodes.h	104;"	d
SETARG_sBx	.\3rd\lua\lopcodes.h	113;"	d
SET_OPCODE	.\3rd\lua\lopcodes.h	90;"	d
SHA1_CTX	.\lualib-src\lsha1.c	/^} SHA1_CTX;$/;"	t	typeref:struct:__anon23	file:
SHA1_DIGEST_SIZE	.\lualib-src\lsha1.c	95;"	d	file:
SHA1_Transform	.\lualib-src\lsha1.c	/^static void	SHA1_Transform(uint32_t	state[5], const	uint8_t	buffer[64])$/;"	f	file:
SHARED	.\platform.mk	/^SHARED := -fPIC --shared$/;"	m
SHARED	.\platform.mk	/^macosx : SHARED := -fPIC -dynamiclib -Wl,-undefined,dynamic_lookup$/;"	m
SIZEOF_FIELD	.\lualib-src\sproto\sproto.c	13;"	d	file:
SIZEOF_HEADER	.\lualib-src\sproto\sproto.c	12;"	d	file:
SIZEOF_LENGTH	.\lualib-src\sproto\sproto.c	11;"	d	file:
SIZEOF_TCPBUFFER	.\skynet-src\socket_server.c	60;"	d	file:
SIZEOF_UDPBUFFER	.\skynet-src\socket_server.c	61;"	d	file:
SIZE_A	.\3rd\lua\lopcodes.h	41;"	d
SIZE_Ax	.\3rd\lua\lopcodes.h	42;"	d
SIZE_B	.\3rd\lua\lopcodes.h	39;"	d
SIZE_Bx	.\3rd\lua\lopcodes.h	40;"	d
SIZE_C	.\3rd\lua\lopcodes.h	38;"	d
SIZE_OP	.\3rd\lua\lopcodes.h	44;"	d
SKYNET_CONTEXT_HANDLE_H	.\skynet-src\skynet_handle.h	3;"	d
SKYNET_DEFINES	.\platform.mk	/^macosx : SKYNET_DEFINES :=-DNOUSE_JEMALLOC$/;"	m
SKYNET_ENV_H	.\skynet-src\skynet_env.h	2;"	d
SKYNET_H	.\skynet-src\skynet.h	3;"	d
SKYNET_HARBOR_H	.\skynet-src\skynet_harbor.h	3;"	d
SKYNET_IMP_H	.\skynet-src\skynet_imp.h	3;"	d
SKYNET_LIBS	.\platform.mk	/^SKYNET_LIBS := -lpthread -lm$/;"	m
SKYNET_MESSAGE_QUEUE_H	.\skynet-src\skynet_mq.h	3;"	d
SKYNET_MODULE_H	.\skynet-src\skynet_module.h	3;"	d
SKYNET_MONITOR_H	.\skynet-src\skynet_monitor.h	3;"	d
SKYNET_SERVER_H	.\skynet-src\skynet_server.h	3;"	d
SKYNET_SOCKET_TYPE_ACCEPT	.\skynet-src\skynet_socket.h	10;"	d
SKYNET_SOCKET_TYPE_CLOSE	.\skynet-src\skynet_socket.h	9;"	d
SKYNET_SOCKET_TYPE_CONNECT	.\skynet-src\skynet_socket.h	8;"	d
SKYNET_SOCKET_TYPE_DATA	.\skynet-src\skynet_socket.h	7;"	d
SKYNET_SOCKET_TYPE_ERROR	.\skynet-src\skynet_socket.h	11;"	d
SKYNET_SOCKET_TYPE_UDP	.\skynet-src\skynet_socket.h	12;"	d
SKYNET_TIMER_H	.\skynet-src\skynet_timer.h	3;"	d
SLOT_SIZE	.\skynet-src\malloc_hook.c	17;"	d	file:
SMALLSTRING	.\lualib-src\lua-netpack.c	16;"	d	file:
SMALL_CHUNK	.\lualib-src\lua-crypt.c	9;"	d	file:
SOCKET.close	.\examples\watchdog.lua	/^function SOCKET.close(fd)$/;"	f
SOCKET.data	.\examples\watchdog.lua	/^function SOCKET.data(fd, msg)$/;"	f
SOCKET.error	.\examples\watchdog.lua	/^function SOCKET.error(fd, msg)$/;"	f
SOCKET.open	.\examples\watchdog.lua	/^function SOCKET.open(fd, addr)$/;"	f
SOCKET_ACCEPT	.\skynet-src\socket_server.h	10;"	d
SOCKET_CLOSE	.\skynet-src\socket_server.h	8;"	d
SOCKET_DATA	.\skynet-src\socket_server.h	7;"	d
SOCKET_ERROR	.\skynet-src\socket_server.h	11;"	d
SOCKET_EXIT	.\skynet-src\socket_server.h	12;"	d
SOCKET_OPEN	.\skynet-src\socket_server.h	9;"	d
SOCKET_SERVER	.\skynet-src\skynet_socket.c	/^static struct socket_server * SOCKET_SERVER = NULL;$/;"	v	typeref:struct:socket_server	file:
SOCKET_TYPE_BIND	.\skynet-src\socket_server.c	33;"	d	file:
SOCKET_TYPE_CONNECTED	.\skynet-src\socket_server.c	30;"	d	file:
SOCKET_TYPE_CONNECTING	.\skynet-src\socket_server.c	29;"	d	file:
SOCKET_TYPE_HALFCLOSE	.\skynet-src\socket_server.c	31;"	d	file:
SOCKET_TYPE_INVALID	.\skynet-src\socket_server.c	25;"	d	file:
SOCKET_TYPE_LISTEN	.\skynet-src\socket_server.c	28;"	d	file:
SOCKET_TYPE_PACCEPT	.\skynet-src\socket_server.c	32;"	d	file:
SOCKET_TYPE_PLISTEN	.\skynet-src\socket_server.c	27;"	d	file:
SOCKET_TYPE_RESERVE	.\skynet-src\socket_server.c	26;"	d	file:
SOCKET_UDP	.\skynet-src\socket_server.h	13;"	d
SPACEBIT	.\3rd\lua\lctype.h	42;"	d
SPACECHARS	.\3rd\lua\lbaselib.c	46;"	d	file:
SPECIALS	.\3rd\lua\lstrlib.c	223;"	d	file:
SPROTO_REQUEST	.\lualib-src\sproto\sproto.h	9;"	d
SPROTO_RESPONSE	.\lualib-src\sproto\sproto.h	10;"	d
SPROTO_TARRAY	.\lualib-src\sproto\sproto.c	9;"	d	file:
SPROTO_TBOOLEAN	.\lualib-src\sproto\sproto.h	13;"	d
SPROTO_TINTEGER	.\lualib-src\sproto\sproto.h	12;"	d
SPROTO_TSTRING	.\lualib-src\sproto\sproto.h	14;"	d
SPROTO_TSTRUCT	.\lualib-src\sproto\sproto.h	15;"	d
SParser	.\3rd\lua\ldo.c	/^struct SParser {  \/* data to `f_parser' *\/$/;"	s	file:
SS	.\3rd\lua\luac.c	376;"	d	file:
STATUS_CONTENT	.\service-src\service_harbor.c	68;"	d	file:
STATUS_DOWN	.\service-src\service_harbor.c	69;"	d	file:
STATUS_HANDSHAKE	.\service-src\service_harbor.c	66;"	d	file:
STATUS_HEADER	.\service-src\service_harbor.c	67;"	d	file:
STATUS_WAIT	.\service-src\service_harbor.c	65;"	d	file:
STEPMULADJ	.\3rd\lua\lgc.c	44;"	d	file:
SUBJIDX	.\3rd\lpeg\lptypes.h	68;"	d
SUPUNSIGNED	.\3rd\lua\llimits.h	261;"	d
SemInfo	.\3rd\lua\llex.h	/^} SemInfo;  \/* semantics information *\/$/;"	t	typeref:union:__anon5
SharedProto	.\3rd\lua\lobject.h	/^typedef struct SharedProto {$/;"	s
SharedProto	.\3rd\lua\lobject.h	/^} SharedProto;$/;"	t	typeref:struct:SharedProto
Stack	.\3rd\lpeg\lpvm.c	/^typedef struct Stack {$/;"	s	file:
Stack	.\3rd\lpeg\lpvm.c	/^} Stack;$/;"	t	typeref:struct:Stack	file:
StkId	.\3rd\lua\lobject.h	/^typedef TValue *StkId;  \/* index to stack elements *\/$/;"	t
StrAux	.\3rd\lpeg\lpcap.c	/^typedef struct StrAux {$/;"	s	file:
StrAux	.\3rd\lpeg\lpcap.c	/^} StrAux;$/;"	t	typeref:struct:StrAux	file:
T	.\3rd\lua-md5\md5.c	/^static const WORD32 T[64]={$/;"	v	file:
TAnd	.\3rd\lpeg\lptree.h	/^  TNot, TAnd,$/;"	e	enum:TTag
TAny	.\3rd\lpeg\lptree.h	/^  TChar = 0, TSet, TAny,  \/* standard PEG elements *\/$/;"	e	enum:TTag
TBehind	.\3rd\lpeg\lptree.h	/^  TBehind,  \/* match behind *\/$/;"	e	enum:TTag
TCall	.\3rd\lpeg\lptree.h	/^  TCall,$/;"	e	enum:TTag
TCapture	.\3rd\lpeg\lptree.h	/^  TCapture,  \/* regular capture *\/$/;"	e	enum:TTag
TChar	.\3rd\lpeg\lptree.h	/^  TChar = 0, TSet, TAny,  \/* standard PEG elements *\/$/;"	e	enum:TTag
TChoice	.\3rd\lpeg\lptree.h	/^  TSeq, TChoice,$/;"	e	enum:TTag
TEMP_LENGTH	.\lualib-src\lua-cluster.c	18;"	d	file:
TFalse	.\3rd\lpeg\lptree.h	/^  TTrue, TFalse,$/;"	e	enum:TTag
TGrammar	.\3rd\lpeg\lptree.h	/^  TGrammar,  \/* sib1 is initial (and first) rule *\/$/;"	e	enum:TTag
THREAD_MAIN	.\skynet-src\skynet_imp.h	16;"	d
THREAD_MONITOR	.\skynet-src\skynet_imp.h	19;"	d
THREAD_SOCKET	.\skynet-src\skynet_imp.h	17;"	d
THREAD_TIMER	.\skynet-src\skynet_imp.h	18;"	d
THREAD_WORKER	.\skynet-src\skynet_imp.h	15;"	d
TI	.\skynet-src\skynet_timer.c	/^static struct timer * TI = NULL;$/;"	v	typeref:struct:timer	file:
TIME_LEVEL	.\skynet-src\skynet_timer.c	27;"	d	file:
TIME_LEVEL_MASK	.\skynet-src\skynet_timer.c	29;"	d	file:
TIME_LEVEL_SHIFT	.\skynet-src\skynet_timer.c	26;"	d	file:
TIME_NEAR	.\skynet-src\skynet_timer.c	25;"	d	file:
TIME_NEAR_MASK	.\skynet-src\skynet_timer.c	28;"	d	file:
TIME_NEAR_SHIFT	.\skynet-src\skynet_timer.c	24;"	d	file:
TK_AND	.\3rd\lua\llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_BREAK	.\3rd\lua\llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_CONCAT	.\3rd\lua\llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_DBCOLON	.\3rd\lua\llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_DO	.\3rd\lua\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_DOTS	.\3rd\lua\llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_ELSE	.\3rd\lua\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_ELSEIF	.\3rd\lua\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_END	.\3rd\lua\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_EOS	.\3rd\lua\llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_EQ	.\3rd\lua\llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_FALSE	.\3rd\lua\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FOR	.\3rd\lua\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FUNCTION	.\3rd\lua\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_GE	.\3rd\lua\llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_GOTO	.\3rd\lua\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IF	.\3rd\lua\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IN	.\3rd\lua\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_LE	.\3rd\lua\llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_LOCAL	.\3rd\lua\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NAME	.\3rd\lua\llex.h	/^  TK_NUMBER, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_NE	.\3rd\lua\llex.h	/^  TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE, TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_NIL	.\3rd\lua\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NOT	.\3rd\lua\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NUMBER	.\3rd\lua\llex.h	/^  TK_NUMBER, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_OR	.\3rd\lua\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_REPEAT	.\3rd\lua\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_RETURN	.\3rd\lua\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_STRING	.\3rd\lua\llex.h	/^  TK_NUMBER, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_THEN	.\3rd\lua\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_TRUE	.\3rd\lua\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_UNTIL	.\3rd\lua\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_WHILE	.\3rd\lua\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TKey	.\3rd\lua\lobject.h	/^typedef union TKey {$/;"	u
TKey	.\3rd\lua\lobject.h	/^} TKey;$/;"	t	typeref:union:TKey
TMS	.\3rd\lua\ltm.h	/^} TMS;$/;"	t	typeref:enum:__anon21
TM_ADD	.\3rd\lua\ltm.h	/^  TM_ADD,$/;"	e	enum:__anon21
TM_CALL	.\3rd\lua\ltm.h	/^  TM_CALL,$/;"	e	enum:__anon21
TM_CONCAT	.\3rd\lua\ltm.h	/^  TM_CONCAT,$/;"	e	enum:__anon21
TM_DIV	.\3rd\lua\ltm.h	/^  TM_DIV,$/;"	e	enum:__anon21
TM_EQ	.\3rd\lua\ltm.h	/^  TM_EQ,  \/* last tag method with `fast' access *\/$/;"	e	enum:__anon21
TM_GC	.\3rd\lua\ltm.h	/^  TM_GC,$/;"	e	enum:__anon21
TM_INDEX	.\3rd\lua\ltm.h	/^  TM_INDEX,$/;"	e	enum:__anon21
TM_LE	.\3rd\lua\ltm.h	/^  TM_LE,$/;"	e	enum:__anon21
TM_LEN	.\3rd\lua\ltm.h	/^  TM_LEN,$/;"	e	enum:__anon21
TM_LT	.\3rd\lua\ltm.h	/^  TM_LT,$/;"	e	enum:__anon21
TM_MOD	.\3rd\lua\ltm.h	/^  TM_MOD,$/;"	e	enum:__anon21
TM_MODE	.\3rd\lua\ltm.h	/^  TM_MODE,$/;"	e	enum:__anon21
TM_MUL	.\3rd\lua\ltm.h	/^  TM_MUL,$/;"	e	enum:__anon21
TM_N	.\3rd\lua\ltm.h	/^  TM_N		\/* number of elements in the enum *\/$/;"	e	enum:__anon21
TM_NEWINDEX	.\3rd\lua\ltm.h	/^  TM_NEWINDEX,$/;"	e	enum:__anon21
TM_POW	.\3rd\lua\ltm.h	/^  TM_POW,$/;"	e	enum:__anon21
TM_SUB	.\3rd\lua\ltm.h	/^  TM_SUB,$/;"	e	enum:__anon21
TM_UNM	.\3rd\lua\ltm.h	/^  TM_UNM,$/;"	e	enum:__anon21
TNot	.\3rd\lpeg\lptree.h	/^  TNot, TAnd,$/;"	e	enum:TTag
TOpenCall	.\3rd\lpeg\lptree.h	/^  TOpenCall,$/;"	e	enum:TTag
TRep	.\3rd\lpeg\lptree.h	/^  TRep,$/;"	e	enum:TTag
TRule	.\3rd\lpeg\lptree.h	/^  TRule,  \/* sib1 is rule's pattern, sib2 is 'next' rule *\/$/;"	e	enum:TTag
TRunTime	.\3rd\lpeg\lptree.h	/^  TRunTime  \/* run-time capture *\/$/;"	e	enum:TTag
TSeq	.\3rd\lpeg\lptree.h	/^  TSeq, TChoice,$/;"	e	enum:TTag
TSet	.\3rd\lpeg\lptree.h	/^  TChar = 0, TSet, TAny,  \/* standard PEG elements *\/$/;"	e	enum:TTag
TString	.\3rd\lua\lobject.h	/^typedef union TString {$/;"	u
TString	.\3rd\lua\lobject.h	/^} TString;$/;"	t	typeref:union:TString
TTag	.\3rd\lpeg\lptree.h	/^typedef enum TTag {$/;"	g
TTag	.\3rd\lpeg\lptree.h	/^} TTag;$/;"	t	typeref:enum:TTag
TTree	.\3rd\lpeg\lptree.h	/^typedef struct TTree {$/;"	s
TTree	.\3rd\lpeg\lptree.h	/^} TTree;$/;"	t	typeref:struct:TTree
TTrue	.\3rd\lpeg\lptree.h	/^  TTrue, TFalse,$/;"	e	enum:TTag
TValue	.\3rd\lua\lobject.h	/^typedef struct lua_TValue TValue;$/;"	t	typeref:struct:lua_TValue
TValuefields	.\3rd\lua\lobject.h	/^    TValuefields;$/;"	m	struct:TKey::__anon10
TValuefields	.\3rd\lua\lobject.h	/^  TValuefields;$/;"	m	struct:lua_TValue
TValuefields	.\3rd\lua\lobject.h	104;"	d
TValuefields	.\3rd\lua\lobject.h	296;"	d
TValuefields	.\3rd\lua\lobject.h	302;"	d
TValuefields	.\3rd\lua\lobject.h	313;"	d
TYPE_BOOLEAN	.\lualib-src\lua-seri.c	17;"	d	file:
TYPE_CLOSE	.\lualib-src\lua-netpack.c	22;"	d	file:
TYPE_DATA	.\lualib-src\lua-netpack.c	18;"	d	file:
TYPE_ERROR	.\lualib-src\lua-netpack.c	20;"	d	file:
TYPE_LONG_STRING	.\lualib-src\lua-seri.c	24;"	d	file:
TYPE_MORE	.\lualib-src\lua-netpack.c	19;"	d	file:
TYPE_NIL	.\lualib-src\lua-seri.c	16;"	d	file:
TYPE_NUMBER	.\lualib-src\lua-seri.c	19;"	d	file:
TYPE_OPEN	.\lualib-src\lua-netpack.c	21;"	d	file:
TYPE_SHORT_STRING	.\lualib-src\lua-seri.c	22;"	d	file:
TYPE_TABLE	.\lualib-src\lua-seri.c	25;"	d	file:
TYPE_USERDATA	.\lualib-src\lua-seri.c	21;"	d	file:
Table	.\3rd\lua\lobject.h	/^typedef struct Table {$/;"	s
Table	.\3rd\lua\lobject.h	/^} Table;$/;"	t	typeref:struct:Table
Token	.\3rd\lua\llex.h	/^typedef struct Token {$/;"	s
Token	.\3rd\lua\llex.h	/^} Token;$/;"	t	typeref:struct:Token
UDP_ADDRESS_SIZE	.\skynet-src\socket_server.c	46;"	d	file:
UNARY_PRIORITY	.\3rd\lua\lparser.c	1033;"	d	file:
UNLOCK	.\3rd\lua\lauxlib.c	963;"	d	file:
UNLOCK	.\lualib-src\lua-clientsocket.c	133;"	d	file:
UNLOCK	.\skynet-src\skynet_env.c	28;"	d	file:
UNLOCK	.\skynet-src\skynet_mq.c	47;"	d	file:
UNLOCK	.\skynet-src\skynet_timer.c	22;"	d	file:
UNUSED	.\3rd\lua\llimits.h	89;"	d
UPVALNAME	.\3rd\lua\luac.c	274;"	d	file:
Udata	.\3rd\lua\lobject.h	/^typedef union Udata {$/;"	u
Udata	.\3rd\lua\lobject.h	/^} Udata;$/;"	t	typeref:union:Udata
UnOpr	.\3rd\lua\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	g
UnOpr	.\3rd\lua\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	t	typeref:enum:UnOpr
UpVal	.\3rd\lua\lobject.h	/^typedef struct UpVal {$/;"	s
UpVal	.\3rd\lua\lobject.h	/^} UpVal;$/;"	t	typeref:struct:UpVal
Upvaldesc	.\3rd\lua\lobject.h	/^typedef struct Upvaldesc {$/;"	s
Upvaldesc	.\3rd\lua\lobject.h	/^} Upvaldesc;$/;"	t	typeref:struct:Upvaldesc
VALUETYPE_BOOLEAN	.\lualib-src\lua-sharedata.c	16;"	d	file:
VALUETYPE_NIL	.\lualib-src\lua-sharedata.c	13;"	d	file:
VALUETYPE_NUMBER	.\lualib-src\lua-sharedata.c	14;"	d	file:
VALUETYPE_STRING	.\lualib-src\lua-sharedata.c	15;"	d	file:
VALUETYPE_TABLE	.\lualib-src\lua-sharedata.c	17;"	d	file:
VARBITS	.\3rd\lua\lobject.h	39;"	d
VCALL	.\3rd\lua\lparser.h	/^  VCALL,	\/* info = instruction pc *\/$/;"	e	enum:__anon13
VERSION	.\3rd\lpeg\lptypes.h	22;"	d
VERSION	.\3rd\lua\lundump.c	237;"	d	file:
VFALSE	.\3rd\lua\lparser.h	/^  VFALSE,$/;"	e	enum:__anon13
VINDEXED	.\3rd\lua\lparser.h	/^  VINDEXED,	\/* t = table register\/upvalue; idx = index R\/K *\/$/;"	e	enum:__anon13
VJMP	.\3rd\lua\lparser.h	/^  VJMP,		\/* info = instruction pc *\/$/;"	e	enum:__anon13
VK	.\3rd\lua\lparser.h	/^  VK,		\/* info = index of constant in `k' *\/$/;"	e	enum:__anon13
VKNUM	.\3rd\lua\lparser.h	/^  VKNUM,	\/* nval = numerical value *\/$/;"	e	enum:__anon13
VLOCAL	.\3rd\lua\lparser.h	/^  VLOCAL,	\/* info = local register *\/$/;"	e	enum:__anon13
VNIL	.\3rd\lua\lparser.h	/^  VNIL,$/;"	e	enum:__anon13
VNONRELOC	.\3rd\lua\lparser.h	/^  VNONRELOC,	\/* info = result register *\/$/;"	e	enum:__anon13
VOID	.\3rd\lua\luac.c	221;"	d	file:
VRELOCABLE	.\3rd\lua\lparser.h	/^  VRELOCABLE,	\/* info = instruction pc *\/$/;"	e	enum:__anon13
VTRUE	.\3rd\lua\lparser.h	/^  VTRUE,$/;"	e	enum:__anon13
VUPVAL	.\3rd\lua\lparser.h	/^  VUPVAL,       \/* info = index of upvalue in 'upvalues' *\/$/;"	e	enum:__anon13
VVARARG	.\3rd\lua\lparser.h	/^  VVARARG	\/* info = instruction pc *\/$/;"	e	enum:__anon13
VVOID	.\3rd\lua\lparser.h	/^  VVOID,	\/* no value *\/$/;"	e	enum:__anon13
Value	.\3rd\lua\lobject.h	/^typedef union Value Value;$/;"	t	typeref:union:Value
Value	.\3rd\lua\lobject.h	/^union Value {$/;"	u
Vardesc	.\3rd\lua\lparser.h	/^typedef struct Vardesc {$/;"	s
Vardesc	.\3rd\lua\lparser.h	/^} Vardesc;$/;"	t	typeref:struct:Vardesc
WHITE0BIT	.\3rd\lua\lgc.h	87;"	d
WHITE1BIT	.\3rd\lua\lgc.h	88;"	d
WHITEBITS	.\3rd\lua\lgc.h	96;"	d
WORD	.\3rd\lua-md5\md5.c	13;"	d	file:
WORD32	.\3rd\lua-md5\md5.c	/^typedef uint32_t WORD32;$/;"	t	file:
WORD32	.\3rd\lua-md5\md5.c	/^typedef unsigned int WORD32;$/;"	t	file:
XDIGITBIT	.\3rd\lua\lctype.h	43;"	d
Z	.\3rd\lua\lundump.c	/^ ZIO* Z;$/;"	m	struct:__anon22	file:
ZIO	.\3rd\lua\lzio.h	/^typedef struct Zio ZIO;$/;"	t	typeref:struct:Zio
Zio	.\3rd\lua\lzio.h	/^struct Zio {$/;"	s
_FILE_OFFSET_BITS	.\3rd\lua\liolib.c	14;"	d	file:
_LARGEFILE_SOURCE	.\3rd\lua\liolib.c	13;"	d	file:
_M.connect	.\lualib\mysql.lua	/^function _M.connect( opts)$/;"	f
_M.disconnect	.\lualib\mysql.lua	/^function _M.disconnect(self)$/;"	f
_M.query	.\lualib\mysql.lua	/^function _M.query(self, query)$/;"	f
_M.quote_sql_str	.\lualib\mysql.lua	/^function _M.quote_sql_str( str)$/;"	f
_M.server_ver	.\lualib\mysql.lua	/^function _M.server_ver(self)$/;"	f
_M.set_compact_arrays	.\lualib\mysql.lua	/^function _M.set_compact_arrays(self, value)$/;"	f
_RWLOCK_H_	.\skynet-src\rwlock.h	3;"	d
__MALLOC_HOOK_H	.\skynet-src\malloc_hook.h	3;"	d
__gc 	.\lualib\redis.lua	/^	__gc = function(self)$/;"	f
__gc 	.\lualib\socketchannel.lua	/^	__gc = function(cs)$/;"	f
__index		.\lualib\mongo.lua	/^	__index	= function (self, key)$/;"	f
__index		.\lualib\mongo.lua	/^	__index	= function(self, key)$/;"	f
__index 	.\lualib\snax.lua	/^		__index = function( t, k )$/;"	f
__init__	.\test\testredis2.lua	/^function __init__()$/;"	f
__parse_addr	.\lualib\mongo.lua	/^local function __parse_addr(addr)$/;"	f
__tostring 	.\lualib\mongo.lua	/^	__tostring = function (self)$/;"	f
__tostring 	.\lualib\multicast.lua	/^	__tostring = function (self)$/;"	f
_callback	.\lualib-src\lua-skynet.c	/^_callback(lua_State *L) {$/;"	f	file:
_cb	.\lualib-src\lua-skynet.c	/^_cb(struct skynet_context * context, void * ud, int type, int session, uint32_t source, const void * msg, size_t sz) {$/;"	f	file:
_cb	.\service-src\service_gate.c	/^_cb(struct skynet_context * ctx, void * ud, int type, int session, uint32_t source, const void * msg, size_t sz) {$/;"	f	file:
_command	.\lualib-src\lua-skynet.c	/^_command(lua_State *L) {$/;"	f	file:
_compose_packet	.\lualib\mysql.lua	/^local function _compose_packet(self, req, size)$/;"	f
_compose_query	.\lualib\mysql.lua	/^local function _compose_query(self, query)$/;"	f
_compute_token	.\lualib\mysql.lua	/^local function _compute_token(password, scramble)$/;"	f
_ctrl	.\service-src\service_gate.c	/^_ctrl(struct gate * g, const void * msg, int sz) {$/;"	f	file:
_debug_dispatch	.\lualib\skynet\debug.lua	/^local function _debug_dispatch(session, address, cmd, ...)$/;"	f
_drop_queue	.\skynet-src\skynet_mq.c	/^_drop_queue(struct message_queue *q, message_drop drop_func, void *ud) {$/;"	f	file:
_dump	.\lualib\mysql.lua	/^local function _dump(data)$/;"	f
_dumphex	.\lualib\mysql.lua	/^local function _dumphex(bytes)$/;"	f
_error	.\lualib-src\lua-skynet.c	/^_error(lua_State *L) {$/;"	f	file:
_error_dispatch	.\lualib\skynet.lua	/^local function _error_dispatch(error_session, error_source) --错误消息派发函数$/;"	f
_filter_args	.\skynet-src\skynet_server.c	/^_filter_args(struct skynet_context * context, int type, int *session, void ** data, size_t * sz) {$/;"	f	file:
_forward	.\service-src\service_gate.c	/^_forward(struct gate *g, struct connection * c, int size) {$/;"	f	file:
_forward_agent	.\service-src\service_gate.c	/^_forward_agent(struct gate * g, int fd, uint32_t agentaddr, uint32_t clientaddr) {$/;"	f	file:
_from_cstring	.\lualib\mysql.lua	/^local function _from_cstring(data, i)$/;"	f
_from_length_coded_bin	.\lualib\mysql.lua	/^local function _from_length_coded_bin(data, pos)$/;"	f
_from_length_coded_str	.\lualib\mysql.lua	/^local function _from_length_coded_str(data, pos)$/;"	f
_genid	.\lualib-src\lua-skynet.c	/^_genid(lua_State *L) {$/;"	f	file:
_get_byte2	.\lualib\mysql.lua	/^local function _get_byte2(data, i)$/;"	f
_get_byte3	.\lualib\mysql.lua	/^local function _get_byte3(data, i)$/;"	f
_get_byte4	.\lualib\mysql.lua	/^local function _get_byte4(data, i)$/;"	f
_get_byte8	.\lualib\mysql.lua	/^local function _get_byte8(data, i)$/;"	f
_harbor	.\lualib-src\lua-skynet.c	/^_harbor(lua_State *L) {$/;"	f	file:
_init	.\service-src\service_snlua.c	/^_init(struct snlua *l, struct skynet_context *ctx, const char * args, size_t sz) {$/;"	f	file:
_init_env	.\skynet-src\skynet_main.c	/^_init_env(lua_State *L) {$/;"	f	file:
_insert_name	.\skynet-src\skynet_handle.c	/^_insert_name(struct handle_storage *s, const char * name, uint32_t handle) {$/;"	f	file:
_insert_name_before	.\skynet-src\skynet_handle.c	/^_insert_name_before(struct handle_storage *s, char *name, uint32_t handle, int before) {$/;"	f	file:
_int64	.\3rd\lua-int64\int64.c	/^_int64(lua_State *L, int index) {$/;"	f	file:
_launch	.\service-src\service_snlua.c	/^_launch(struct skynet_context * context, void *ud, int type, int session, uint32_t source , const void * msg, size_t sz) {$/;"	f	file:
_logger	.\service-src\service_logger.c	/^_logger(struct skynet_context * context, void *ud, int type, int session, uint32_t source, const void * msg, size_t sz) {$/;"	f	file:
_luaseri_pack	.\lualib-src\lua-seri.c	/^_luaseri_pack(lua_State *L) {	\/\/打包函数$/;"	f
_luaseri_unpack	.\lualib-src\lua-seri.c	/^_luaseri_unpack(lua_State *L) {	\/\/解包函数$/;"	f
_mem_data	.\skynet-src\malloc_hook.c	/^typedef struct _mem_data {$/;"	s	file:
_memory_block	.\skynet-src\malloc_hook.c	/^static size_t _memory_block = 0;$/;"	v	file:
_monitor	.\skynet-src\skynet_start.c	/^_monitor(void *p) {$/;"	f	file:
_mysql_login	.\lualib\mysql.lua	/^local function _mysql_login(self,user,password,database)$/;"	f
_open_sym	.\skynet-src\skynet_module.c	/^_open_sym(struct skynet_module *mod) {$/;"	f	file:
_parm	.\service-src\service_gate.c	/^_parm(char *msg, int sz, int command_sz) {$/;"	f	file:
_parse_eof_packet	.\lualib\mysql.lua	/^local function _parse_eof_packet(packet)$/;"	f
_parse_err_packet	.\lualib\mysql.lua	/^local function _parse_err_packet(packet)$/;"	f
_parse_field_packet	.\lualib\mysql.lua	/^local function _parse_field_packet(data)$/;"	f
_parse_ok_packet	.\lualib\mysql.lua	/^local function _parse_ok_packet(packet)$/;"	f
_parse_result_set_header_packet	.\lualib\mysql.lua	/^local function _parse_result_set_header_packet(packet)$/;"	f
_parse_row_data_packet	.\lualib\mysql.lua	/^local function _parse_row_data_packet(data, cols, compact)$/;"	f
_pow64	.\3rd\lua-int64\int64.c	/^_pow64(int64_t a, int64_t b) {$/;"	f	file:
_pushint64	.\3rd\lua-int64\int64.c	/^_pushint64(lua_State *L, int64_t n) {$/;"	f	file:
_query	.\skynet-src\skynet_module.c	/^_query(const char * name) {$/;"	f	file:
_query_resp	.\lualib\mysql.lua	/^local function _query_resp(self)$/;"	f
_recv_auth_resp	.\lualib\mysql.lua	/^local function _recv_auth_resp(self)$/;"	f
_recv_decode_packet_resp	.\lualib\mysql.lua	/^local function _recv_decode_packet_resp(self)$/;"	f
_recv_field_packet	.\lualib\mysql.lua	/^local function _recv_field_packet(self, sock)$/;"	f
_recv_packet	.\lualib\mysql.lua	/^local function _recv_packet(self,sock)$/;"	f
_redirect	.\lualib-src\lua-skynet.c	/^_redirect(lua_State *L) {$/;"	f	file:
_release	.\skynet-src\skynet_mq.c	/^_release(struct message_queue *q) {$/;"	f	file:
_report	.\service-src\service_gate.c	/^_report(struct gate * g, const char * data, ...) {$/;"	f	file:
_report_launcher_error	.\service-src\service_snlua.c	/^_report_launcher_error(struct skynet_context *ctx) {$/;"	f	file:
_return_message	.\service-src\databuffer.h	/^_return_message(struct databuffer *db, struct messagepool *mp) {$/;"	f
_send	.\lualib-src\lua-skynet.c	/^_send(lua_State *L) {$/;"	f	file:
_send_packet	.\lualib\mysql.lua	/^local function _send_packet(self, req, size)$/;"	f
_set_byte2	.\lualib\mysql.lua	/^local function _set_byte2(n)$/;"	f
_set_byte3	.\lualib\mysql.lua	/^local function _set_byte3(n)$/;"	f
_set_byte4	.\lualib\mysql.lua	/^local function _set_byte4(n)$/;"	f
_socket	.\skynet-src\skynet_start.c	/^_socket(void *p) {$/;"	f	file:
_start	.\skynet-src\skynet_start.c	/^_start(int thread) {$/;"	f	file:
_timer	.\skynet-src\skynet_start.c	/^_timer(void *p) {$/;"	f	file:
_to_binary_coded_string	.\lualib\mysql.lua	/^local function _to_binary_coded_string(data)$/;"	f
_to_cstring	.\lualib\mysql.lua	/^local function _to_cstring(data)$/;"	f
_tostring	.\lualib-src\lua-skynet.c	/^_tostring(lua_State *L) {$/;"	f	file:
_try_open	.\skynet-src\skynet_module.c	/^_try_open(struct modules *m, const char * name) {$/;"	f	file:
_used_memory	.\skynet-src\malloc_hook.c	/^static size_t _used_memory = 0;$/;"	v	file:
_worker	.\skynet-src\skynet_start.c	/^_worker(void *p) {$/;"	f	file:
accept	.\lualib\snax\loginserver.lua	/^local function accept(conf, s, fd, addr)$/;"	f
accept	.\test\testsocket.lua	/^	local function accept(id)$/;"	f
accept.exit	.\test\pingserver.lua	/^function accept.exit(...)$/;"	f
accept.hello	.\test\pingserver.lua	/^function accept.hello()$/;"	f
accept.hello	.\test\testping.lua	/^function accept.hello()$/;"	f
accept.sleep	.\test\pingserver.lua	/^function accept.sleep(queue, n)$/;"	f
accept_slave	.\service\cslave.lua	/^local function accept_slave(fd)$/;"	f
actvar	.\3rd\lua\lparser.h	/^  } actvar;$/;"	m	struct:Dyndata	typeref:struct:Dyndata::__anon16
add	.\3rd\lpeg\lpeg.html	/^function add (acc, newvalue) return acc + newvalue end$/;"	f
add1	.\test\testredis2.lua	/^function add1(key, count)$/;"	f
add2	.\test\testredis2.lua	/^function add2(key, count)$/;"	f
add_list	.\service\service_mgr.lua	/^	local function add_list(all, m)$/;"	f
add_node	.\skynet-src\skynet_timer.c	/^add_node(struct timer *T,struct timer_node *node) {$/;"	f	file:
add_s	.\3rd\lua\lstrlib.c	/^static void add_s (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	file:
add_udp_socket	.\skynet-src\socket_server.c	/^add_udp_socket(struct socket_server *ss, struct request_udp *udp) {$/;"	f	file:
add_value	.\3rd\lua\lstrlib.c	/^static void add_value (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	file:
addbuff	.\3rd\lua\lstate.c	85;"	d	file:
addcharset	.\3rd\lpeg\lpcode.c	/^static void addcharset (CompileState *compst, const byte *cs) {$/;"	f	file:
adddef 	.\3rd\lpeg\re.lua	/^local function adddef (t, k, exp)$/;"	f
adddyncaptures	.\3rd\lpeg\lpvm.c	/^static void adddyncaptures (const char *s, Capture *base, int n, int fd) {$/;"	f	file:
addfield	.\3rd\lua\ltablib.c	/^static void addfield (lua_State *L, luaL_Buffer *b, int i) {$/;"	f	file:
addinfo	.\3rd\lua\ldebug.c	/^static void addinfo (lua_State *L, const char *msg) {$/;"	f	file:
addinstcap	.\3rd\lpeg\lpcode.c	/^static int addinstcap (CompileState *compst, Opcode op, int cap, int key,$/;"	f	file:
addinstruction	.\3rd\lpeg\lpcode.c	/^static int addinstruction (CompileState *compst, Opcode op, int aux) {$/;"	f	file:
addk	.\3rd\lua\lcode.c	/^static int addk (FuncState *fs, TValue *key, TValue *v) {$/;"	f	file:
addlenmod	.\3rd\lua\lstrlib.c	/^static void addlenmod (char *form, const char *lenmod) {$/;"	f	file:
addoffsetinst	.\3rd\lpeg\lpcode.c	/^static int addoffsetinst (CompileState *compst, Opcode op) {$/;"	f	file:
addonestring	.\3rd\lpeg\lpcap.c	/^static int addonestring (luaL_Buffer *b, CapState *cs, const char *what) {$/;"	f	file:
addprototype	.\3rd\lua\lparser.c	/^static Proto *addprototype (LexState *ls) {$/;"	f	file:
addquoted	.\3rd\lua\lstrlib.c	/^static void addquoted (lua_State *L, luaL_Buffer *b, int arg) {$/;"	f	file:
address	.\skynet-src\socket_server.c	/^	uint8_t address[UDP_ADDRESS_SIZE];$/;"	m	struct:request_send_udp	file:
address	.\skynet-src\socket_server.c	/^	uint8_t address[UDP_ADDRESS_SIZE];$/;"	m	struct:request_setudp	file:
address_port	.\lualib-src\lua-socket.c	/^address_port(lua_State *L, char *tmp, const char * addr, int port_index, int *port) {$/;"	f	file:
addstr	.\3rd\lua\lobject.c	250;"	d	file:
addtoktable	.\3rd\lpeg\lptree.c	/^static int addtoktable (lua_State *L, int idx) {$/;"	f	file:
adjust	.\lualib\sprotoparser.lua	/^local function adjust(r)$/;"	f
adjust_address	.\service\debug_console.lua	/^local function adjust_address(address)$/;"	f
adjust_assign	.\3rd\lua\lparser.c	/^static void adjust_assign (LexState *ls, int nvars, int nexps, expdesc *e) {$/;"	f	file:
adjust_varargs	.\3rd\lua\ldo.c	/^static StkId adjust_varargs (lua_State *L, SharedProto *p, int actual) {$/;"	f	file:
adjustlocalvars	.\3rd\lua\lparser.c	/^static void adjustlocalvars (LexState *ls, int nvars) {$/;"	f	file:
adjustresults	.\3rd\lua\lapi.h	17;"	d
agent	.\service-src\service_gate.c	/^	uint32_t agent;$/;"	m	struct:connection	file:
allgc	.\3rd\lua\lstate.h	/^  GCObject *allgc;  \/* list of all collectable objects *\/$/;"	m	struct:global_State
alloc_id	.\skynet-src\socket_server.c	/^	int alloc_id;		\/\/应用层分配id用的$/;"	m	struct:socket_server	file:
allocated	.\skynet-src\malloc_hook.c	/^	ssize_t allocated;$/;"	m	struct:_mem_data	file:
allowhook	.\3rd\lua\lstate.h	/^  lu_byte allowhook;$/;"	m	struct:lua_State
allweak	.\3rd\lua\lstate.h	/^  GCObject *allweak;  \/* list of all-weak tables *\/$/;"	m	struct:global_State
anchor_token	.\3rd\lua\lparser.c	/^static void anchor_token (LexState *ls) {$/;"	f	file:
andaux	.\3rd\lua\lbitlib.c	/^static b_uint andaux (lua_State *L) {$/;"	f	file:
anywhere	.\3rd\lpeg\lpeg.html	/^function anywhere (p)$/;"	f
api_check	.\3rd\lua\llimits.h	85;"	d
api_checknelems	.\3rd\lua\lapi.h	20;"	d
api_checkstackindex	.\3rd\lua\lapi.c	51;"	d	file:
api_checkvalidindex	.\3rd\lua\lapi.c	49;"	d	file:
api_incr_top	.\3rd\lua\lapi.h	14;"	d
append_key	.\lualib-src\lua-bson.c	/^append_key(struct bson *bs, int type, const char *key, size_t sz) {$/;"	f	file:
append_number	.\lualib-src\lua-bson.c	/^append_number(struct bson *bs, lua_State *L, const char *key, size_t sz) {$/;"	f	file:
append_one	.\lualib-src\lua-bson.c	/^append_one(struct bson *bs, lua_State *L, const char *key, size_t sz) {$/;"	f	file:
append_sendbuffer	.\skynet-src\socket_server.c	/^append_sendbuffer(struct socket_server *ss, struct socket *s, struct request_send * request, int n) {$/;"	f	file:
append_sendbuffer_	.\skynet-src\socket_server.c	/^append_sendbuffer_(struct socket_server *ss, struct wb_list *s, struct request_send * request, int size, int n) {$/;"	f	file:
append_sendbuffer_low	.\skynet-src\socket_server.c	/^append_sendbuffer_low(struct socket_server *ss,struct socket *s, struct request_send * request) {$/;"	f	file:
append_sendbuffer_udp	.\skynet-src\socket_server.c	/^append_sendbuffer_udp(struct socket_server *ss, struct socket *s, int priority, struct request_send * request, const uint8_t udp_address[UDP_ADDRESS_SIZE]) {$/;"	f	file:
append_table	.\lualib-src\lua-bson.c	/^append_table(struct bson *bs, lua_State *L, const char *key, size_t sz) {$/;"	f	file:
arith_op	.\3rd\lua\lvm.c	520;"	d	file:
arr	.\3rd\lua\lparser.h	/^    Vardesc *arr;$/;"	m	struct:Dyndata::__anon16
arr	.\3rd\lua\lparser.h	/^  Labeldesc *arr;  \/* array *\/$/;"	m	struct:Labellist
array	.\3rd\lua\lobject.h	/^  TValue *array;  \/* array part *\/$/;"	m	struct:Table
array	.\lualib-src\lua-sharedata.c	/^	union value * array;$/;"	m	struct:table	typeref:union:table::value	file:
array_index	.\lualib-src\sproto\lsproto.c	/^	int array_index;$/;"	m	struct:decode_ud	file:
array_index	.\lualib-src\sproto\lsproto.c	/^	int array_index;$/;"	m	struct:encode_ud	file:
array_tag	.\lualib-src\sproto\lsproto.c	/^	const char * array_tag;$/;"	m	struct:decode_ud	file:
array_tag	.\lualib-src\sproto\lsproto.c	/^	const char * array_tag;$/;"	m	struct:encode_ud	file:
arrayindex	.\3rd\lua\ltable.c	/^static int arrayindex (const TValue *key) {$/;"	f	file:
arraytype	.\lualib-src\lua-sharedata.c	/^	uint8_t *arraytype;$/;"	m	struct:table	file:
assert(m.match(function (_, _) return i end, s) 	.\3rd\lpeg\test.lua	/^  assert(m.match(function (_, _) return i end, s) == i)$/;"	f
assert(m.match(m.P(1)^0 * function (_, i) return true end, s) 	.\3rd\lpeg\test.lua	/^assert(m.match(m.P(1)^0 * function (_, i) return true end, s) ==$/;"	f
assert(type(f) 	.\lualib\skynet.lua	/^	assert(type(f) == "function") --传入的f必须是函数$/;"	f
assert_socket	.\lualib\snax\loginserver.lua	/^local function assert_socket(v, fd)$/;"	f
assignment	.\3rd\lua\lparser.c	/^static void assignment (LexState *ls, struct LHS_assign *lh, int nvars) {$/;"	f	file:
atomic	.\3rd\lua\lgc.c	/^static l_mem atomic (lua_State *L) {$/;"	f	file:
atwordboundary	.\3rd\lpeg\lpeg.html	/^function atwordboundary (p)$/;"	f
auth	.\lualib\snax\loginserver.lua	/^	local function auth(fd, addr)$/;"	f
auth	.\lualib\snax\msgserver.lua	/^	local function auth(fd, addr, msg, sz)$/;"	f
aux	.\3rd\lpeg\lpvm.h	/^    byte aux;$/;"	m	struct:Instruction::Inst
aux_close	.\3rd\lua\liolib.c	/^static int aux_close (lua_State *L) {$/;"	f	file:
aux_getn	.\3rd\lua\ltablib.c	19;"	d	file:
aux_lines	.\3rd\lua\liolib.c	/^static void aux_lines (lua_State *L, int toclose) {$/;"	f	file:
aux_upvalue	.\3rd\lua\lapi.c	/^static const char *aux_upvalue (StkId fi, int n, TValue **val,$/;"	f	file:
auxemptycap	.\3rd\lpeg\lptree.c	/^static TTree *auxemptycap (lua_State *L, TTree *tree, int cap, int idx) {$/;"	f	file:
auxgetinfo	.\3rd\lua\ldebug.c	/^static int auxgetinfo (lua_State *L, const char *what, lua_Debug *ar,$/;"	f	file:
auxresume	.\3rd\lua\lcorolib.c	/^static int auxresume (lua_State *L, lua_State *co, int narg) {$/;"	f	file:
auxsort	.\3rd\lua\ltablib.c	/^static void auxsort (lua_State *L, int l, int u) {$/;"	f	file:
auxupvalue	.\3rd\lua\ldblib.c	/^static int auxupvalue (lua_State *L, int get) {$/;"	f	file:
b	.\3rd\lua\lauxlib.h	/^  char *b;  \/* buffer address *\/$/;"	m	struct:luaL_Buffer
b	.\3rd\lua\ldo.c	/^  luai_jmpbuf b;$/;"	m	struct:lua_longjmp	file:
b	.\3rd\lua\lobject.h	/^  int b;           \/* booleans *\/$/;"	m	union:Value
b	.\3rd\lua\lundump.c	/^ Mbuffer* b;$/;"	m	struct:__anon22	file:
b64index	.\lualib-src\lua-crypt.c	/^b64index(uint8_t c) {$/;"	f	file:
b_and	.\3rd\lua\lbitlib.c	/^static int b_and (lua_State *L) {$/;"	f	file:
b_arshift	.\3rd\lua\lbitlib.c	/^static int b_arshift (lua_State *L) {$/;"	f	file:
b_extract	.\3rd\lua\lbitlib.c	/^static int b_extract (lua_State *L) {$/;"	f	file:
b_lrot	.\3rd\lua\lbitlib.c	/^static int b_lrot (lua_State *L) {$/;"	f	file:
b_lshift	.\3rd\lua\lbitlib.c	/^static int b_lshift (lua_State *L) {$/;"	f	file:
b_not	.\3rd\lua\lbitlib.c	/^static int b_not (lua_State *L) {$/;"	f	file:
b_or	.\3rd\lua\lbitlib.c	/^static int b_or (lua_State *L) {$/;"	f	file:
b_replace	.\3rd\lua\lbitlib.c	/^static int b_replace (lua_State *L) {$/;"	f	file:
b_rot	.\3rd\lua\lbitlib.c	/^static int b_rot (lua_State *L, int i) {$/;"	f	file:
b_rrot	.\3rd\lua\lbitlib.c	/^static int b_rrot (lua_State *L) {$/;"	f	file:
b_rshift	.\3rd\lua\lbitlib.c	/^static int b_rshift (lua_State *L) {$/;"	f	file:
b_shift	.\3rd\lua\lbitlib.c	/^static int b_shift (lua_State *L, b_uint r, int i) {$/;"	f	file:
b_test	.\3rd\lua\lbitlib.c	/^static int b_test (lua_State *L) {$/;"	f	file:
b_uint	.\3rd\lua\lbitlib.c	/^typedef lua_Unsigned b_uint;$/;"	t	file:
b_xor	.\3rd\lua\lbitlib.c	/^static int b_xor (lua_State *L) {$/;"	f	file:
backrefcap	.\3rd\lpeg\lpcap.c	/^static int backrefcap (CapState *cs) {$/;"	f	file:
badgrammar 	.\3rd\lpeg\test.lua	/^local function badgrammar (g, expected)$/;"	f
balanced	.\3rd\lpeg\lpeg.html	/^<h3><a name="balanced"><\/a>Balanced parentheses<\/h3>$/;"	a
base	.\3rd\lua\lstate.h	/^      StkId base;  \/* base for this function *\/$/;"	m	struct:CallInfo::__anon17::__anon18
base	.\lualib-src\sproto\sproto.c	/^	int base;$/;"	m	struct:sproto_type	file:
base_ci	.\3rd\lua\lstate.h	/^  CallInfo base_ci;  \/* CallInfo for first level (C calling Lua) *\/$/;"	m	struct:lua_State
base_funcs	.\3rd\lua\lbaselib.c	/^static const luaL_Reg base_funcs[] = {$/;"	v	file:
basehookcount	.\3rd\lua\lstate.h	/^  int basehookcount;$/;"	m	struct:lua_State
basic	.\3rd\lpeg\lpeg.html	/^<h2><a name="basic">Basic Constructions<\/a><\/h2>$/;"	a
basic	.\3rd\lpeg\re.html	/^<h2><a name="basic"><\/a>The <code>re<\/code> Module<\/h2>$/;"	a
basiclookfor 	.\3rd\lpeg\test.lua	/^function basiclookfor (p)$/;"	f
bind	.\skynet-src\socket_server.c	/^		struct request_bind bind;$/;"	m	union:request_package::__anon25	typeref:struct:request_package::__anon25::request_bind	file:
bind_socket	.\skynet-src\socket_server.c	/^bind_socket(struct socket_server *ss, struct request_bind *request, struct socket_message *result) {$/;"	f	file:
bit2mask	.\3rd\lua\lgc.h	80;"	d
bitlib	.\3rd\lua\lbitlib.c	/^static const luaL_Reg bitlib[] = {$/;"	v	file:
bitmask	.\3rd\lua\lgc.h	79;"	d
bl	.\3rd\lua\lparser.h	/^  struct BlockCnt *bl;  \/* chain of current blocks *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::BlockCnt
black2gray	.\3rd\lua\lgc.c	63;"	d	file:
blk	.\lualib-src\lsha1.c	110;"	d	file:
blk0	.\lualib-src\lsha1.c	105;"	d	file:
blk0	.\lualib-src\lsha1.c	107;"	d	file:
blk_alloc	.\lualib-src\lua-seri.c	/^blk_alloc(void) {$/;"	f	file:
block	.\3rd\lua\lparser.c	/^static void block (LexState *ls) {$/;"	f	file:
block	.\lualib-src\lua-seri.c	/^struct block {$/;"	s	file:
block_connect	.\lualib\socketchannel.lua	/^local function block_connect(self, once)$/;"	f
block_follow	.\3rd\lua\lparser.c	/^static int block_follow (LexState *ls, int withuntil) {$/;"	f	file:
block_readpipe	.\skynet-src\socket_server.c	/^block_readpipe(int pipefd, void *buffer, int sz) {$/;"	f	file:
block_send	.\lualib-src\lua-clientsocket.c	/^block_send(lua_State *L, int fd, const char * buffer, int sz) {$/;"	f	file:
body	.\3rd\lua\lparser.c	/^static void body (LexState *ls, expdesc *e, int ismethod, int line) {$/;"	f	file:
boolK	.\3rd\lua\lcode.c	/^static int boolK (FuncState *fs, int b) {$/;"	f	file:
boolean	.\lualib-src\lua-sharedata.c	/^	int boolean;$/;"	m	union:value	file:
bootstrap	.\skynet-src\skynet_imp.h	/^	const char * bootstrap;		\/\/引导配置$/;"	m	struct:skynet_config
bootstrap	.\skynet-src\skynet_start.c	/^bootstrap(struct skynet_context * logger, const char * cmdline) {$/;"	f	file:
boxreader	.\lualib-src\lua-stm.c	/^struct boxreader {$/;"	s	file:
boxstm	.\lualib-src\lua-stm.c	/^struct boxstm {$/;"	s	file:
breaklabel	.\3rd\lua\lparser.c	/^static void breaklabel (LexState *ls) {$/;"	f	file:
broker	.\service-src\service_gate.c	/^	uint32_t broker;$/;"	m	struct:gate	file:
bson	.\lualib-src\lua-bson.c	/^struct bson {$/;"	s	file:
bson_create	.\lualib-src\lua-bson.c	/^bson_create(struct bson *b) {$/;"	f	file:
bson_destroy	.\lualib-src\lua-bson.c	/^bson_destroy(struct bson *b) {$/;"	f	file:
bson_meta	.\lualib-src\lua-bson.c	/^bson_meta(lua_State *L) {$/;"	f	file:
bson_numstr	.\lualib-src\lua-bson.c	/^bson_numstr( char *str, unsigned int i ) {$/;"	f	file:
bson_numstr_len	.\lualib-src\lua-bson.c	/^static int bson_numstr_len[MAX_NUMBER];$/;"	v	file:
bson_numstrs	.\lualib-src\lua-bson.c	/^static char bson_numstrs[MAX_NUMBER][4];$/;"	v	file:
bson_reader	.\lualib-src\lua-bson.c	/^struct bson_reader {$/;"	s	file:
bson_reserve	.\lualib-src\lua-bson.c	/^bson_reserve(struct bson *b, int sz) {$/;"	f	file:
buff	.\3rd\lpeg\lpvm.h	/^  byte buff[1];$/;"	m	union:Instruction
buff	.\3rd\lua\lauxlib.c	/^  char buff[LUAL_BUFFERSIZE];  \/* area for reading file *\/$/;"	m	struct:LoadF	file:
buff	.\3rd\lua\ldo.c	/^  Mbuffer buff;  \/* dynamic structure used by the scanner *\/$/;"	m	struct:SParser	file:
buff	.\3rd\lua\llex.h	/^  Mbuffer *buff;  \/* buffer for tokens *\/$/;"	m	struct:LexState
buff	.\3rd\lua\lstate.c	/^  char buff[LUAI_EXTRASPACE];$/;"	m	struct:LX	file:
buff	.\3rd\lua\lstate.h	/^  Mbuffer buff;  \/* temporary buffer for string concatenation *\/$/;"	m	struct:global_State
buff2d	.\3rd\lua\llex.c	209;"	d	file:
buffer	.\3rd\lua\lzio.h	/^  char *buffer;$/;"	m	struct:Mbuffer
buffer	.\lualib-src\lsha1.c	/^	uint8_t  buffer[64];$/;"	m	struct:__anon23	file:
buffer	.\lualib-src\lua-bson.c	/^	uint8_t buffer[DEFAULT_CAP];$/;"	m	struct:bson	file:
buffer	.\lualib-src\lua-clientsocket.c	/^	void * buffer;$/;"	m	struct:socket_buffer	file:
buffer	.\lualib-src\lua-mongo.c	/^	uint8_t buffer[DEFAULT_CAP];$/;"	m	struct:buffer	file:
buffer	.\lualib-src\lua-mongo.c	/^struct buffer {$/;"	s	file:
buffer	.\lualib-src\lua-netpack.c	/^	void * buffer;$/;"	m	struct:netpack	file:
buffer	.\lualib-src\lua-seri.c	/^	char * buffer;$/;"	m	struct:read_block	file:
buffer	.\lualib-src\lua-seri.c	/^	char buffer[BLOCK_SIZE];\/\/存储数据缓冲区$/;"	m	struct:block	file:
buffer	.\service-src\databuffer.h	/^	char * buffer;$/;"	m	struct:message
buffer	.\service-src\service_gate.c	/^	struct databuffer buffer;$/;"	m	struct:connection	typeref:struct:connection::databuffer	file:
buffer	.\service-src\service_harbor.c	/^	void * buffer;$/;"	m	struct:harbor_msg	file:
buffer	.\skynet-src\skynet_socket.h	/^	char * buffer;$/;"	m	struct:skynet_socket_message
buffer	.\skynet-src\socket_server.c	/^		char buffer[256];$/;"	m	union:request_package::__anon25	file:
buffer	.\skynet-src\socket_server.c	/^	char * buffer;$/;"	m	struct:request_send	file:
buffer	.\skynet-src\socket_server.c	/^	char buffer[MAX_INFO];		\/\/缓冲区	MAX_INFO:128$/;"	m	struct:socket_server	file:
buffer	.\skynet-src\socket_server.c	/^	void * buffer;$/;"	m	struct:send_object	file:
buffer	.\skynet-src\socket_server.c	/^	void *buffer;$/;"	m	struct:write_buffer	file:
buffer	.\skynet-src\socket_server.h	/^	void * (*buffer)(void *);$/;"	m	struct:socket_object_interface
buffer_create	.\lualib-src\lua-mongo.c	/^buffer_create(struct buffer *b) {$/;"	f	file:
buffer_destroy	.\lualib-src\lua-mongo.c	/^buffer_destroy(struct buffer *b) {$/;"	f	file:
buffer_node	.\lualib-src\lua-socket.c	/^struct buffer_node {$/;"	s	file:
buffer_reserve	.\lualib-src\lua-mongo.c	/^buffer_reserve(struct buffer *b, int sz) {$/;"	f	file:
buffonstack	.\3rd\lua\lauxlib.c	431;"	d	file:
buffreplace	.\3rd\lua\llex.c	/^static void buffreplace (LexState *ls, char from, char to) {$/;"	f	file:
buffsize	.\3rd\lua\lzio.h	/^  size_t buffsize;$/;"	m	struct:Mbuffer
buildgrammar	.\3rd\lpeg\lptree.c	/^static void buildgrammar (lua_State *L, TTree *grammar, int frule, int n) {$/;"	f	file:
bvalue	.\3rd\lua\lobject.h	165;"	d
byte	.\3rd\lpeg\lptypes.h	/^typedef unsigned char byte;$/;"	t
bytes2slots	.\3rd\lpeg\lptypes.h	105;"	d
bytestoword32	.\3rd\lua-md5\md5.c	/^static void bytestoword32 (WORD32 *x, const char *pt) {$/;"	f	file:
c	.\3rd\lua\lobject.h	/^  CClosure c;$/;"	m	union:Closure
c	.\3rd\lua\lstate.h	/^    } c;$/;"	m	union:CallInfo::__anon17	typeref:struct:CallInfo::__anon17::__anon19
cache	.\3rd\lua\lobject.h	/^  union Closure *cache;  \/* last created closure with this prototype *\/$/;"	m	struct:Proto	typeref:union:Proto::Closure
cache_clear	.\3rd\lua\lauxlib.c	/^cache_clear(lua_State *L) {$/;"	f	file:
calchash	.\lualib-src\lua-sharedata.c	/^calchash(const char * str, size_t l) {$/;"	f	file:
callTM	.\3rd\lua\lvm.c	/^static void callTM (lua_State *L, const TValue *f, const TValue *p1,$/;"	f	file:
call_binTM	.\3rd\lua\lvm.c	/^static int call_binTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	file:
call_orderTM	.\3rd\lua\lvm.c	/^static int call_orderTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	file:
callallpendingfinalizers	.\3rd\lua\lgc.c	/^static void callallpendingfinalizers (lua_State *L, int propagateerrors) {$/;"	f	file:
callhook	.\3rd\lua\ldo.c	/^static void callhook (lua_State *L, CallInfo *ci) {$/;"	f	file:
callstatus	.\3rd\lua\lstate.h	/^  lu_byte callstatus;$/;"	m	struct:CallInfo
cannot	.\3rd\lua\luac.c	/^static void cannot(const char* what)$/;"	f	file:
cap	.\3rd\lpeg\lpcap.h	/^  Capture *cap;  \/* current capture *\/$/;"	m	struct:CapState
cap	.\3rd\lpeg\lptree.h	/^  byte cap;  \/* kind of capture (if it is a capture) *\/$/;"	m	struct:TTree
cap	.\lualib-src\lua-bson.c	/^	int cap;$/;"	m	struct:bson	file:
cap	.\lualib-src\lua-mongo.c	/^	int cap;$/;"	m	struct:buffer	file:
cap	.\lualib-src\lua-netpack.c	/^	int cap;$/;"	m	struct:queue	file:
cap	.\service-src\hashid.h	/^	int cap;$/;"	m	struct:hashid
cap	.\skynet-src\skynet_mq.c	/^	int cap;		\/\/容量$/;"	m	struct:message_queue	file:
cap-arg	.\3rd\lpeg\lpeg.html	/^<h3><a name="cap-arg"><\/a><code>lpeg.Carg (n)<\/code><\/h3>$/;"	a
cap-b	.\3rd\lpeg\lpeg.html	/^<h3><a name="cap-b"><\/a><code>lpeg.Cb (name)<\/code><\/h3>$/;"	a
cap-c	.\3rd\lpeg\lpeg.html	/^<h3><a name="cap-c"><\/a><code>lpeg.C (patt)<\/code><\/h3>$/;"	a
cap-cc	.\3rd\lpeg\lpeg.html	/^<h3><a name="cap-cc"><\/a><code>lpeg.Cc ([value, ...])<\/code><\/h3>$/;"	a
cap-f	.\3rd\lpeg\lpeg.html	/^<h3><a name="cap-f"><\/a><code>lpeg.Cf (patt, func)<\/code><\/h3>$/;"	a
cap-func	.\3rd\lpeg\lpeg.html	/^<h3><a name="cap-func"><\/a><code>patt \/ function<\/code><\/h3>$/;"	a
cap-g	.\3rd\lpeg\lpeg.html	/^<h3><a name="cap-g"><\/a><code>lpeg.Cg (patt [, name])<\/code><\/h3>$/;"	a
cap-num	.\3rd\lpeg\lpeg.html	/^<h3><a name="cap-num"><\/a><code>patt \/ number<\/code><\/h3>$/;"	a
cap-p	.\3rd\lpeg\lpeg.html	/^<h3><a name="cap-p"><\/a><code>lpeg.Cp ()<\/code><\/h3>$/;"	a
cap-query	.\3rd\lpeg\lpeg.html	/^<h3><a name="cap-query"><\/a><code>patt \/ table<\/code><\/h3>$/;"	a
cap-s	.\3rd\lpeg\lpeg.html	/^<h3><a name="cap-s"><\/a><code>lpeg.Cs (patt)<\/code><\/h3>$/;"	a
cap-string	.\3rd\lpeg\lpeg.html	/^<h3><a name="cap-string"><\/a><code>patt \/ string<\/code><\/h3>$/;"	a
cap-t	.\3rd\lpeg\lpeg.html	/^<h3><a name="cap-t"><\/a><code>lpeg.Ct (patt)<\/code><\/h3>$/;"	a
caplevel	.\3rd\lpeg\lpvm.c	/^  int caplevel;$/;"	m	struct:Stack	file:
caplistidx	.\3rd\lpeg\lptypes.h	74;"	d
caplookfor 	.\3rd\lpeg\test.lua	/^function caplookfor (p)$/;"	f
capture	.\3rd\lua\lstrlib.c	/^  } capture[LUA_MAXCAPTURES];$/;"	m	struct:MatchState	typeref:struct:MatchState::__anon20	file:
capture_aux	.\3rd\lpeg\lptree.c	/^static int capture_aux (lua_State *L, int cap, int labelidx) {$/;"	f	file:
capture_to_close	.\3rd\lua\lstrlib.c	/^static int capture_to_close (MatchState *ms) {$/;"	f	file:
captures	.\3rd\lpeg\lpeg.html	/^<h2><a name="captures">Captures<\/a><\/h2>$/;"	a
captype	.\3rd\lpeg\lpcap.c	13;"	d	file:
cast	.\3rd\lua\llimits.h	93;"	d
cast_byte	.\3rd\lua\llimits.h	95;"	d
cast_int	.\3rd\lua\llimits.h	97;"	d
cast_num	.\3rd\lua\llimits.h	96;"	d
cast_uchar	.\3rd\lua\llimits.h	98;"	d
catch	.\lualib\mqueue.lua	/^local function catch(succ, ...)$/;"	f
cb	.\skynet-src\skynet_server.c	/^	skynet_cb cb;				\/\/skynet回调$/;"	m	struct:skynet_context	file:
cb_ud	.\skynet-src\skynet_server.c	/^	void * cb_ud;				\/\/回调的用户数据(userdata)$/;"	m	struct:skynet_context	file:
chan:delete	.\lualib\multicast.lua	/^function chan:delete()$/;"	f
chan:publish	.\lualib\multicast.lua	/^function chan:publish(...)$/;"	f
chan:subscribe	.\lualib\multicast.lua	/^function chan:subscribe()$/;"	f
chan:unsubscribe	.\lualib\multicast.lua	/^function chan:unsubscribe()$/;"	f
changewhite	.\3rd\lua\lgc.h	114;"	d
channel:changebackup	.\lualib\socketchannel.lua	/^function channel:changebackup(backup)$/;"	f
channel:changehost	.\lualib\socketchannel.lua	/^function channel:changehost(host, port)$/;"	f
channel:close	.\lualib\socketchannel.lua	/^function channel:close()$/;"	f
channel:connect	.\lualib\socketchannel.lua	/^function channel:connect(once)$/;"	f
channel:request	.\lualib\socketchannel.lua	/^function channel:request(request, response)$/;"	f
channel:response	.\lualib\socketchannel.lua	/^function channel:response(response)$/;"	f
channel_socket.read 	.\lualib\socketchannel.lua	/^channel_socket.read = wrapper_socket_function(socket.read)$/;"	f
channel_socket.readline 	.\lualib\socketchannel.lua	/^channel_socket.readline = wrapper_socket_function(socket.readline)$/;"	f
charsettype	.\3rd\lpeg\lpcode.c	/^static Opcode charsettype (const byte *cs, int *c) {$/;"	f	file:
check	.\3rd\lua\lparser.c	/^static void check (LexState *ls, int c) {$/;"	f	file:
checkGC	.\3rd\lua\lvm.c	513;"	d	file:
checkSizes	.\3rd\lua\lgc.c	/^static void checkSizes (lua_State *L) {$/;"	f	file:
check_capture	.\3rd\lua\lstrlib.c	/^static int check_capture (MatchState *ms, int l) {$/;"	f	file:
check_condition	.\3rd\lua\lparser.c	122;"	d	file:
check_conflict	.\3rd\lua\lparser.c	/^static void check_conflict (LexState *ls, struct LHS_assign *lh, expdesc *v) {$/;"	f	file:
check_connection	.\lualib\socketchannel.lua	/^local function check_connection(self)$/;"	f
check_exp	.\3rd\lua\llimits.h	62;"	d
check_exp	.\3rd\lua\llimits.h	67;"	d
check_match	.\3rd\lua\lparser.c	/^static void check_match (LexState *ls, int what, int who, int where) {$/;"	f	file:
check_next	.\3rd\lua\llex.c	/^static int check_next (LexState *ls, const char *set) {$/;"	f	file:
check_pid	.\skynet-src\skynet_daemon.c	/^check_pid(const char *pidfile) {$/;"	f	file:
check_reader	.\lualib-src\lua-bson.c	/^check_reader(lua_State *L, struct bson_reader *br, int sz) {$/;"	f	file:
check_sep	.\lualib-src\lua-socket.c	/^check_sep(struct buffer_node * node, int from, const char *sep, int seplen) {$/;"	f	file:
check_version	.\skynet-src\skynet_monitor.c	/^	int check_version;	\/\/检查版本$/;"	m	struct:skynet_monitor	file:
check_watch	.\service\sharedatad.lua	/^local function check_watch(queue)$/;"	f
check_wb_list	.\skynet-src\socket_server.c	/^check_wb_list(struct wb_list *s) {$/;"	f	file:
check_wsz	.\skynet-src\skynet_socket.c	/^check_wsz(struct skynet_context *ctx, int id, void *buffer, int64_t wsz) {$/;"	f	file:
checkaux	.\3rd\lpeg\lpcode.c	/^int checkaux (TTree *tree, int pred) {$/;"	f
checkconsistency	.\3rd\lua\lgc.c	71;"	d	file:
checkctrl	.\skynet-src\socket_server.c	/^	int checkctrl;		\/\/是否检查控制$/;"	m	struct:socket_server	file:
checkdeadkey	.\3rd\lua\lgc.c	68;"	d	file:
checkeq 	.\3rd\lpeg\test.lua	/^local function checkeq (x, y, p)$/;"	f
checkerr 	.\3rd\lpeg\test.lua	/^local function checkerr (msg, ...)$/;"	f
checklimit	.\3rd\lua\lparser.c	/^static void checklimit (FuncState *fs, int v, int l, const char *what) {$/;"	f	file:
checkliveness	.\3rd\lua\lobject.h	179;"	d
checkload	.\3rd\lua\loadlib.c	/^static int checkload (lua_State *L, int stat, const char *filename) {$/;"	f	file:
checkloops	.\3rd\lpeg\lptree.c	/^static int checkloops (TTree *tree) {$/;"	f	file:
checkmode	.\3rd\lua\ldo.c	/^static void checkmode (lua_State *L, const char *mode, const char *x) {$/;"	f	file:
checkname	.\3rd\lua\lparser.c	/^static void checkname (LexState *ls, expdesc *e) {$/;"	f	file:
checknext	.\3rd\lua\lparser.c	/^static void checknext (LexState *ls, int c) {$/;"	f	file:
checkoption	.\3rd\lua\loslib.c	/^static const char *checkoption (lua_State *L, const char *conv, char *buff) {$/;"	f	file:
checkrepeated	.\3rd\lua\lparser.c	/^static void checkrepeated (FuncState *fs, Labellist *ll, TString *label) {$/;"	f	file:
checkresults	.\3rd\lua\lapi.c	875;"	d	file:
checkseed	.\3rd\lua-md5\md5lib.c	/^static void checkseed (lua_State *L) {$/;"	f	file:
checktag	.\3rd\lua\lobject.h	131;"	d
checktag	.\3rd\lua\lobject.h	363;"	d
checktag	.\3rd\lua\lobject.h	365;"	d
checktype	.\3rd\lua\lobject.h	132;"	d
checktype	.\3rd\lua\lobject.h	364;"	d
checktype	.\3rd\lua\lobject.h	366;"	d
checktype	.\lualib\sprotoparser.lua	/^local function checktype(types, ptype, t)$/;"	f
checkupval	.\3rd\lua\ldblib.c	/^static int checkupval (lua_State *L, int argf, int argnup) {$/;"	f	file:
chunk	.\lualib-src\sproto\sproto.c	/^struct chunk {$/;"	s	file:
chunksize	.\lualib\http\internal.lua	/^local function chunksize(readbytes, body)$/;"	f
ci	.\3rd\lua\lstate.h	/^  CallInfo *ci;  \/* call info for current function *\/$/;"	m	struct:lua_State
ci_func	.\3rd\lua\ldebug.h	21;"	d
cl	.\3rd\lua\lstate.h	/^  union Closure cl;$/;"	m	union:GCObject	typeref:union:GCObject::Closure
clCvalue	.\3rd\lua\lobject.h	162;"	d
clLvalue	.\3rd\lua\lobject.h	161;"	d
classend	.\3rd\lua\lstrlib.c	/^static const char *classend (MatchState *ms, const char *p) {$/;"	f	file:
clean_prefix	.\skynet-src\malloc_hook.c	/^clean_prefix(char* ptr) {$/;"	f	file:
clear_closed_event	.\skynet-src\socket_server.c	/^clear_closed_event(struct socket_server *ss, struct socket_message * result, int type) {$/;"	f	file:
clear_list	.\lualib-src\lua-netpack.c	/^clear_list(struct uncomplete * uc) {$/;"	f	file:
clear_pool	.\lualib\skynet.lua	/^local function clear_pool()$/;"	f
clear_wb_list	.\skynet-src\socket_server.c	/^clear_wb_list(struct wb_list *list) {$/;"	f	file:
clearcache	.\3rd\lua\lauxlib.c	/^clearcache() {$/;"	f	file:
cleardummy	.\service-src\service_snlua.c	/^cleardummy(lua_State *L) {$/;"	f	file:
clearkeys	.\3rd\lua\lgc.c	/^static void clearkeys (global_State *g, GCObject *l, GCObject *f) {$/;"	f	file:
clearvalues	.\3rd\lua\lgc.c	/^static void clearvalues (global_State *g, GCObject *l, GCObject *f) {$/;"	f	file:
client	.\service-src\service_gate.c	/^	uint32_t client;$/;"	m	struct:connection	file:
client	.\test\testudp.lua	/^local function client()$/;"	f
client_tag	.\service-src\service_gate.c	/^	int client_tag;$/;"	m	struct:gate	file:
cloneproto	.\3rd\lua\lapi.c	/^cloneproto (lua_State *L, const Proto *src) {$/;"	f	file:
close	.\service-src\service_logger.c	/^	int close;\/\/release时是否需要调用fclose$/;"	m	struct:logger	file:
close	.\skynet-src\socket_server.c	/^		struct request_close close;$/;"	m	union:request_package::__anon25	typeref:struct:request_package::__anon25::request_close	file:
close_agent	.\examples\watchdog.lua	/^local function close_agent(fd)$/;"	f
close_channel_socket	.\lualib\socketchannel.lua	/^local function close_channel_socket(self)$/;"	f
close_fd	.\lualib\snax\gateserver.lua	/^	local function close_fd(fd)$/;"	f
close_fd	.\service\gate.lua	/^local function close_fd(fd)$/;"	f
close_func	.\3rd\lua\lparser.c	/^static void close_func (LexState *ls) {$/;"	f	file:
close_harbor	.\service-src\service_harbor.c	/^close_harbor(struct harbor *h, int id) {$/;"	f	file:
close_socket	.\skynet-src\socket_server.c	/^close_socket(struct socket_server *ss, struct request_close *request, struct socket_message *result) {$/;"	f	file:
close_state	.\3rd\lua\lstate.c	/^static void close_state (lua_State *L) {$/;"	f	file:
closeaddr	.\3rd\lpeg\lpcap.c	17;"	d	file:
closef	.\3rd\lua\lauxlib.h	/^  lua_CFunction closef;  \/* to close stream (NULL for closed streams) *\/$/;"	m	struct:luaL_Stream
closegoto	.\3rd\lua\lparser.c	/^static void closegoto (LexState *ls, int g, Labeldesc *label) {$/;"	f	file:
closelistfield	.\3rd\lua\lparser.c	/^static void closelistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	file:
cluster.call	.\lualib\cluster.lua	/^function cluster.call(node, address, ...)$/;"	f
cluster.open	.\lualib\cluster.lua	/^function cluster.open(port)$/;"	f
cluster.proxy	.\lualib\cluster.lua	/^function cluster.proxy(node, name)$/;"	f
cluster.reload	.\lualib\cluster.lua	/^function cluster.reload()$/;"	f
clvalue	.\3rd\lua\lobject.h	160;"	d
cmd.GLAUNCH	.\service\service_mgr.lua	/^	function cmd.GLAUNCH(name, ...)$/;"	f
cmd.GQUERY	.\service\service_mgr.lua	/^	function cmd.GQUERY(name, ...)$/;"	f
cmd.LAUNCH	.\service\service_mgr.lua	/^function cmd.LAUNCH(service_name, subname, ...)$/;"	f
cmd.LIST	.\service\service_mgr.lua	/^	function cmd.LIST()$/;"	f
cmd.QUERY	.\service\service_mgr.lua	/^function cmd.QUERY(service_name, subname)$/;"	f
cmd.REPORT	.\service\service_mgr.lua	/^	function cmd.REPORT(m)$/;"	f
cmd_abort	.\skynet-src\skynet_server.c	/^cmd_abort(struct skynet_context * context, const char * param) {$/;"	f	file:
cmd_endless	.\skynet-src\skynet_server.c	/^cmd_endless(struct skynet_context * context, const char * param) {$/;"	f	file:
cmd_exit	.\skynet-src\skynet_server.c	/^cmd_exit(struct skynet_context * context, const char * param) {$/;"	f	file:
cmd_funcs	.\skynet-src\skynet_server.c	/^static struct command_func cmd_funcs[] = {$/;"	v	typeref:struct:command_func	file:
cmd_getenv	.\skynet-src\skynet_server.c	/^cmd_getenv(struct skynet_context * context, const char * param) {$/;"	f	file:
cmd_kill	.\skynet-src\skynet_server.c	/^cmd_kill(struct skynet_context * context, const char * param) {$/;"	f	file:
cmd_launch	.\skynet-src\skynet_server.c	/^cmd_launch(struct skynet_context * context, const char * param) {$/;"	f	file:
cmd_logoff	.\skynet-src\skynet_server.c	/^cmd_logoff(struct skynet_context * context, const char * param) {$/;"	f	file:
cmd_logon	.\skynet-src\skynet_server.c	/^cmd_logon(struct skynet_context * context, const char * param) {$/;"	f	file:
cmd_monitor	.\skynet-src\skynet_server.c	/^cmd_monitor(struct skynet_context * context, const char * param) {$/;"	f	file:
cmd_mqlen	.\skynet-src\skynet_server.c	/^cmd_mqlen(struct skynet_context * context, const char * param) {$/;"	f	file:
cmd_name	.\skynet-src\skynet_server.c	/^cmd_name(struct skynet_context * context, const char * param) {$/;"	f	file:
cmd_now	.\skynet-src\skynet_server.c	/^cmd_now(struct skynet_context * context, const char * param) {$/;"	f	file:
cmd_query	.\skynet-src\skynet_server.c	/^cmd_query(struct skynet_context * context, const char * param) {$/;"	f	file:
cmd_reg	.\skynet-src\skynet_server.c	/^cmd_reg(struct skynet_context * context, const char * param) {$/;"	f	file:
cmd_setenv	.\skynet-src\skynet_server.c	/^cmd_setenv(struct skynet_context * context, const char * param) {$/;"	f	file:
cmd_starttime	.\skynet-src\skynet_server.c	/^cmd_starttime(struct skynet_context * context, const char * param) {$/;"	f	file:
cmd_timeout	.\skynet-src\skynet_server.c	/^cmd_timeout(struct skynet_context * context, const char * param) {$/;"	f	file:
co 	.\lualib\skynet.lua	/^		co = coroutine.create(function(...) --创建协程 哪里第一次resume协程？(在raw_dispatch_message)因为协程创建后是挂起状态，即不自动运行$/;"	f
co_create	.\lualib\skynet.lua	/^local function co_create(f) --创建协程或者从协程池拿出一个协程$/;"	f
co_funcs	.\3rd\lua\lcorolib.c	/^static const luaL_Reg co_funcs[] = {$/;"	v	file:
code	.\3rd\lpeg\lptree.h	/^  union Instruction *code;$/;"	m	struct:Pattern	typeref:union:Pattern::Instruction
code	.\3rd\lpeg\lpvm.h	/^    byte code;$/;"	m	struct:Instruction::Inst
code	.\3rd\lua\lobject.h	/^  Instruction *code;$/;"	m	struct:SharedProto
code_label	.\3rd\lua\lcode.c	/^static int code_label (FuncState *fs, int A, int b, int jump) {$/;"	f	file:
codeand	.\3rd\lpeg\lpcode.c	/^static void codeand (CompileState *compst, TTree *tree, int tt) {$/;"	f	file:
codearith	.\3rd\lua\lcode.c	/^static void codearith (FuncState *fs, OpCode op,$/;"	f	file:
codebehind	.\3rd\lpeg\lpcode.c	/^static void codebehind (CompileState *compst, TTree *tree) {$/;"	f	file:
codecache	.\3rd\lua\lauxlib.c	/^struct codecache {$/;"	s	file:
codecache	.\service-src\service_snlua.c	/^codecache(lua_State *L) {$/;"	f	file:
codecache	.\service-src\service_snlua.c	23;"	d	file:
codecall	.\3rd\lpeg\lpcode.c	/^static void codecall (CompileState *compst, TTree *call) {$/;"	f	file:
codecapture	.\3rd\lpeg\lpcode.c	/^static void codecapture (CompileState *compst, TTree *tree, int tt,$/;"	f	file:
codechar	.\3rd\lpeg\lpcode.c	/^static void codechar (CompileState *compst, int c, int tt) {$/;"	f	file:
codecharset	.\3rd\lpeg\lpcode.c	/^static void codecharset (CompileState *compst, const byte *cs, int tt) {$/;"	f	file:
codechoice	.\3rd\lpeg\lpcode.c	/^static void codechoice (CompileState *compst, TTree *p1, TTree *p2, int opt,$/;"	f	file:
codeclosure	.\3rd\lua\lparser.c	/^static void codeclosure (LexState *ls, expdesc *v) {$/;"	f	file:
codecomp	.\3rd\lua\lcode.c	/^static void codecomp (FuncState *fs, OpCode op, int cond, expdesc *e1,$/;"	f	file:
codeextraarg	.\3rd\lua\lcode.c	/^static int codeextraarg (FuncState *fs, int a) {$/;"	f	file:
codegen	.\3rd\lpeg\lpcode.c	/^static void codegen (CompileState *compst, TTree *tree, int opt, int tt,$/;"	f	file:
codegrammar	.\3rd\lpeg\lpcode.c	/^static void codegrammar (CompileState *compst, TTree *grammar) {$/;"	f	file:
codenot	.\3rd\lpeg\lpcode.c	/^static void codenot (CompileState *compst, TTree *tree) {$/;"	f	file:
codenot	.\3rd\lua\lcode.c	/^static void codenot (FuncState *fs, expdesc *e) {$/;"	f	file:
coderep	.\3rd\lpeg\lpcode.c	/^static void coderep (CompileState *compst, TTree *tree, int opt,$/;"	f	file:
coderuntime	.\3rd\lpeg\lpcode.c	/^static void coderuntime (CompileState *compst, TTree *tree, int tt) {$/;"	f	file:
codeseq1	.\3rd\lpeg\lpcode.c	/^static int codeseq1 (CompileState *compst, TTree *p1, TTree *p2,$/;"	f	file:
codesize	.\3rd\lpeg\lptree.h	/^  int codesize;$/;"	m	struct:Pattern
codestream	.\3rd\lua-md5\md5lib.c	/^static void codestream (lua_State *L, const char *msg, size_t lmsg,$/;"	f	file:
codestring	.\3rd\lua\lparser.c	/^static void codestring (LexState *ls, expdesc *e, TString *s) {$/;"	f	file:
codetestset	.\3rd\lpeg\lpcode.c	/^static int codetestset (CompileState *compst, Charset *cs, int e) {$/;"	f	file:
collect_all_uv	.\lualib\snax\hotfix.lua	/^local function collect_all_uv(funcs)$/;"	f
collect_uv	.\lualib\snax\hotfix.lua	/^local function collect_uv(f , uv, env)$/;"	f
collectargs	.\3rd\lua\lua.c	/^static int collectargs (char **argv, int *args) {$/;"	f	file:
collectobj	.\service\sharedatad.lua	/^local function collectobj()$/;"	f
collectrules	.\3rd\lpeg\lptree.c	/^static int collectrules (lua_State *L, int arg, int *totalsize) {$/;"	f	file:
collectvalidlines	.\3rd\lua\ldebug.c	/^static void collectvalidlines (lua_State *L, Closure *f) {$/;"	f	file:
combine	.\3rd\lua\luac.c	/^static const Proto* combine(lua_State* L, int n)$/;"	f	file:
command.DEL	.\service\multicastd.lua	/^function command.DEL(source, c)$/;"	f
command.DELR	.\service\multicastd.lua	/^function command.DELR(source, c)$/;"	f
command.ERROR	.\service\launcher.lua	/^function command.ERROR(address)$/;"	f
command.GC	.\service\launcher.lua	/^function command.GC()$/;"	f
command.GET	.\examples\simpledb.lua	/^function command.GET(key)$/;"	f
command.KILL	.\service\launcher.lua	/^function command.KILL(_, handle)$/;"	f
command.LAUNCH	.\service\launcher.lua	/^function command.LAUNCH(_, service, ...) --接收到启动消息$/;"	f
command.LAUNCHOK	.\service\launcher.lua	/^function command.LAUNCHOK(address)$/;"	f
command.LIST	.\service\launcher.lua	/^function command.LIST()$/;"	f
command.LOGLAUNCH	.\service\launcher.lua	/^function command.LOGLAUNCH(_, service, ...)$/;"	f
command.MEM	.\service\launcher.lua	/^function command.MEM()$/;"	f
command.NEW	.\service\multicastd.lua	/^function command.NEW()$/;"	f
command.PUB	.\service\multicastd.lua	/^function command.PUB(source, c, pack, size)$/;"	f
command.QUERY	.\service\datacenterd.lua	/^function command.QUERY(key, ...)$/;"	f
command.REMOVE	.\service\launcher.lua	/^function command.REMOVE(_, handle)$/;"	f
command.SET	.\examples\simpledb.lua	/^function command.SET(key, value)$/;"	f
command.STAT	.\service\launcher.lua	/^function command.STAT()$/;"	f
command.SUB	.\service\multicastd.lua	/^function command.SUB(source, c)$/;"	f
command.SUBR	.\service\multicastd.lua	/^function command.SUBR(source, c)$/;"	f
command.UPDATE	.\service\datacenterd.lua	/^function command.UPDATE(...)$/;"	f
command.USUB	.\service\multicastd.lua	/^function command.USUB(source, c)$/;"	f
command.USUBR	.\service\multicastd.lua	/^function command.USUBR(source, c)$/;"	f
command.listen	.\service\clusterd.lua	/^function command.listen(source, addr, port)$/;"	f
command.proxy	.\service\clusterd.lua	/^function command.proxy(source, node, name)$/;"	f
command.reload	.\service\clusterd.lua	/^function command.reload()$/;"	f
command.req	.\service\clusterd.lua	/^function command.req(...)$/;"	f
command.socket	.\service\clusterd.lua	/^function command.socket(source, subcmd, fd, msg)$/;"	f
command:disconnect	.\lualib\redis.lua	/^function command:disconnect()$/;"	f
command:exists	.\lualib\redis.lua	/^function command:exists(key)$/;"	f
command:sismember	.\lualib\redis.lua	/^function command:sismember(key, value)$/;"	f
command_func	.\skynet-src\skynet_server.c	/^struct command_func {$/;"	s	file:
compile	.\3rd\lpeg\lpcode.c	/^Instruction *compile (lua_State *L, Pattern *p) {$/;"	f
compile 	.\3rd\lpeg\re.lua	/^local function compile (p, defs)$/;"	f
compose_message	.\lualib\redis.lua	/^local function compose_message(cmd, msg)$/;"	f
computesizes	.\3rd\lua\ltable.c	/^static int computesizes (int nums[], int *narray) {$/;"	f	file:
concattable	.\3rd\lpeg\lptree.c	/^static int concattable (lua_State *L, int idx1, int idx2) {$/;"	f	file:
cond	.\3rd\lua\lparser.c	/^static int cond (LexState *ls) {$/;"	f	file:
cond	.\skynet-src\skynet_start.c	/^	pthread_cond_t cond;\/\/条件锁	$/;"	m	struct:monitor	file:
condchangemem	.\3rd\lua\llimits.h	303;"	d
condchangemem	.\3rd\lua\llimits.h	305;"	d
condjump	.\3rd\lua\lcode.c	/^static int condjump (FuncState *fs, OpCode op, int A, int B, int C) {$/;"	f	file:
condmovestack	.\3rd\lua\llimits.h	296;"	d
condmovestack	.\3rd\lua\llimits.h	299;"	d
conf.box	.\lualib\sharedata\corelib.lua	/^function conf.box(obj)$/;"	f
conf.next	.\lualib\sharedata\corelib.lua	/^function conf.next(obj, key)$/;"	f
conf.update	.\lualib\sharedata\corelib.lua	/^function conf.update(self, pointer)$/;"	f
conf_ipairs	.\lualib\sharedata\corelib.lua	/^local function conf_ipairs(self, index)$/;"	f
conn	.\service-src\service_gate.c	/^	struct connection *conn;$/;"	m	struct:gate	typeref:struct:gate::connection	file:
connect	.\lualib\socket.lua	/^local function connect(id, func)$/;"	f
connect_backup	.\lualib\socketchannel.lua	/^local function connect_backup(self)$/;"	f
connect_once	.\lualib\socketchannel.lua	/^local function connect_once(self)$/;"	f
connect_slave	.\service\cslave.lua	/^local function connect_slave(slave_id, address)$/;"	f
connection	.\lualib-src\lua-mongo.c	/^struct connection {$/;"	s	file:
connection	.\service-src\service_gate.c	/^struct connection {$/;"	s	file:
console_main_loop	.\service\console.lua	/^local function console_main_loop()$/;"	f
console_main_loop	.\service\debug_console.lua	/^local function console_main_loop(stdin, print)$/;"	f
constfolding	.\3rd\lua\lcode.c	/^static int constfolding (OpCode op, expdesc *e1, expdesc *e2) {$/;"	f	file:
constructor	.\3rd\lua\lparser.c	/^static void constructor (LexState *ls, expdesc *t) {$/;"	f	file:
context	.\lualib-src\lua-sharedata.c	/^struct context {$/;"	s	file:
context_dec	.\skynet-src\skynet_server.c	/^context_dec() {\/\/上下文计数减少$/;"	f	file:
context_inc	.\skynet-src\skynet_server.c	/^context_inc() {\/\/上下文计数增加$/;"	f	file:
convergeephemerons	.\3rd\lua\lgc.c	/^static void convergeephemerons (global_State *g) {$/;"	f	file:
convert.protocol	.\lualib\sprotoparser.lua	/^function convert.protocol(all, obj)$/;"	f
convert.type	.\lualib\sprotoparser.lua	/^function convert.type(all, obj)$/;"	f
convert_stringmap	.\lualib-src\lua-sharedata.c	/^convert_stringmap(struct context *ctx, struct table *tbl) {$/;"	f	file:
converte	.\3rd\lua-md5\md5.c	/^static int converte (WORD32 *x, const char *pt, int num, int old_status) {$/;"	f	file:
convtable	.\lualib-src\lua-sharedata.c	/^convtable(lua_State *L) {$/;"	f	file:
copy	.\lualib-src\lua-stm.c	/^	struct stm_copy * copy;$/;"	m	struct:stm_object	typeref:struct:stm_object::stm_copy	file:
copy_name	.\skynet-src\skynet_server.c	/^copy_name(char name[GLOBALNAME_LENGTH], const char * addr) {$/;"	f	file:
copyktable	.\3rd\lpeg\lptree.c	/^static void copyktable (lua_State *L, int idx) {$/;"	f	file:
core.sumhexa 	.\lualib\md5.lua	/^function core.sumhexa (k)$/;"	f
correctassociativity	.\3rd\lpeg\lptree.c	/^static void correctassociativity (TTree *tree) {$/;"	f	file:
correctcalls	.\3rd\lpeg\lpcode.c	/^static void correctcalls (CompileState *compst, int *positions,$/;"	f	file:
correctkeys	.\3rd\lpeg\lptree.c	/^static void correctkeys (TTree *tree, int n) {$/;"	f	file:
correctstack	.\3rd\lua\ldo.c	/^static void correctstack (lua_State *L, TValue *oldstack) {$/;"	f	file:
count	.\lualib-src\lsha1.c	/^	uint32_t count[2];$/;"	m	struct:__anon23	file:
count	.\lualib\snax\interface.lua	/^		local function count( _, name, func)$/;"	f
count	.\service-src\hashid.h	/^	int count;$/;"	m	struct:hashid
count	.\skynet-src\skynet_module.c	/^	int count;\/\/模块数$/;"	m	struct:modules	file:
count	.\skynet-src\skynet_start.c	/^	int count;\/\/监视者计数$/;"	m	struct:monitor	file:
count_array	.\lualib-src\sproto\sproto.c	/^count_array(const uint8_t * stream) {$/;"	f	file:
count_lines	.\lualib\sprotoparser.lua	/^local function count_lines(_,pos, parser_state)$/;"	f
countint	.\3rd\lua\ltable.c	/^static int countint (const TValue *key, int *nums) {$/;"	f	file:
countlevels	.\3rd\lua\lauxlib.c	/^static int countlevels (lua_State *L) {$/;"	f	file:
countsize	.\lualib-src\lua-sharedata.c	/^countsize(lua_State *L, int sizearray) {$/;"	f	file:
cp	.\3rd\lpeg\lpcap.c	/^    Capture *cp;  \/* if not a string, respective capture *\/$/;"	m	union:StrAux::__anon1	file:
create	.\skynet-src\skynet_module.h	/^	skynet_dl_create create;\/\/创建函数$/;"	m	struct:skynet_module
create_from_bundle	.\lualib-src\sproto\sproto.c	/^create_from_bundle(struct sproto *s, const uint8_t * stream, size_t sz) {$/;"	f	file:
create_thread	.\skynet-src\skynet_start.c	/^create_thread(pthread_t *thread, void *(*start_routine) (void *), void *arg) {$/;"	f	file:
create_udp_object	.\lualib\socket.lua	/^local function create_udp_object(id, cb)$/;"	f
createcat	.\3rd\lpeg\lptree.c	/^static void createcat (lua_State *L, const char *catname, int (catf) (int)) {$/;"	f	file:
createmeta	.\3rd\lua\liolib.c	/^static void createmeta (lua_State *L) {$/;"	f	file:
createmetatable	.\3rd\lua\lstrlib.c	/^static void createmetatable (lua_State *L) {$/;"	f	file:
createsearcherstable	.\3rd\lua\loadlib.c	/^static void createsearcherstable (lua_State *L) {$/;"	f	file:
createstdfile	.\3rd\lua\liolib.c	/^static void createstdfile (lua_State *L, FILE *f, const char *k,$/;"	f	file:
createstrobj	.\3rd\lua\lstring.c	/^static TString *createstrobj (lua_State *L, const char *str, size_t l,$/;"	f	file:
crypt	.\3rd\lua-md5\md5lib.c	/^static int crypt (lua_State *L) {$/;"	f	file:
cs	.\3rd\lpeg\lptypes.h	/^  byte cs[CHARSETSIZE];$/;"	m	struct:Charset
cs2str 	.\3rd\lpeg\test.lua	/^local function cs2str (c)$/;"	f
cs_complement	.\3rd\lpeg\lpcode.c	/^static void cs_complement (Charset *cs) {$/;"	f	file:
cs_disjoint	.\3rd\lpeg\lpcode.c	/^static int cs_disjoint (const Charset *cs1, const Charset *cs2) {$/;"	f	file:
cs_equal	.\3rd\lpeg\lpcode.c	/^static int cs_equal (const byte *cs1, const byte *cs2) {$/;"	f	file:
csv	.\3rd\lpeg\lpeg.html	/^function csv (s)$/;"	f
ctb	.\3rd\lua\lobject.h	64;"	d
ctrl	.\lualib-src\lua-sharedata.c	/^struct ctrl {$/;"	s	file:
ctrl_cmd	.\skynet-src\socket_server.c	/^ctrl_cmd(struct socket_server *ss, struct socket_message *result) {$/;"	f	file:
ctx	.\3rd\lua\lstate.h	/^      int ctx;  \/* context info. in case of yields *\/$/;"	m	struct:CallInfo::__anon17::__anon19
ctx	.\lualib-src\lua-skynet.c	/^	struct skynet_context * ctx;$/;"	m	struct:snlua	typeref:struct:snlua::skynet_context	file:
ctx	.\service-src\service_gate.c	/^	struct skynet_context *ctx;$/;"	m	struct:gate	typeref:struct:gate::skynet_context	file:
ctx	.\service-src\service_harbor.c	/^	struct skynet_context *ctx;$/;"	m	struct:harbor	typeref:struct:harbor::skynet_context	file:
ctx	.\service-src\service_snlua.c	/^	struct skynet_context * ctx;\/\/skynet上下文$/;"	m	struct:snlua	typeref:struct:snlua::skynet_context	file:
currIsNewline	.\3rd\lua\llex.c	32;"	d	file:
current	.\3rd\lua\llex.h	/^  int current;  \/* current character (charint) *\/$/;"	m	struct:LexState
current	.\lualib-src\lua-seri.c	/^	struct block * current;$/;"	m	struct:write_block	typeref:struct:write_block::block	file:
current	.\lualib-src\sproto\sproto.c	/^	struct chunk * current;$/;"	m	struct:pool	typeref:struct:pool::chunk	file:
current	.\skynet-src\skynet_timer.c	/^	uint32_t current;$/;"	m	struct:timer	file:
current_point	.\skynet-src\skynet_timer.c	/^	uint64_t current_point;$/;"	m	struct:timer	file:
current_used	.\lualib-src\sproto\sproto.c	/^	int current_used;$/;"	m	struct:pool	file:
currentline	.\3rd\lua\ldebug.c	/^static int currentline (CallInfo *ci) {$/;"	f	file:
currentline	.\3rd\lua\lua.h	/^  int currentline;	\/* (l) *\/$/;"	m	struct:lua_Debug
currentpc	.\3rd\lua\ldebug.c	/^static int currentpc (CallInfo *ci) {$/;"	f	file:
currentwhite	.\3rd\lua\lstate.h	/^  lu_byte currentwhite;$/;"	m	struct:global_State
cursor_id	.\lualib-src\lua-mongo.c	/^	int32_t cursor_id[2];$/;"	m	struct:response	file:
d_	.\3rd\lua\lobject.h	307;"	d
d_	.\3rd\lua\lobject.h	318;"	d
daemon	.\skynet-src\skynet_imp.h	/^	const char * daemon;		\/\/守护进程配置$/;"	m	struct:skynet_config
daemon_exit	.\skynet-src\skynet_daemon.c	/^daemon_exit(const char *pidfile) {$/;"	f
daemon_init	.\skynet-src\skynet_daemon.c	/^daemon_init(const char *pidfile) {$/;"	f
data	.\3rd\lua\ldump.c	/^ void* data;$/;"	m	struct:__anon4	file:
data	.\3rd\lua\lzio.h	/^  void* data;			\/* additional data *\/$/;"	m	struct:Zio
data	.\lualib-src\lua-multicast.c	/^	void *data;$/;"	m	struct:mc_package	file:
data	.\service-src\service_harbor.c	/^	struct harbor_msg * data;$/;"	m	struct:harbor_msg_queue	typeref:struct:harbor_msg_queue::harbor_msg	file:
data	.\skynet-src\skynet_mq.h	/^	void * data;	\/\/数据$/;"	m	struct:skynet_message
data	.\skynet-src\socket_server.h	/^	char * data;$/;"	m	struct:socket_message
databuffer	.\service-src\databuffer.h	/^struct databuffer {$/;"	s
databuffer_clear	.\service-src\databuffer.h	/^databuffer_clear(struct databuffer *db, struct messagepool *mp) {$/;"	f
databuffer_push	.\service-src\databuffer.h	/^databuffer_push(struct databuffer *db, struct messagepool *mp, void *data, int sz) {$/;"	f
databuffer_read	.\service-src\databuffer.h	/^databuffer_read(struct databuffer *db, struct messagepool *mp, void * buffer, int sz) {$/;"	f
databuffer_readheader	.\service-src\databuffer.h	/^databuffer_readheader(struct databuffer *db, struct messagepool *mp, int header_size) {$/;"	f
databuffer_reset	.\service-src\databuffer.h	/^databuffer_reset(struct databuffer *db) {$/;"	f
datacenter.get	.\lualib\datacenter.lua	/^function datacenter.get(...)$/;"	f
datacenter.set	.\lualib\datacenter.lua	/^function datacenter.set(...)$/;"	f
datacenter.wait	.\lualib\datacenter.lua	/^function datacenter.wait(...)$/;"	f
db_debug	.\3rd\lua\ldblib.c	/^static int db_debug (lua_State *L) {$/;"	f	file:
db_gethook	.\3rd\lua\ldblib.c	/^static int db_gethook (lua_State *L) {$/;"	f	file:
db_getinfo	.\3rd\lua\ldblib.c	/^static int db_getinfo (lua_State *L) {$/;"	f	file:
db_getlocal	.\3rd\lua\ldblib.c	/^static int db_getlocal (lua_State *L) {$/;"	f	file:
db_getmetatable	.\3rd\lua\ldblib.c	/^static int db_getmetatable (lua_State *L) {$/;"	f	file:
db_getregistry	.\3rd\lua\ldblib.c	/^static int db_getregistry (lua_State *L) {$/;"	f	file:
db_getupvalue	.\3rd\lua\ldblib.c	/^static int db_getupvalue (lua_State *L) {$/;"	f	file:
db_getuservalue	.\3rd\lua\ldblib.c	/^static int db_getuservalue (lua_State *L) {$/;"	f	file:
db_sethook	.\3rd\lua\ldblib.c	/^static int db_sethook (lua_State *L) {$/;"	f	file:
db_setlocal	.\3rd\lua\ldblib.c	/^static int db_setlocal (lua_State *L) {$/;"	f	file:
db_setmetatable	.\3rd\lua\ldblib.c	/^static int db_setmetatable (lua_State *L) {$/;"	f	file:
db_setupvalue	.\3rd\lua\ldblib.c	/^static int db_setupvalue (lua_State *L) {$/;"	f	file:
db_setuservalue	.\3rd\lua\ldblib.c	/^static int db_setuservalue (lua_State *L) {$/;"	f	file:
db_traceback	.\3rd\lua\ldblib.c	/^static int db_traceback (lua_State *L) {$/;"	f	file:
db_upvalueid	.\3rd\lua\ldblib.c	/^static int db_upvalueid (lua_State *L) {$/;"	f	file:
db_upvaluejoin	.\3rd\lua\ldblib.c	/^static int db_upvaluejoin (lua_State *L) {$/;"	f	file:
dbgcmd.EXIT	.\lualib\skynet\debug.lua	/^function dbgcmd.EXIT()$/;"	f
dbgcmd.GC	.\lualib\skynet\debug.lua	/^function dbgcmd.GC()$/;"	f
dbgcmd.INFO	.\lualib\skynet\debug.lua	/^function dbgcmd.INFO()$/;"	f
dbgcmd.MEM	.\lualib\skynet\debug.lua	/^function dbgcmd.MEM()$/;"	f
dbgcmd.RUN	.\lualib\skynet\debug.lua	/^function dbgcmd.RUN(source, filename)$/;"	f
dbgcmd.STAT	.\lualib\skynet\debug.lua	/^function dbgcmd.STAT()$/;"	f
dbgcmd.TASK	.\lualib\skynet\debug.lua	/^function dbgcmd.TASK()$/;"	f
dbgcmd.TERM	.\lualib\skynet\debug.lua	/^function dbgcmd.TERM(service)$/;"	f
dblib	.\3rd\lua\ldblib.c	/^static const luaL_Reg dblib[] = {$/;"	v	file:
dead_loop	.\test\testdeadloop.lua	/^local function dead_loop()$/;"	f
deadvalue	.\3rd\lua\lobject.h	168;"	d
decode	.\lualib-src\sproto\lsproto.c	/^decode(void *ud, const char *tagname, int type, int index, struct sproto_type *st, void *value, int length) {$/;"	f	file:
decode	.\lualib\http\url.lua	/^local function decode(str)$/;"	f
decode_array	.\lualib-src\sproto\sproto.c	/^decode_array(sproto_callback cb, void *ud, struct field *f, uint8_t * stream) {$/;"	f	file:
decode_array_object	.\lualib-src\sproto\sproto.c	/^decode_array_object(sproto_callback cb, void *ud, struct field *f, uint8_t * stream, int sz) {$/;"	f	file:
decode_func	.\lualib\http\url.lua	/^local function decode_func(c)$/;"	f
decode_ud	.\lualib-src\sproto\lsproto.c	/^struct decode_ud {$/;"	s	file:
decodestream	.\3rd\lua-md5\md5lib.c	/^static void decodestream (lua_State *L, const char *cypher, size_t lcypher,$/;"	f	file:
decpoint	.\3rd\lua\llex.h	/^  char decpoint;  \/* locale decimal point *\/$/;"	m	struct:LexState
decrypt	.\3rd\lua-md5\md5lib.c	/^static int decrypt (lua_State *L) {$/;"	f	file:
deep	.\lualib-src\sproto\lsproto.c	/^	int deep;$/;"	m	struct:decode_ud	file:
deep	.\lualib-src\sproto\lsproto.c	/^	int deep;$/;"	m	struct:encode_ud	file:
default_conf	.\lualib\multicast.lua	/^local function default_conf(conf)$/;"	f
delete_context	.\skynet-src\skynet_server.c	/^delete_context(struct skynet_context *ctx) {$/;"	f	file:
delete_tbl	.\lualib-src\lua-sharedata.c	/^delete_tbl(struct table *tbl) {$/;"	f	file:
des_crypt	.\lualib-src\lua-crypt.c	/^des_crypt( const uint32_t SK[32], const uint8_t input[8], uint8_t output[8] ) {$/;"	f	file:
des_key	.\lualib-src\lua-crypt.c	/^des_key(lua_State *L, uint32_t SK[32]) {$/;"	f	file:
des_main_ks	.\lualib-src\lua-crypt.c	/^des_main_ks( uint32_t SK[32], const uint8_t key[8] ) {$/;"	f	file:
destination	.\service-src\service_harbor.c	/^	uint32_t destination;$/;"	m	struct:remote_message_header	file:
destination	.\skynet-src\skynet_harbor.h	/^	struct remote_name destination;$/;"	m	struct:remote_message	typeref:struct:remote_message::remote_name
destination	.\skynet-src\skynet_monitor.c	/^	uint32_t destination;	\/\/目标$/;"	m	struct:skynet_monitor	file:
diff_time	.\lualib-src\lua-profile.c	/^diff_time(double start) {\/\/计算时间的差值$/;"	f	file:
digest	.\3rd\lua-md5\md5.c	/^static void digest(const WORD32 *m, WORD32 *d) {$/;"	f	file:
dirty	.\lualib-src\lua-sharedata.c	/^	int dirty;$/;"	m	struct:state	file:
discharge2anyreg	.\3rd\lua\lcode.c	/^static void discharge2anyreg (FuncState *fs, expdesc *e) {$/;"	f	file:
discharge2reg	.\3rd\lua\lcode.c	/^static void discharge2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	file:
dischargejpc	.\3rd\lua\lcode.c	/^static void dischargejpc (FuncState *fs) {$/;"	f	file:
dispatch	.\service\snaxd.lua	/^local function dispatch(f, ...)$/;"	f
dispatch 	.\examples\agent.lua	/^	dispatch = function (_, _, type, ...)$/;"	f
dispatch 	.\examples\simplemonitor.lua	/^	dispatch = function(_, address)$/;"	f
dispatch 	.\lualib\mqueue.lua	/^	dispatch = function(session, from, ...)$/;"	f
dispatch 	.\lualib\snax\gateserver.lua	/^		dispatch = function (_, _, q, type, ...)$/;"	f
dispatch 	.\lualib\socket.lua	/^	dispatch = function (_, _, t, ...)$/;"	f
dispatch 	.\service\launcher.lua	/^	dispatch = function(session, address , cmd)$/;"	f
dispatch 	.\test\testmulticast.lua	/^			dispatch = function (channel, source, ...)$/;"	f
dispatch 	.\test\testmulticast2.lua	/^		dispatch = function(...) print("======>", ...) end,$/;"	f
dispatch_by_order	.\lualib\socketchannel.lua	/^local function dispatch_by_order(self)$/;"	f
dispatch_by_session	.\lualib\socketchannel.lua	/^local function dispatch_by_session(self)$/;"	f
dispatch_error_queue	.\lualib\skynet.lua	/^local function dispatch_error_queue()$/;"	f
dispatch_function	.\lualib\socketchannel.lua	/^local function dispatch_function(self)$/;"	f
dispatch_list	.\skynet-src\skynet_timer.c	/^dispatch_list(struct timer_node *current) {$/;"	f	file:
dispatch_message	.\lualib\skynet.lua	/^local function dispatch_message(...) --派发消息回调$/;"	f
dispatch_message	.\service-src\service_gate.c	/^dispatch_message(struct gate *g, struct connection *c, int id, void * data, int sz) {$/;"	f	file:
dispatch_message	.\skynet-src\skynet_server.c	/^dispatch_message(struct skynet_context *ctx, struct skynet_message *msg) {$/;"	f	file:
dispatch_msg	.\lualib\snax\gateserver.lua	/^	local function dispatch_msg(fd, msg, sz)$/;"	f
dispatch_name_queue	.\service-src\service_harbor.c	/^dispatch_name_queue(struct harbor *h, struct keyvalue * node) {$/;"	f	file:
dispatch_package	.\examples\client.lua	/^local function dispatch_package()$/;"	f
dispatch_queue	.\lualib\snax\gateserver.lua	/^	local function dispatch_queue()$/;"	f
dispatch_queue	.\service-src\service_harbor.c	/^dispatch_queue(struct harbor *h, int id) {$/;"	f	file:
dispatch_reply	.\lualib\mongo.lua	/^local function dispatch_reply(so)$/;"	f
dispatch_slave	.\service\cmaster.lua	/^local function dispatch_slave(fd)$/;"	f
dispatch_socket_message	.\service-src\service_gate.c	/^dispatch_socket_message(struct gate *g, const struct skynet_socket_message * message, int sz) {$/;"	f	file:
dispatch_subscribe	.\lualib\multicast.lua	/^local function dispatch_subscribe(channel, source, pack, msg, sz)$/;"	f
dispatch_wakeup	.\lualib\skynet.lua	/^local function dispatch_wakeup() --唤醒协程队列$/;"	f
do_auth	.\lualib\snax\msgserver.lua	/^	local function do_auth(fd, message, addr)$/;"	f
do_bind	.\skynet-src\socket_server.c	/^do_bind(const char *host, int port, int protocol, int *family) {$/;"	f	file:
do_func	.\lualib\mqueue.lua	/^local function do_func(f, msg)$/;"	f
do_func	.\service\snaxd.lua	/^local function do_func(f, msg)$/;"	f
do_listen	.\skynet-src\socket_server.c	/^do_listen(const char * host, int port, int backlog) {$/;"	f	file:
do_request	.\lualib\snax\msgserver.lua	/^	local function do_request(fd, msg, sz)$/;"	f
doargs	.\3rd\lua\luac.c	/^static int doargs(int argc, char* argv[])$/;"	f	file:
docall	.\3rd\lua\lua.c	/^static int docall (lua_State *L, int narg, int nres) {$/;"	f	file:
docmd	.\service\debug_console.lua	/^local function docmd(cmdline, print)$/;"	f
document	.\lualib-src\lua-mongo.c	/^typedef void * document;$/;"	t	file:
document_length	.\lualib-src\lua-mongo.c	/^document_length(lua_State *L) {$/;"	f	file:
dofile	.\3rd\lua\lua.c	/^static int dofile (lua_State *L, const char *name) {$/;"	f	file:
dofilecont	.\3rd\lua\lbaselib.c	/^static int dofilecont (lua_State *L) {$/;"	f	file:
dojump	.\3rd\lua\lvm.c	502;"	d	file:
dolibrary	.\3rd\lua\lua.c	/^static int dolibrary (lua_State *L, const char *name) {$/;"	f	file:
donextjump	.\3rd\lua\lvm.c	508;"	d	file:
dooptions	.\3rd\lua\loadlib.c	/^static void dooptions (lua_State *L, int n) {$/;"	f	file:
dostring	.\3rd\lua\lua.c	/^static int dostring (lua_State *L, const char *s, const char *name) {$/;"	f	file:
dothecall	.\3rd\lua\lgc.c	/^static void dothecall (lua_State *L, void *ud) {$/;"	f	file:
dotty	.\3rd\lua\lua.c	/^static void dotty (lua_State *L) {$/;"	f	file:
doublecap	.\3rd\lpeg\lpvm.c	/^static Capture *doublecap (lua_State *L, Capture *cap, int captop, int ptop) {$/;"	f	file:
doublestack	.\3rd\lpeg\lpvm.c	/^static Stack *doublestack (lua_State *L, Stack **stacklimit, int ptop) {$/;"	f	file:
download	.\3rd\lpeg\lpeg.html	/^<h2><a name="download"><\/a>Download<\/h2>$/;"	a
drop_message	.\skynet-src\skynet_server.c	/^drop_message(struct skynet_message *msg, void *ud) {$/;"	f	file:
drop_t	.\skynet-src\skynet_server.c	/^struct drop_t {$/;"	s	file:
dummy	.\3rd\lua\lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for `local' udata *\/$/;"	m	union:Udata
dummy	.\3rd\lua\lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for strings *\/$/;"	m	union:TString
dummy	.\skynet-src\socket_server.c	/^	uint8_t dummy[256];$/;"	m	struct:request_package	file:
dummynode	.\3rd\lua\ltable.c	67;"	d	file:
dummynode_	.\3rd\lua\ltable.c	/^static const Node dummynode_ = {$/;"	v	file:
dump	.\test\testmysql.lua	/^local function dump(obj)$/;"	f
dumpObj 	.\test\testmysql.lua	/^    dumpObj = function(obj, level)$/;"	f
dump_c_mem	.\skynet-src\malloc_hook.c	/^dump_c_mem() {$/;"	f
dump_line	.\service\dbg.lua	/^local function dump_line(key, value)$/;"	f
dump_line	.\service\debug_console.lua	/^local function dump_line(print, key, value)$/;"	f
dump_list	.\service\dbg.lua	/^local function dump_list(list)$/;"	f
dump_list	.\service\debug_console.lua	/^local function dump_list(print, list)$/;"	f
dumping	.\3rd\lua\luac.c	/^static int dumping=1;			\/* dump bytecodes? *\/$/;"	v	file:
dyd	.\3rd\lua\ldo.c	/^  Dyndata dyd;  \/* dynamic structures used by the parser *\/$/;"	m	struct:SParser	file:
dyd	.\3rd\lua\llex.h	/^  struct Dyndata *dyd;  \/* dynamic structures used by the parser *\/$/;"	m	struct:LexState	typeref:struct:LexState::Dyndata
e	.\3rd\lpeg\lpcap.c	/^      const char *e;  \/* ... ends here *\/$/;"	m	struct:StrAux::__anon1::__anon2	file:
echo	.\test\testsocket.lua	/^local function echo(id)$/;"	f
elseif t 	.\lualib\http\httpd.lua	/^	elseif t == "function" then$/;"	f
elseif t 	.\lualib\skynet\inject.lua	/^		elseif t == "function" then$/;"	f
encode	.\lualib-src\sproto\lsproto.c	/^encode(void *ud, const char *tagname, int type, int index, struct sproto_type *st, void *value, int length) {$/;"	f	file:
encode_array	.\lualib-src\sproto\sproto.c	/^encode_array(sproto_callback cb, void *ud, struct field *f, uint8_t *data, int size) {$/;"	f	file:
encode_integer	.\lualib-src\sproto\sproto.c	/^encode_integer(uint32_t v, uint8_t * data, int size) {$/;"	f	file:
encode_integer_array	.\lualib-src\sproto\sproto.c	/^encode_integer_array(sproto_callback cb, void *ud, struct field *f, uint8_t *buffer, int size) {$/;"	f	file:
encode_string	.\lualib-src\sproto\sproto.c	/^encode_string(sproto_callback cb, void *ud, struct field *f, uint8_t *data, int size) {$/;"	f	file:
encode_struct	.\lualib-src\sproto\sproto.c	/^encode_struct(sproto_callback cb, void *ud, struct field *f, uint8_t *data, int size) {$/;"	f	file:
encode_token	.\examples\login\client.lua	/^local function encode_token(token)$/;"	f
encode_ud	.\lualib-src\sproto\lsproto.c	/^struct encode_ud {$/;"	s	file:
encode_uint64	.\lualib-src\sproto\sproto.c	/^encode_uint64(uint64_t v, uint8_t * data, int size) {$/;"	f	file:
encodeall	.\lualib\sprotoparser.lua	/^local function encodeall(r)$/;"	f
end_capture	.\3rd\lua\lstrlib.c	/^static const char *end_capture (MatchState *ms, const char *s,$/;"	f	file:
endless	.\skynet-src\skynet_server.c	/^	bool endless;					\/\/消息分发陷入死循环$/;"	m	struct:skynet_context	file:
endpc	.\3rd\lua\lobject.h	/^  int endpc;    \/* first point where variable is dead *\/$/;"	m	struct:LocVar
enterblock	.\3rd\lua\lparser.c	/^static void enterblock (FuncState *fs, BlockCnt *bl, lu_byte isloop) {$/;"	f	file:
enterlevel	.\3rd\lua\lparser.c	/^static void enterlevel (LexState *ls) {$/;"	f	file:
entersweep	.\3rd\lua\lgc.c	/^static int entersweep (lua_State *L) {$/;"	f	file:
env	.\3rd\lua\lobject.h	/^    struct Table *env;$/;"	m	struct:Udata::__anon7	typeref:struct:Udata::__anon7::Table
envid	.\lualib\snax\hotfix.lua	/^local function envid(f)$/;"	f
envn	.\3rd\lua\llex.h	/^  TString *envn;  \/* environment variable name *\/$/;"	m	struct:LexState
ephemeron	.\3rd\lua\lstate.h	/^  GCObject *ephemeron;  \/* list of ephemeron tables (weak keys) *\/$/;"	m	struct:global_State
eqcharset 	.\3rd\lpeg\test.lua	/^local function eqcharset (c1, c2)$/;"	f
eqlpeggsub 	.\3rd\lpeg\test.lua	/^function eqlpeggsub (p1, p2)$/;"	f
eqshrstr	.\3rd\lua\lstring.h	34;"	d
equalcap 	.\3rd\lpeg\re.lua	/^local function equalcap (s, i, c)$/;"	f
equalobj	.\3rd\lua\lvm.h	20;"	d
errfile	.\3rd\lua\lauxlib.c	/^static int errfile (lua_State *L, const char *what, int fnameindex) {$/;"	f	file:
errfunc	.\3rd\lua\lstate.h	/^  ptrdiff_t errfunc;  \/* current error handling function (stack index) *\/$/;"	m	struct:lua_State
errmsg 	.\3rd\lpeg\test.lua	/^local function errmsg (p, err)$/;"	f
error	.\3rd\lua\lundump.c	/^static l_noret error(LoadState* S, const char* why)$/;"	f	file:
errorJmp	.\3rd\lua\lstate.h	/^  struct lua_longjmp *errorJmp;  \/* current error recover point *\/$/;"	m	struct:lua_State	typeref:struct:lua_State::lua_longjmp
error_expected	.\3rd\lua\lparser.c	/^static l_noret error_expected (LexState *ls, int token) {$/;"	f	file:
errorlimit	.\3rd\lua\lparser.c	/^static l_noret errorlimit (FuncState *fs, int limit, const char *what) {$/;"	f	file:
escape	.\lualib\http\httpc.lua	/^local function escape(s)$/;"	f
escape_sql_str	.\lualib-src\lua_mysqlaux.c	/^escape_sql_str(unsigned char *dst, unsigned char *src, size_t size)$/;"	f	file:
escerror	.\3rd\lua\llex.c	/^static void escerror (LexState *ls, int *c, int n, const char *msg) {$/;"	f	file:
ev	.\skynet-src\socket_server.c	/^	struct event ev[MAX_EVENT];		\/\/存储已准备好读写的事件	MAX_EVENT:64$/;"	m	struct:socket_server	typeref:struct:socket_server::event	file:
eval	.\3rd\lpeg\lpeg.html	/^function eval (v1, op, v2)$/;"	f
eval	.\3rd\lpeg\lpeg.html	/^function eval (x)$/;"	f
evalExp	.\3rd\lpeg\lpeg.html	/^function evalExp (s)$/;"	f
event	.\3rd\lua\lua.h	/^  int event;$/;"	m	struct:lua_Debug
event	.\skynet-src\socket_poll.h	/^struct event {$/;"	s
event_fd	.\skynet-src\socket_server.c	/^	poll_fd event_fd;	\/\/事件池文件描述符$/;"	m	struct:socket_server	file:
event_index	.\skynet-src\socket_server.c	/^	int event_index;	\/\/事件索引$/;"	m	struct:socket_server	file:
event_n	.\skynet-src\socket_server.c	/^	int event_n;		\/\/事件数$/;"	m	struct:socket_server	file:
ex	.\3rd\lpeg\lpeg.html	/^<h2><a name="ex">Some Examples<\/a><\/h2>$/;"	a
ex	.\3rd\lpeg\re.html	/^<h2><a name="ex">Some Examples<\/a><\/h2>$/;"	a
ex_or	.\3rd\lua-md5\md5lib.c	/^static int ex_or (lua_State *L) {$/;"	f	file:
exit	.\test\pingserver.lua	/^function exit(...)$/;"	f
exp1	.\3rd\lua\lparser.c	/^static int exp1 (LexState *ls) {$/;"	f	file:
exp2reg	.\3rd\lua\lcode.c	/^static void exp2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	file:
expand64	.\lualib-src\sproto\sproto.c	/^expand64(uint32_t v) {$/;"	f	file:
expand_buffer	.\lualib-src\sproto\lsproto.c	/^expand_buffer(lua_State *L, int osz, int nsz) {$/;"	f	file:
expand_queue	.\lualib-src\lua-netpack.c	/^expand_queue(lua_State *L, struct queue *q) {$/;"	f	file:
expand_queue	.\skynet-src\skynet_mq.c	/^expand_queue(struct message_queue *q) {$/;"	f	file:
expdesc	.\3rd\lua\lparser.h	/^typedef struct expdesc {$/;"	s
expdesc	.\3rd\lua\lparser.h	/^} expdesc;$/;"	t	typeref:struct:expdesc
expire	.\skynet-src\skynet_timer.c	/^	uint32_t expire;$/;"	m	struct:timer_node	file:
expkind	.\3rd\lua\lparser.h	/^} expkind;$/;"	t	typeref:enum:__anon13
explist	.\3rd\lua\lparser.c	/^static int explist (LexState *ls, expdesc *v) {$/;"	f	file:
expr	.\3rd\lua\lparser.c	/^static void expr (LexState *ls, expdesc *v) {$/;"	f	file:
exprstat	.\3rd\lua\lparser.c	/^static void exprstat (LexState *ls) {$/;"	f	file:
extra	.\3rd\lua\lobject.h	/^    lu_byte extra;  \/* reserved words for short strings; "has hash" for longs *\/$/;"	m	struct:TString::__anon6
extra	.\3rd\lua\lstate.h	/^  ptrdiff_t extra;$/;"	m	struct:CallInfo
f	.\3rd\lua\lauxlib.c	/^  FILE *f;  \/* file being read *\/$/;"	m	struct:LoadF	file:
f	.\3rd\lua\lauxlib.h	/^  FILE *f;  \/* stream (NULL for incompletely created streams) *\/$/;"	m	struct:luaL_Stream
f	.\3rd\lua\lobject.h	/^  lua_CFunction f; \/* light C functions *\/$/;"	m	union:Value
f	.\3rd\lua\lobject.h	/^  lua_CFunction f;$/;"	m	struct:CClosure
f	.\3rd\lua\lparser.h	/^  Proto *f;  \/* current function header *\/$/;"	m	struct:FuncState
f	.\3rd\lua\lparser.h	/^  int f;  \/* patch list of `exit when false' *\/$/;"	m	struct:expdesc
f	.\lualib-src\sproto\sproto.c	/^	struct field *f;$/;"	m	struct:sproto_type	typeref:struct:sproto_type::field	file:
f 	.\3rd\lpeg\test.lua	/^  f = m.P(function () touch = touch + 1; return true end)$/;"	f
f 	.\3rd\lpeg\test.lua	/^f = function (a, ...) if a ~= "x" then return {a, ...} end end$/;"	f
f 	.\3rd\lpeg\test.lua	/^function f (x) return x + 1 end$/;"	f
f-match	.\3rd\lpeg\lpeg.html	/^<h3><a name="f-match"><\/a><code>lpeg.match (pattern, subject [, init])<\/code><\/h3>$/;"	a
f-setstack	.\3rd\lpeg\lpeg.html	/^<h3><a name="f-setstack"><\/a><code>lpeg.setmaxstack (max)<\/code><\/h3>$/;"	a
f-type	.\3rd\lpeg\lpeg.html	/^<h3><a name="f-type"><\/a><code>lpeg.type (value)<\/code><\/h3>$/;"	a
f-version	.\3rd\lpeg\lpeg.html	/^<h3><a name="f-version"><\/a><code>lpeg.version ()<\/code><\/h3>$/;"	a
f1	.\test\testdatacenter.lua	/^local function f1()$/;"	f
f2	.\test\testdatacenter.lua	/^local function f2()$/;"	f
f_call	.\3rd\lua\lapi.c	/^static void f_call (lua_State *L, void *ud) {$/;"	f	file:
f_factor 	.\3rd\lpeg\test.lua	/^local function f_factor (v1, op, v2, d)$/;"	f
f_flush	.\3rd\lua\liolib.c	/^static int f_flush (lua_State *L) {$/;"	f	file:
f_gc	.\3rd\lua\liolib.c	/^static int f_gc (lua_State *L) {$/;"	f	file:
f_lines	.\3rd\lua\liolib.c	/^static int f_lines (lua_State *L) {$/;"	f	file:
f_luaopen	.\3rd\lua\lstate.c	/^static void f_luaopen (lua_State *L, void *ud) {$/;"	f	file:
f_parser	.\3rd\lua\ldo.c	/^static void f_parser (lua_State *L, void *ud) {$/;"	f	file:
f_read	.\3rd\lua\liolib.c	/^static int f_read (lua_State *L) {$/;"	f	file:
f_seek	.\3rd\lua\liolib.c	/^static int f_seek (lua_State *L) {$/;"	f	file:
f_setvbuf	.\3rd\lua\liolib.c	/^static int f_setvbuf (lua_State *L) {$/;"	f	file:
f_term 	.\3rd\lpeg\test.lua	/^local function f_term (v1, op, v2, d)$/;"	f
f_tostring	.\3rd\lua\liolib.c	/^static int f_tostring (lua_State *L) {$/;"	f	file:
f_write	.\3rd\lua\liolib.c	/^static int f_write (lua_State *L) {$/;"	f	file:
family	.\skynet-src\socket_server.c	/^	int family;$/;"	m	struct:request_udp	file:
fasttm	.\3rd\lua\ltm.h	44;"	d
fatal	.\3rd\lua\luac.c	/^static void fatal(const char* message)$/;"	f	file:
fd	.\service-src\service_harbor.c	/^	int fd;$/;"	m	struct:slave	file:
fd	.\skynet-src\socket_server.c	/^	int fd;					\/\/对应内核分配的fd$/;"	m	struct:socket	file:
fd	.\skynet-src\socket_server.c	/^	int fd;$/;"	m	struct:request_bind	file:
fd	.\skynet-src\socket_server.c	/^	int fd;$/;"	m	struct:request_listen	file:
fd	.\skynet-src\socket_server.c	/^	int fd;$/;"	m	struct:request_udp	file:
field	.\3rd\lua\lparser.c	/^static void field (LexState *ls, struct ConsControl *cc) {$/;"	f	file:
field	.\lualib-src\sproto\sproto.c	/^struct field {$/;"	s	file:
fieldargs	.\3rd\lua\lbitlib.c	/^static int fieldargs (lua_State *L, int farg, int *width) {$/;"	f	file:
fieldsel	.\3rd\lua\lparser.c	/^static void fieldsel (LexState *ls, expdesc *v) {$/;"	f	file:
fill_header	.\lualib-src\lua-cluster.c	/^fill_header(lua_State *L, uint8_t *buf, int sz, void *msg) {$/;"	f	file:
fill_prefix	.\skynet-src\malloc_hook.c	/^fill_prefix(char* ptr) {$/;"	f	file:
fill_size	.\lualib-src\sproto\sproto.c	/^fill_size(uint8_t * data, int sz) {$/;"	f	file:
fill_uint32	.\lualib-src\lua-cluster.c	/^fill_uint32(uint8_t * buf, uint32_t n) {$/;"	f	file:
fillcolliding	.\lualib-src\lua-sharedata.c	/^fillcolliding(lua_State *L, struct context *ctx) {$/;"	f	file:
fillnocolliding	.\lualib-src\lua-sharedata.c	/^fillnocolliding(lua_State *L, struct context *ctx) {$/;"	f	file:
fillseq	.\3rd\lpeg\lptree.c	/^static void fillseq (TTree *tree, int tag, int n, const char *s) {$/;"	f	file:
filter_data	.\lualib-src\lua-netpack.c	/^filter_data(lua_State *L, int fd, uint8_t * buffer, int size) {$/;"	f	file:
filter_data_	.\lualib-src\lua-netpack.c	/^filter_data_(lua_State *L, int fd, uint8_t * buffer, int size) {$/;"	f	file:
filterpc	.\3rd\lua\ldebug.c	/^static int filterpc (int pc, int jmptarget) {$/;"	f	file:
finalfix	.\3rd\lpeg\lptree.c	/^static void finalfix (lua_State *L, int postable, TTree *g, TTree *t) {$/;"	f	file:
finallabel	.\3rd\lpeg\lpcode.c	/^static int finallabel (Instruction *code, int i) {$/;"	f	file:
finalreport	.\3rd\lua\lua.c	/^static void finalreport (lua_State *L, int status) {$/;"	f	file:
finaltarget	.\3rd\lpeg\lpcode.c	/^static int finaltarget (Instruction *code, int i) {$/;"	f	file:
find 	.\3rd\lpeg\re.lua	/^local function find (s, p, i)$/;"	f
find 	.\3rd\lpeg\test.lua	/^local function find (p, s)$/;"	f
find_func	.\lualib\snax\hotfix.lua	/^local function find_func(funcs, group , name)$/;"	f
find_uncomplete	.\lualib-src\lua-netpack.c	/^find_uncomplete(struct queue *q, int fd) {$/;"	f	file:
findback	.\3rd\lpeg\lpcap.c	/^static Capture *findback (CapState *cs, Capture *cap) {$/;"	f	file:
finddyncap	.\3rd\lpeg\lpcap.c	/^int finddyncap (Capture *cap, Capture *last) {$/;"	f
findfield	.\3rd\lua\lauxlib.c	/^static int findfield (lua_State *L, int objidx, int level) {$/;"	f	file:
findfile	.\3rd\lua\loadlib.c	/^static const char *findfile (lua_State *L, const char *name,$/;"	f	file:
findgotos	.\3rd\lua\lparser.c	/^static void findgotos (LexState *ls, Labeldesc *lb) {$/;"	f	file:
findindex	.\3rd\lua\ltable.c	/^static int findindex (lua_State *L, Table *t, StkId key) {$/;"	f	file:
findlabel	.\3rd\lua\lparser.c	/^static int findlabel (LexState *ls, int g) {$/;"	f	file:
findloader	.\3rd\lua\loadlib.c	/^static void findloader (lua_State *L, const char *name) {$/;"	f	file:
findlocal	.\3rd\lua\ldebug.c	/^static const char *findlocal (lua_State *L, CallInfo *ci, int n,$/;"	f	file:
findopen	.\3rd\lpeg\lpcap.c	/^static Capture *findopen (Capture *cap) {$/;"	f	file:
findpcall	.\3rd\lua\ldo.c	/^static CallInfo *findpcall (lua_State *L) {$/;"	f	file:
findroot	.\lualib\sharedata\corelib.lua	/^local function findroot(self)$/;"	f
findsetreg	.\3rd\lua\ldebug.c	/^static int findsetreg (Proto *p, int lastpc, int reg) {$/;"	f	file:
findtag	.\lualib-src\sproto\sproto.c	/^findtag(struct sproto_type *st, int tag) {$/;"	f	file:
findvararg	.\3rd\lua\ldebug.c	/^static const char *findvararg (CallInfo *ci, int n, StkId *pos) {$/;"	f	file:
finishCcall	.\3rd\lua\ldo.c	/^static void finishCcall (lua_State *L) {$/;"	f	file:
finishpcall	.\3rd\lua\lbaselib.c	/^static int finishpcall (lua_State *L, int status) {$/;"	f	file:
finobj	.\3rd\lua\lstate.h	/^  GCObject *finobj;  \/* list of collectable objects with finalizers *\/$/;"	m	struct:global_State
firstdef 	.\3rd\lpeg\re.lua	/^local function firstdef (n, r) return adddef({n}, n, r) end$/;"	f
firstgoto	.\3rd\lua\lparser.c	/^  short firstgoto;  \/* index of first pending goto in this block *\/$/;"	m	struct:BlockCnt	file:
firstlabel	.\3rd\lua\lparser.c	/^  short firstlabel;  \/* index of first label in this block *\/$/;"	m	struct:BlockCnt	file:
firstlocal	.\3rd\lua\lparser.h	/^  int firstlocal;  \/* index of first local var (in Dyndata array) *\/$/;"	m	struct:FuncState
fixedlen	.\3rd\lpeg\lpcode.h	30;"	d
fixedlenx	.\3rd\lpeg\lpcode.c	/^int fixedlenx (TTree *tree, int count, int len) {$/;"	f
fixjump	.\3rd\lua\lcode.c	/^static void fixjump (FuncState *fs, int pc, int dest) {$/;"	f	file:
fixonecall	.\3rd\lpeg\lptree.c	/^static void fixonecall (lua_State *L, int postable, TTree *g, TTree *t) {$/;"	f	file:
flags	.\3rd\lua\lobject.h	/^  lu_byte flags;  \/* 1<<p means tagmethod(p) is not present *\/$/;"	m	struct:Table
flags	.\lualib-src\lua-mongo.c	/^	int flags;$/;"	m	struct:response	file:
flattypename	.\lualib\sprotoparser.lua	/^local function flattypename(r)$/;"	f
flib	.\3rd\lua\liolib.c	/^static const luaL_Reg flib[] = {$/;"	v	file:
foldcap	.\3rd\lpeg\lpcap.c	/^static int foldcap (CapState *cs) {$/;"	f	file:
foo 	.\3rd\lpeg\test.lua	/^  local function foo (s,i)$/;"	f
forbody	.\3rd\lua\lparser.c	/^static void forbody (LexState *ls, int base, int line, int nvars, int isnum) {$/;"	f	file:
force_close	.\skynet-src\socket_server.c	/^force_close(struct socket_server *ss, struct socket *s, struct socket_message *result) {$/;"	f	file:
forlist	.\3rd\lua\lparser.c	/^static void forlist (LexState *ls, TString *indexname) {$/;"	f	file:
format_table	.\service\dbg.lua	/^local function format_table(t)$/;"	f
format_table	.\service\debug_console.lua	/^local function format_table(t)$/;"	f
fornum	.\3rd\lua\lparser.c	/^static void fornum (LexState *ls, TString *varname, int line) {$/;"	f	file:
forstat	.\3rd\lua\lparser.c	/^static void forstat (LexState *ls, int line) {$/;"	f	file:
forward_cb	.\lualib-src\lua-skynet.c	/^forward_cb(struct skynet_context * context, void * ud, int type, int session, uint32_t source, const void * msg, size_t sz) {$/;"	f	file:
forward_local_messsage	.\service-src\service_harbor.c	/^forward_local_messsage(struct harbor *h, void *msg, int sz) {$/;"	f	file:
forward_message	.\skynet-src\skynet_socket.c	/^forward_message(int type, bool padding, struct socket_message * result) {$/;"	f	file:
forward_message_tcp	.\skynet-src\socket_server.c	/^forward_message_tcp(struct socket_server *ss, struct socket *s, struct socket_message * result) {$/;"	f	file:
forward_message_udp	.\skynet-src\socket_server.c	/^forward_message_udp(struct socket_server *ss, struct socket *s, struct socket_message * result) {$/;"	f	file:
frealloc	.\3rd\lua\lstate.h	/^  lua_Alloc frealloc;  \/* function to reallocate memory *\/$/;"	m	struct:global_State
free	.\skynet-src\socket_server.h	/^	void (*free)(void *);$/;"	m	struct:socket_object_interface
free_func	.\skynet-src\socket_server.c	/^	void (*free_func)(void *);$/;"	m	struct:send_object	file:
free_monitor	.\skynet-src\skynet_start.c	/^free_monitor(struct monitor *m) {$/;"	f	file:
free_wb_list	.\skynet-src\socket_server.c	/^free_wb_list(struct socket_server *ss, struct wb_list *list) {$/;"	f	file:
freeexp	.\3rd\lua\lcode.c	/^static void freeexp (FuncState *fs, expdesc *e) {$/;"	f	file:
freelist	.\3rd\lua\lauxlib.c	519;"	d	file:
freelist	.\service-src\databuffer.h	/^	struct message * freelist;$/;"	m	struct:messagepool	typeref:struct:messagepool::message
freeobj	.\3rd\lua\lgc.c	/^static void freeobj (lua_State *L, GCObject *o) {$/;"	f	file:
freereg	.\3rd\lua\lcode.c	/^static void freereg (FuncState *fs, int reg) {$/;"	f	file:
freereg	.\3rd\lua\lparser.h	/^  lu_byte freereg;  \/* first free register *\/$/;"	m	struct:FuncState
freestack	.\3rd\lua\lstate.c	/^static void freestack (lua_State *L) {$/;"	f	file:
from_bigendian	.\service-src\service_harbor.c	/^from_bigendian(uint32_t n) {$/;"	f	file:
fromstate	.\3rd\lua\lstate.c	77;"	d	file:
fs	.\3rd\lua\llex.h	/^  struct FuncState *fs;  \/* current function (parser) *\/$/;"	m	struct:LexState	typeref:struct:LexState::FuncState
fullset	.\3rd\lpeg\lpcode.c	/^static const Charset *fullset = &fullset_;$/;"	v	file:
fullset_	.\3rd\lpeg\lpcode.c	/^static const Charset fullset_ =$/;"	v	file:
func	.\3rd\lpeg\lpeg.html	/^<h2><a name="func">Functions<\/a><\/h2>$/;"	a
func	.\3rd\lpeg\re.html	/^<h2><a name="func">Functions<\/a><\/h2>$/;"	a
func	.\3rd\lua\lapi.c	/^  StkId func;$/;"	m	struct:CallS	file:
func	.\3rd\lua\lauxlib.h	/^  lua_CFunction func;$/;"	m	struct:luaL_Reg
func	.\3rd\lua\lstate.h	/^  StkId func;  \/* function index in the stack *\/$/;"	m	struct:CallInfo
func	.\skynet-src\skynet_server.c	/^	const char * (*func)(struct skynet_context * context, const char * param);	\/\/命令函数$/;"	m	struct:command_func	file:
func_id	.\lualib\snax\interface.lua	/^	local function func_id(id, group)$/;"	f
funcargs	.\3rd\lua\lparser.c	/^static void funcargs (LexState *ls, expdesc *f, int line) {$/;"	f	file:
funcinfo	.\3rd\lua\ldebug.c	/^static void funcinfo (lua_Debug *ar, Closure *cl) {$/;"	f	file:
funcinstsize	.\3rd\lpeg\lptypes.h	139;"	d
funcname	.\3rd\lua\lparser.c	/^static int funcname (LexState *ls, expdesc *v) {$/;"	f	file:
funcstat	.\3rd\lua\lparser.c	/^static void funcstat (LexState *ls, int line) {$/;"	f	file:
function (c, p) return c 	.\3rd\lpeg\re.lua	/^                          function (c, p) return c == "^" and any - p or p end$/;"	f
function addtag (s, i, t, tag) t.tag 	.\3rd\lpeg\test.lua	/^function addtag (s, i, t, tag) t.tag = tag; return i, t end$/;"	f
function eq (_, _, a, b) return a 	.\3rd\lpeg\test.lua	/^function eq (_, _, a, b) return a == b end$/;"	f
function foo (p) t[#t + 1] 	.\3rd\lpeg\test.lua	/^function foo (p) t[#t + 1] = p; return p .. "x" end$/;"	f
functioncap	.\3rd\lpeg\lpcap.c	/^static int functioncap (CapState *cs) {$/;"	f	file:
fvalue	.\3rd\lua\lobject.h	163;"	d
g	.\3rd\lua\lstate.c	/^  global_State g;$/;"	m	struct:LG	file:
g 	.\3rd\lpeg\test.lua	/^g = function (...) return 1, ... end$/;"	f
g_iofile	.\3rd\lua\liolib.c	/^static int g_iofile (lua_State *L, const char *f, const char *mode) {$/;"	f	file:
g_read	.\3rd\lua\liolib.c	/^static int g_read (lua_State *L, FILE *f, int first) {$/;"	f	file:
g_write	.\3rd\lua\liolib.c	/^static int g_write (lua_State *L, FILE *f, int arg) {$/;"	f	file:
gate	.\service-src\service_gate.c	/^struct gate {$/;"	s	file:
gate_create	.\service-src\service_gate.c	/^gate_create(void) {$/;"	f
gate_init	.\service-src\service_gate.c	/^gate_init(struct gate *g , struct skynet_context * ctx, char * parm) {$/;"	f
gate_release	.\service-src\service_gate.c	/^gate_release(struct gate *g) {$/;"	f
gateserver.closeclient	.\lualib\snax\gateserver.lua	/^function gateserver.closeclient(fd)$/;"	f
gateserver.openclient	.\lualib\snax\gateserver.lua	/^function gateserver.openclient(fd)$/;"	f
gateserver.start	.\lualib\snax\gateserver.lua	/^function gateserver.start(handler)$/;"	f
gc	.\3rd\lua\lobject.h	/^  GCObject *gc;    \/* collectable objects *\/$/;"	m	union:Value
gch	.\3rd\lua\lstate.h	/^  GCheader gch;  \/* common header *\/$/;"	m	union:GCObject
gch	.\3rd\lua\lstate.h	197;"	d
gckind	.\3rd\lua\lstate.h	/^  lu_byte gckind;  \/* kind of GC running *\/$/;"	m	struct:global_State
gclist	.\3rd\lua\lobject.h	/^  GCObject *gclist;$/;"	m	struct:Proto
gclist	.\3rd\lua\lobject.h	/^  GCObject *gclist;$/;"	m	struct:Table
gclist	.\3rd\lua\lstate.h	/^  GCObject *gclist;$/;"	m	struct:lua_State
gcmajorinc	.\3rd\lua\lstate.h	/^  int gcmajorinc;  \/* pause between major collections (only in gen. mode) *\/$/;"	m	struct:global_State
gco2ccl	.\3rd\lua\lstate.h	206;"	d
gco2cl	.\3rd\lua\lstate.h	207;"	d
gco2lcl	.\3rd\lua\lstate.h	205;"	d
gco2p	.\3rd\lua\lstate.h	210;"	d
gco2t	.\3rd\lua\lstate.h	209;"	d
gco2th	.\3rd\lua\lstate.h	212;"	d
gco2ts	.\3rd\lua\lstate.h	202;"	d
gco2u	.\3rd\lua\lstate.h	204;"	d
gco2uv	.\3rd\lua\lstate.h	211;"	d
gcpause	.\3rd\lua\lstate.h	/^  int gcpause;  \/* size of pause between successive GCs *\/$/;"	m	struct:global_State
gcrunning	.\3rd\lua\lstate.h	/^  lu_byte gcrunning;  \/* true if GC is running *\/$/;"	m	struct:global_State
gcstate	.\3rd\lua\lstate.h	/^  lu_byte gcstate;  \/* state of garbage collector *\/$/;"	m	struct:global_State
gcstepmul	.\3rd\lua\lstate.h	/^  int gcstepmul;  \/* GC `granularity' *\/$/;"	m	struct:global_State
gctm	.\3rd\lua\loadlib.c	/^static int gctm (lua_State *L) {$/;"	f	file:
gcvalue	.\3rd\lua\lobject.h	154;"	d
gen_post	.\lualib\snax.lua	/^local function gen_post(type, handle)$/;"	f
gen_req	.\lualib\snax.lua	/^local function gen_req(type, handle)$/;"	f
gen_response	.\lualib\sproto.lua	/^local function gen_response(self, response, session)$/;"	f
gen_udp_address	.\skynet-src\socket_server.c	/^gen_udp_address(int protocol, union sockaddr_all *sa, uint8_t * udp_address) {$/;"	f	file:
generationalcollection	.\3rd\lua\lgc.c	/^static void generationalcollection (lua_State *L) {$/;"	f	file:
generic_reader	.\3rd\lua\lbaselib.c	/^static const char *generic_reader (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
genkey	.\lualib\sharedata\corelib.lua	/^local function genkey(self)$/;"	f
getBMode	.\3rd\lua\lopcodes.h	275;"	d
getCMode	.\3rd\lua\lopcodes.h	276;"	d
getF	.\3rd\lua\lauxlib.c	/^static const char *getF (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
getIndent 	.\test\testmysql.lua	/^    getIndent = function(level)$/;"	f
getOpMode	.\3rd\lua\lopcodes.h	274;"	d
getS	.\3rd\lua\lauxlib.c	/^static const char *getS (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
get_address	.\service\multicastd.lua	/^local function get_address(t, id)$/;"	f
get_allocated_field	.\skynet-src\malloc_hook.c	/^get_allocated_field(uint32_t handle) {$/;"	f	file:
get_buffer	.\lualib-src\lua-seri.c	/^get_buffer(lua_State *L, struct read_block *rb, int len) {$/;"	f	file:
get_buffer	.\lualib-src\lua-socket.c	/^get_buffer(lua_State *L, int index, int *sz) {$/;"	f	file:
get_dest_string	.\lualib-src\lua-skynet.c	/^get_dest_string(lua_State *L, int index) {$/;"	f	file:
get_equalTM	.\3rd\lua\lvm.c	/^static const TValue *get_equalTM (lua_State *L, Table *mt1, Table *mt2,$/;"	f	file:
get_integer	.\lualib-src\lua-seri.c	/^get_integer(lua_State *L, struct read_block *rb, int cookie) {$/;"	f	file:
get_length	.\lualib-src\lua-bson.c	/^get_length(const uint8_t * data) {$/;"	f	file:
get_length	.\lualib-src\lua-mongo.c	/^get_length(document buffer) {$/;"	f	file:
get_number	.\lualib-src\lua-seri.c	/^get_number(lua_State *L, struct read_block *rb, int cookie) {$/;"	f	file:
get_pointer	.\lualib-src\lua-seri.c	/^get_pointer(lua_State *L, struct read_block *rb) {$/;"	f	file:
get_prompt	.\3rd\lua\lua.c	/^static const char *get_prompt (lua_State *L, int firstline) {$/;"	f	file:
get_queue	.\lualib-src\lua-netpack.c	/^get_queue(lua_State *L) {$/;"	f	file:
get_table	.\lualib-src\lua-sharedata.c	/^get_table(lua_State *L, int index) {$/;"	f	file:
get_time	.\lualib-src\lua-profile.c	/^get_time() {$/;"	f	file:
getarg	.\3rd\lua\lopcodes.h	93;"	d
getargs	.\3rd\lua\lua.c	/^static int getargs (lua_State *L, char **argv, int n) {$/;"	f	file:
getbinopr	.\3rd\lua\lparser.c	/^static BinOpr getbinopr (int op) {$/;"	f	file:
getboolfield	.\3rd\lua\loslib.c	/^static int getboolfield (lua_State *L, const char *key) {$/;"	f	file:
getbuffer	.\lualib-src\sproto\lsproto.c	/^getbuffer(lua_State *L, int index, size_t *sz) {$/;"	f	file:
getcached	.\3rd\lua\lvm.c	/^static Closure *getcached (Proto *p, UpVal **encup, StkId base) {$/;"	f	file:
getcaptures	.\3rd\lpeg\lpcap.c	/^int getcaptures (lua_State *L, const char *s, const char *r, int ptop) {$/;"	f
getcobj	.\lualib\sharedata\corelib.lua	/^local function getcobj(self)$/;"	f
getcode	.\3rd\lua\lcode.h	39;"	d
getdef 	.\3rd\lpeg\re.lua	/^local function getdef (id, defs)$/;"	f
getfield	.\3rd\lua\loslib.c	/^static int getfield (lua_State *L, const char *key, int d) {$/;"	f	file:
getfirst	.\3rd\lpeg\lpcode.c	/^static int getfirst (TTree *tree, const Charset *follow, Charset *firstset) {$/;"	f	file:
getfirstrule	.\3rd\lpeg\lptree.c	/^static void getfirstrule (lua_State *L, int arg, int postab) {$/;"	f	file:
getfreepos	.\3rd\lua\ltable.c	/^static Node *getfreepos (Table *t) {$/;"	f	file:
getfromktable	.\3rd\lpeg\lpcap.c	21;"	d	file:
getfuncline	.\3rd\lua\ldebug.h	16;"	d
getfuncname	.\3rd\lua\ldebug.c	/^static const char *getfuncname (lua_State *L, CallInfo *ci, const char **name) {$/;"	f	file:
gethere	.\3rd\lpeg\lpcode.c	492;"	d	file:
gethooktable	.\3rd\lua\ldblib.c	256;"	d	file:
getinstr	.\3rd\lpeg\lpcode.c	454;"	d	file:
getiofile	.\3rd\lua\liolib.c	/^static FILE *getiofile (lua_State *L, const char *findex) {$/;"	f	file:
getjump	.\3rd\lua\lcode.c	/^static int getjump (FuncState *fs, int pc) {$/;"	f	file:
getjumpcontrol	.\3rd\lua\lcode.c	/^static Instruction *getjumpcontrol (FuncState *fs, int pc) {$/;"	f	file:
getkind	.\3rd\lpeg\lptypes.h	115;"	d
getlocaledecpoint	.\3rd\lua\llex.c	205;"	d	file:
getlocvar	.\3rd\lua\lparser.c	/^static LocVar *getlocvar (FuncState *fs, int i) {$/;"	f	file:
getobjname	.\3rd\lua\ldebug.c	/^static const char *getobjname (Proto *p, int lastpc, int reg,$/;"	f	file:
getoff	.\3rd\lpeg\lptypes.h	116;"	d
getoffset	.\3rd\lpeg\lpvm.c	25;"	d	file:
getpatt	.\3rd\lpeg\lptree.c	/^static TTree *getpatt (lua_State *L, int idx, int *len) {$/;"	f	file:
getpattern	.\3rd\lpeg\lptree.c	/^static Pattern *getpattern (lua_State *L, int idx) {$/;"	f	file:
getproto	.\3rd\lua\lobject.h	543;"	d
getsize	.\3rd\lpeg\lptree.c	/^static int getsize (lua_State *L, int idx) {$/;"	f	file:
getstackbase	.\3rd\lpeg\lpvm.c	44;"	d	file:
getstr	.\3rd\lua\lobject.h	422;"	d
getstrcaps	.\3rd\lpeg\lpcap.c	/^static int getstrcaps (CapState *cs, StrAux *cps, int n) {$/;"	f	file:
getthread	.\3rd\lua\ldblib.c	/^static lua_State *getthread (lua_State *L, int *arg) {$/;"	f	file:
gettime	.\skynet-src\skynet_timer.c	/^gettime() {$/;"	f	file:
gettotalbytes	.\3rd\lua\lstate.h	219;"	d
gettree	.\3rd\lpeg\lptree.c	/^static TTree *gettree (lua_State *L, int idx, int *len) {$/;"	f	file:
getunopr	.\3rd\lua\lparser.c	/^static UnOpr getunopr (int op) {$/;"	f	file:
getupvalname	.\3rd\lua\ldebug.c	/^static const char *getupvalname (CallInfo *ci, const TValue *o,$/;"	f	file:
getupvalref	.\3rd\lua\lapi.c	/^static UpVal **getupvalref (lua_State *L, int fidx, int n, LClosure **pf) {$/;"	f	file:
getupvaluetable	.\lualib\skynet\inject.lua	/^local function getupvaluetable(u, func, unique)$/;"	f
gfasttm	.\3rd\lua\ltm.h	41;"	d
giveup	.\3rd\lpeg\lpvm.c	/^static const Instruction giveup = {{IGiveup, 0, 0}};$/;"	v	file:
gkey	.\3rd\lua\ltable.h	14;"	d
globalL	.\3rd\lua\lua.c	/^static lua_State *globalL = NULL;$/;"	v	file:
global_State	.\3rd\lua\lstate.h	/^typedef struct global_State {$/;"	s
global_State	.\3rd\lua\lstate.h	/^} global_State;$/;"	t	typeref:struct:global_State
global_queue	.\skynet-src\skynet_mq.c	/^struct global_queue {$/;"	s	file:
globalname	.\lualib\skynet.lua	/^local function globalname(name, handle)$/;"	f
gmatch	.\3rd\lua\lstrlib.c	/^static int gmatch (lua_State *L) {$/;"	f	file:
gmatch_aux	.\3rd\lua\lstrlib.c	/^static int gmatch_aux (lua_State *L) {$/;"	f	file:
gnext	.\3rd\lua\ltable.h	16;"	d
gnode	.\3rd\lua\ltable.h	13;"	d
gnodelast	.\3rd\lua\lgc.c	94;"	d	file:
gotostat	.\3rd\lua\lparser.c	/^static void gotostat (LexState *ls, int pc) {$/;"	f	file:
grammar	.\3rd\lpeg\lpeg.html	/^<h2><a name="grammar">Grammars<\/a><\/h2>$/;"	a
gray	.\3rd\lua\lstate.h	/^  GCObject *gray;  \/* list of gray objects *\/$/;"	m	struct:global_State
gray2black	.\3rd\lua\lgc.h	115;"	d
grayagain	.\3rd\lua\lstate.h	/^  GCObject *grayagain;  \/* list of objects to be traversed atomically *\/$/;"	m	struct:global_State
growstack	.\3rd\lua\lapi.c	/^static void growstack (lua_State *L, void *ud) {$/;"	f	file:
gsub	.\3rd\lpeg\lpeg.html	/^function gsub (s, patt, repl)$/;"	f
gsub 	.\3rd\lpeg\re.lua	/^local function gsub (s, p, rep)$/;"	f
gt	.\3rd\lua\lparser.h	/^  Labellist gt;  \/* list of pending gotos *\/$/;"	m	struct:Dyndata
gval	.\3rd\lua\ltable.h	15;"	d
h	.\3rd\lua\lparser.h	/^  Table *h;  \/* table to find (and reuse) elements in `k' *\/$/;"	m	struct:FuncState
h	.\3rd\lua\lstate.h	/^  struct Table h;$/;"	m	union:GCObject	typeref:struct:GCObject::Table
handle	.\service-src\service_logger.c	/^	FILE * handle;\/\/日志文件指针$/;"	m	struct:logger	file:
handle	.\skynet-src\malloc_hook.c	/^	uint32_t handle;$/;"	m	struct:_mem_data	file:
handle	.\skynet-src\skynet_handle.c	/^	uint32_t handle;	\/\/句柄$/;"	m	struct:handle_name	file:
handle	.\skynet-src\skynet_harbor.h	/^	uint32_t handle;$/;"	m	struct:remote_name
handle	.\skynet-src\skynet_mq.c	/^	uint32_t handle;\/\/句柄号$/;"	m	struct:message_queue	file:
handle	.\skynet-src\skynet_server.c	/^	uint32_t handle;				\/\/句柄号$/;"	m	struct:skynet_context	file:
handle	.\skynet-src\skynet_server.c	/^	uint32_t handle;$/;"	m	struct:drop_t	file:
handle	.\skynet-src\skynet_timer.c	/^	uint32_t handle;$/;"	m	struct:timer_event	file:
handle_exit	.\skynet-src\skynet_server.c	/^handle_exit(struct skynet_context * context, uint32_t handle) {$/;"	f	file:
handle_index	.\skynet-src\skynet_handle.c	/^	uint32_t handle_index;\/\/句柄索引$/;"	m	struct:handle_storage	file:
handle_key	.\skynet-src\skynet_server.c	/^	pthread_key_t handle_key;$/;"	m	struct:skynet_node	file:
handle_luainit	.\3rd\lua\lua.c	/^static int handle_luainit (lua_State *L) {$/;"	f	file:
handle_name	.\skynet-src\skynet_handle.c	/^struct handle_name {$/;"	s	file:
handle_script	.\3rd\lua\lua.c	/^static int handle_script (lua_State *L, char **argv, int n) {$/;"	f	file:
handle_storage	.\skynet-src\skynet_handle.c	/^struct handle_storage {$/;"	s	file:
handle_to_address	.\service\launcher.lua	/^local function handle_to_address(handle)$/;"	f
handler.command	.\lualib\snax\msgserver.lua	/^	function handler.command(cmd, source, ...)$/;"	f
handler.command	.\service\gate.lua	/^function handler.command(cmd, source, ...)$/;"	f
handler.connect	.\lualib\snax\msgserver.lua	/^	function handler.connect(fd, addr)$/;"	f
handler.connect	.\service\gate.lua	/^function handler.connect(fd, addr)$/;"	f
handler.disconnect	.\lualib\snax\msgserver.lua	/^	function handler.disconnect(fd)$/;"	f
handler.disconnect	.\service\gate.lua	/^function handler.disconnect(fd)$/;"	f
handler.error	.\service\gate.lua	/^function handler.error(fd, msg)$/;"	f
handler.message	.\lualib\snax\msgserver.lua	/^	function handler.message(fd, msg, sz)$/;"	f
handler.message	.\service\gate.lua	/^function handler.message(fd, msg, sz)$/;"	f
handler.open	.\lualib\snax\msgserver.lua	/^	function handler.open(source, gateconf)$/;"	f
handler.open	.\service\gate.lua	/^function handler.open(source, conf)$/;"	f
handshake	.\service-src\service_harbor.c	/^handshake(struct harbor *h, int id) {$/;"	f	file:
handshake	.\service\cmaster.lua	/^local function handshake(fd)$/;"	f
harbor	.\service-src\service_harbor.c	/^struct harbor {$/;"	s	file:
harbor	.\skynet-src\skynet_handle.c	/^	uint32_t harbor;	\/\/节点号$/;"	m	struct:handle_storage	file:
harbor	.\skynet-src\skynet_imp.h	/^	int harbor;					\/\/节点号$/;"	m	struct:skynet_config
harbor.CONNECT	.\service\cdummy.lua	/^function harbor.CONNECT(id)$/;"	f
harbor.CONNECT	.\service\cslave.lua	/^function harbor.CONNECT(fd, id)$/;"	f
harbor.LINK	.\service\cdummy.lua	/^function harbor.LINK(id)$/;"	f
harbor.LINK	.\service\cslave.lua	/^function harbor.LINK(fd, id)$/;"	f
harbor.LINKMASTER	.\service\cslave.lua	/^function harbor.LINKMASTER()$/;"	f
harbor.QUERYNAME	.\service\cdummy.lua	/^function harbor.QUERYNAME(name)$/;"	f
harbor.QUERYNAME	.\service\cslave.lua	/^function harbor.QUERYNAME(fd, name)$/;"	f
harbor.REGISTER	.\service\cdummy.lua	/^function harbor.REGISTER(name, handle)$/;"	f
harbor.REGISTER	.\service\cslave.lua	/^function harbor.REGISTER(fd, name, handle)$/;"	f
harbor.connect	.\lualib\skynet\harbor.lua	/^function harbor.connect(id)$/;"	f
harbor.globalname	.\lualib\skynet\harbor.lua	/^function harbor.globalname(name, handle)$/;"	f
harbor.link	.\lualib\skynet\harbor.lua	/^function harbor.link(id)$/;"	f
harbor.linkmaster	.\lualib\skynet\harbor.lua	/^function harbor.linkmaster()$/;"	f
harbor.queryname	.\lualib\skynet\harbor.lua	/^function harbor.queryname(name)$/;"	f
harbor_command	.\service-src\service_harbor.c	/^harbor_command(struct harbor * h, const char * msg, size_t sz, int session, uint32_t source) {$/;"	f	file:
harbor_create	.\service-src\service_harbor.c	/^harbor_create(void) {$/;"	f
harbor_id	.\service-src\service_harbor.c	/^harbor_id(struct harbor *h, int fd) {$/;"	f	file:
harbor_init	.\service-src\service_harbor.c	/^harbor_init(struct harbor *h, struct skynet_context *ctx, const char * args) {$/;"	f
harbor_msg	.\service-src\service_harbor.c	/^struct harbor_msg {$/;"	s	file:
harbor_msg_queue	.\service-src\service_harbor.c	/^struct harbor_msg_queue {$/;"	s	file:
harbor_release	.\service-src\service_harbor.c	/^harbor_release(struct harbor *h) {$/;"	f
has_E	.\3rd\lua\lua.c	352;"	d	file:
has_cmd	.\skynet-src\socket_server.c	/^has_cmd(struct socket_server *ss) {$/;"	f	file:
has_e	.\3rd\lua\lua.c	351;"	d	file:
has_i	.\3rd\lua\lua.c	349;"	d	file:
has_v	.\3rd\lua\lua.c	350;"	d	file:
hascaptures	.\3rd\lpeg\lpcode.c	/^int hascaptures (TTree *tree) {$/;"	f
hash	.\3rd\lua\lobject.h	/^    unsigned int hash;$/;"	m	struct:TString::__anon6
hash	.\3rd\lua\lstate.h	/^  GCObject **hash;$/;"	m	struct:stringtable
hash	.\lualib-src\lua-netpack.c	/^	struct uncomplete * hash[HASHSIZE];$/;"	m	struct:queue	typeref:struct:queue::uncomplete	file:
hash	.\lualib-src\lua-sharedata.c	/^	struct node * hash;$/;"	m	struct:table	typeref:struct:table::node	file:
hash	.\service-src\hashid.h	/^	struct hashid_node **hash;$/;"	m	struct:hashid	typeref:struct:hashid::hashid_node
hash	.\service-src\service_gate.c	/^	struct hashid hash;$/;"	m	struct:gate	typeref:struct:gate::hashid	file:
hash	.\service-src\service_harbor.c	/^	uint32_t hash;$/;"	m	struct:keyvalue	file:
hash_delete	.\service-src\service_harbor.c	/^hash_delete(struct hashmap *hash) {$/;"	f	file:
hash_fd	.\lualib-src\lua-netpack.c	/^hash_fd(int fd) {$/;"	f	file:
hash_insert	.\service-src\service_harbor.c	/^hash_insert(struct hashmap * hash, const char name[GLOBALNAME_LENGTH]) {$/;"	f	file:
hash_new	.\service-src\service_harbor.c	/^hash_new() {$/;"	f	file:
hash_search	.\service-src\service_harbor.c	/^hash_search(struct hashmap * hash, const char name[GLOBALNAME_LENGTH]) {$/;"	f	file:
hashboolean	.\3rd\lua\ltable.c	54;"	d	file:
hashid	.\service-src\hashid.h	/^struct hashid {$/;"	s
hashid_clear	.\service-src\hashid.h	/^hashid_clear(struct hashid *hi) {$/;"	f
hashid_full	.\service-src\hashid.h	/^hashid_full(struct hashid *hi) {$/;"	f
hashid_init	.\service-src\hashid.h	/^hashid_init(struct hashid *hi, int max) {$/;"	f
hashid_insert	.\service-src\hashid.h	/^hashid_insert(struct hashid * hi, int id) {$/;"	f
hashid_lookup	.\service-src\hashid.h	/^hashid_lookup(struct hashid *hi, int id) {$/;"	f
hashid_node	.\service-src\hashid.h	/^struct hashid_node {$/;"	s
hashid_remove	.\service-src\hashid.h	/^hashid_remove(struct hashid *hi, int id) {$/;"	f
hashmap	.\service-src\service_harbor.c	/^struct hashmap {$/;"	s	file:
hashmod	.\3rd\lua\ltable.c	61;"	d	file:
hashmod	.\service-src\hashid.h	/^	int hashmod;$/;"	m	struct:hashid
hashnum	.\3rd\lua\ltable.c	/^static Node *hashnum (const Table *t, lua_Number n) {$/;"	f	file:
hashpointer	.\3rd\lua\ltable.c	64;"	d	file:
hashpow2	.\3rd\lua\ltable.c	51;"	d	file:
hashstr	.\3rd\lua\ltable.c	53;"	d	file:
hasjumps	.\3rd\lua\lcode.c	29;"	d	file:
hasmultret	.\3rd\lua\lparser.c	35;"	d	file:
haveloop 	.\3rd\lpeg\test.lua	/^local function haveloop (p)$/;"	f
head	.\lualib-src\lua-clientsocket.c	/^	int head;$/;"	m	struct:queue	file:
head	.\lualib-src\lua-netpack.c	/^	int head;$/;"	m	struct:queue	file:
head	.\lualib-src\lua-seri.c	/^	struct block * head;$/;"	m	struct:write_block	typeref:struct:write_block::block	file:
head	.\lualib-src\lua-socket.c	/^	struct buffer_node *head;$/;"	m	struct:socket_buffer	typeref:struct:socket_buffer::buffer_node	file:
head	.\service-src\databuffer.h	/^	struct message * head;$/;"	m	struct:databuffer	typeref:struct:databuffer::message
head	.\service-src\service_harbor.c	/^	int head;$/;"	m	struct:harbor_msg_queue	file:
head	.\skynet-src\skynet_mq.c	/^	int head;		\/\/队头索引$/;"	m	struct:message_queue	file:
head	.\skynet-src\skynet_mq.c	/^	struct message_queue *head;	\/\/消息队列头指针$/;"	m	struct:global_queue	typeref:struct:global_queue::message_queue	file:
head	.\skynet-src\skynet_timer.c	/^	struct timer_node head;$/;"	m	struct:link_list	typeref:struct:link_list::timer_node	file:
head	.\skynet-src\socket_server.c	/^	struct write_buffer * head;\/\/头$/;"	m	struct:wb_list	typeref:struct:wb_list::write_buffer	file:
header	.\lualib-src\lua-netpack.c	/^	int header;$/;"	m	struct:uncomplete	file:
header	.\lualib-src\sproto\sproto.c	/^	struct chunk * header;$/;"	m	struct:pool	typeref:struct:pool::chunk	file:
header	.\service-src\databuffer.h	/^	int header;$/;"	m	struct:databuffer
header	.\service-src\service_harbor.c	/^	struct remote_message_header header;$/;"	m	struct:harbor_msg	typeref:struct:harbor_msg::remote_message_header	file:
header	.\skynet-src\socket_server.c	/^	uint8_t header[8];	\/\/ 6 bytes dummy 头部 6个字节未用 [0-5] [6]是type [7]长度 长度指的是包体的长度$/;"	m	struct:request_package	file:
header_size	.\service-src\service_gate.c	/^	int header_size;$/;"	m	struct:gate	file:
header_to_message	.\service-src\service_harbor.c	/^header_to_message(const struct remote_message_header * header, uint8_t * message) {$/;"	f	file:
headfail	.\3rd\lpeg\lpcode.c	/^static int headfail (TTree *tree) {$/;"	f	file:
hextoint	.\lualib-src\lua-bson.c	/^hextoint(char c) {$/;"	f	file:
high	.\skynet-src\socket_server.c	/^	struct wb_list high;	\/\/高$/;"	m	struct:socket	typeref:struct:socket::wb_list	file:
hmac	.\lualib-src\lua-crypt.c	/^hmac(uint32_t x[2], uint32_t y[2], uint32_t result[2]) {$/;"	f	file:
hmac_sha1	.\test\testsha.lua	/^local function hmac_sha1(key, text)$/;"	f
hook	.\3rd\lua\lstate.h	/^  lua_Hook hook;$/;"	m	struct:lua_State
hookcount	.\3rd\lua\lstate.h	/^  int hookcount;$/;"	m	struct:lua_State
hookf	.\3rd\lua\ldblib.c	/^static void hookf (lua_State *L, lua_Debug *ar) {$/;"	f	file:
hookmask	.\3rd\lua\lstate.h	/^  lu_byte hookmask;$/;"	m	struct:lua_State
host	.\skynet-src\socket_server.c	/^	char host[1];$/;"	m	struct:request_listen	file:
host	.\skynet-src\socket_server.c	/^	char host[1];$/;"	m	struct:request_open	file:
host 	.\test\testudp.lua	/^	host = socket.udp(function(data, sz, from)$/;"	f
host:attach	.\lualib\sproto.lua	/^function host:attach(sp)$/;"	f
host:dispatch	.\lualib\sproto.lua	/^function host:dispatch(...)$/;"	f
hotfix	.\test\testping.lua	/^function hotfix(...)$/;"	f
httpc.get	.\lualib\http\httpc.lua	/^function httpc.get(...)$/;"	f
httpc.post	.\lualib\http\httpc.lua	/^function httpc.post(host, url, form, recvheader)$/;"	f
httpc.request	.\lualib\http\httpc.lua	/^function httpc.request(method, host, url, recvheader, header, content)$/;"	f
httpd.read_request	.\lualib\http\httpd.lua	/^function httpd.read_request(...)$/;"	f
httpd.write_response	.\lualib\http\httpd.lua	/^function httpd.write_response(...)$/;"	f
hvalue	.\3rd\lua\lobject.h	164;"	d
i	.\3rd\lpeg\lpvm.h	/^  } i;$/;"	m	union:Instruction	typeref:struct:Instruction::Inst
iABC	.\3rd\lua\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iABx	.\3rd\lua\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAsBx	.\3rd\lua\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAx	.\3rd\lua\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
i_ci	.\3rd\lua\lua.h	/^  struct CallInfo *i_ci;  \/* active function *\/$/;"	m	struct:lua_Debug	typeref:struct:lua_Debug::CallInfo
i_key	.\3rd\lua\lobject.h	/^  TKey i_key;$/;"	m	struct:Node
i_val	.\3rd\lua\lobject.h	/^  TValue i_val;$/;"	m	struct:Node
id	.\3rd\lpeg\test.lua	/^local function id(s, i, x)$/;"	f
id	.\lualib-src\lua-mongo.c	/^	int id;$/;"	m	struct:connection	file:
id	.\lualib-src\lua-netpack.c	/^	int id;$/;"	m	struct:netpack	file:
id	.\service-src\hashid.h	/^	int id;$/;"	m	struct:hashid_node
id	.\service-src\hashid.h	/^	struct hashid_node *id;$/;"	m	struct:hashid	typeref:struct:hashid::hashid_node
id	.\service-src\service_gate.c	/^	int id;	\/\/ skynet_socket id$/;"	m	struct:connection	file:
id	.\service-src\service_harbor.c	/^	int id;$/;"	m	struct:harbor	file:
id	.\skynet-src\skynet_socket.h	/^	int id;$/;"	m	struct:skynet_socket_message
id	.\skynet-src\skynet_start.c	/^	int id;			\/\/ID$/;"	m	struct:worker_parm	file:
id	.\skynet-src\socket_server.c	/^	int id;					\/\/应用层维护的一个与fd对应的id 实际上是在socket池中的id$/;"	m	struct:socket	file:
id	.\skynet-src\socket_server.c	/^	int id;$/;"	m	struct:request_bind	file:
id	.\skynet-src\socket_server.c	/^	int id;$/;"	m	struct:request_close	file:
id	.\skynet-src\socket_server.c	/^	int id;$/;"	m	struct:request_listen	file:
id	.\skynet-src\socket_server.c	/^	int id;$/;"	m	struct:request_open	file:
id	.\skynet-src\socket_server.c	/^	int id;$/;"	m	struct:request_send	file:
id	.\skynet-src\socket_server.c	/^	int id;$/;"	m	struct:request_setopt	file:
id	.\skynet-src\socket_server.c	/^	int id;$/;"	m	struct:request_setudp	file:
id	.\skynet-src\socket_server.c	/^	int id;$/;"	m	struct:request_start	file:
id	.\skynet-src\socket_server.c	/^	int id;$/;"	m	struct:request_udp	file:
id	.\skynet-src\socket_server.h	/^	int id;$/;"	m	struct:socket_message
id 	.\3rd\lpeg\test.lua	/^local function id (s, i, ...)$/;"	f
id_to_hex	.\skynet-src\skynet_server.c	/^id_to_hex(char * str, uint32_t id) { \/\/将id转化为十六进制的字符串$/;"	f	file:
idx	.\3rd\lpeg\lpcap.h	/^  short idx;  \/* extra info about capture (group name, arg index, etc.) *\/$/;"	m	struct:Capture
idx	.\3rd\lua\lobject.h	/^  lu_byte idx;  \/* index of upvalue (in stack or in outer function's list) *\/$/;"	m	struct:Upvaldesc
idx	.\3rd\lua\lparser.h	/^      short idx;  \/* index (R\/K) *\/$/;"	m	struct:expdesc::__anon14::__anon15
idx	.\3rd\lua\lparser.h	/^  short idx;  \/* variable index in stack *\/$/;"	m	struct:Vardesc
if type(f) ~	.\lualib\snax\interface.lua	/^			if type(f) ~= "function" then$/;"	f
if type(func) ~	.\lualib\snax\interface.lua	/^			if type(func) ~= "function" then$/;"	f
if type(value) 	.\lualib\snax\hotfix.lua	/^			if type(value) == "function" then$/;"	f
ifstat	.\3rd\lua\lparser.c	/^static void ifstat (LexState *ls, int line) {$/;"	f	file:
import_field	.\lualib-src\sproto\sproto.c	/^import_field(struct sproto *s, struct field *f, const uint8_t * stream) {$/;"	f	file:
import_protocol	.\lualib-src\sproto\sproto.c	/^import_protocol(struct sproto *s, struct protocol *p, const uint8_t * stream) {$/;"	f	file:
import_string	.\lualib-src\sproto\sproto.c	/^import_string(struct sproto *s, const uint8_t * stream) {$/;"	f	file:
import_type	.\lualib-src\sproto\sproto.c	/^import_type(struct sproto *s, struct sproto_type *t, const uint8_t * stream) {$/;"	f	file:
in_global	.\skynet-src\skynet_mq.c	/^	int in_global;	\/\/是否在全局队列中$/;"	m	struct:message_queue	file:
inclinenumber	.\3rd\lua\llex.c	/^static void inclinenumber (LexState *ls) {$/;"	f	file:
incomplete	.\3rd\lua\lua.c	/^static int incomplete (lua_State *L, int status) {$/;"	f	file:
incr_top	.\3rd\lua\ldo.h	20;"	d
incstep	.\3rd\lua\lgc.c	/^static void incstep (lua_State *L) {$/;"	f	file:
ind	.\3rd\lua\lparser.h	/^    } ind;$/;"	m	union:expdesc::__anon14	typeref:struct:expdesc::__anon14::__anon15
index2addr	.\3rd\lua\lapi.c	/^static TValue *index2addr (lua_State *L, int idx) {$/;"	f	file:
info	.\3rd\lua\lparser.h	/^    int info;  \/* for generic use *\/$/;"	m	union:expdesc::__anon14
inic_digest	.\3rd\lua-md5\md5.c	/^static void inic_digest(WORD32 *d) {$/;"	f	file:
init	.\3rd\lua\lauxlib.c	/^init() {$/;"	f	file:
init	.\3rd\lua\lstrlib.c	/^    const char *init;$/;"	m	struct:MatchState::__anon20	file:
init	.\lualib\multicast.lua	/^local function init()$/;"	f
init	.\skynet-src\skynet_module.h	/^	skynet_dl_init init;\/\/初始化函数$/;"	m	struct:skynet_module
init	.\skynet-src\skynet_server.c	/^	bool init;						\/\/是否初始化$/;"	m	struct:skynet_context	file:
init	.\skynet-src\skynet_server.c	/^	int init;$/;"	m	struct:skynet_node	file:
init	.\test\pingserver.lua	/^function init( ... )$/;"	f
init_all	.\lualib\skynet.lua	/^local function init_all() --初始化所有$/;"	f
init_exp	.\3rd\lua\lparser.c	/^static void init_exp (expdesc *e, expkind k, int i) {$/;"	f	file:
init_oid_header	.\lualib-src\lua-bson.c	/^init_oid_header() {$/;"	f	file:
init_registry	.\3rd\lua\lstate.c	/^static void init_registry (lua_State *L, global_State *g) {$/;"	f	file:
init_service	.\lualib\skynet.lua	/^local function init_service(start) --初始化服务$/;"	f
init_system	.\lualib\snax\interface.lua	/^	local function init_system(t, name, f)$/;"	f
init_template	.\lualib\skynet.lua	/^local function init_template(start) --初始化模版$/;"	f
init_winsock	.\lualib-src\lua-bson.c	/^init_winsock() {$/;"	f	file:
initb	.\3rd\lua\lauxlib.h	/^  char initb[LUAL_BUFFERSIZE];  \/* initial buffer *\/$/;"	m	struct:luaL_Buffer
initblock	.\3rd\lua-md5\md5lib.c	/^static int initblock (lua_State *L, const char *seed, int lseed, char *block) {$/;"	f	file:
initialrulename	.\3rd\lpeg\lptree.c	/^static void initialrulename (lua_State *L, TTree *grammar, int frule) {$/;"	f	file:
initposition	.\3rd\lpeg\lptree.c	/^static size_t initposition (lua_State *L, size_t len) {$/;"	f	file:
inject	.\lualib\snax\hotfix.lua	/^local function inject(funcs, source, ...)$/;"	f
inline	.\lualib-src\sproto\msvcint.h	5;"	d
inspectstat	.\3rd\lua\lauxlib.c	234;"	d	file:
inspectstat	.\3rd\lua\lauxlib.c	240;"	d	file:
instack	.\3rd\lua\lobject.h	/^  lu_byte instack;  \/* whether it is in stack *\/$/;"	m	struct:Upvaldesc
instance	.\skynet-src\skynet_server.c	/^	void * instance;			\/\/模块实例引用$/;"	m	struct:skynet_context	file:
instsize	.\3rd\lpeg\lptypes.h	132;"	d
int16_t	.\lualib-src\sproto\msvcint.h	/^typedef signed __int16    int16_t;$/;"	t
int16_t	.\lualib-src\sproto\msvcint.h	/^typedef signed short      int16_t;$/;"	t
int32_t	.\lualib-src\sproto\msvcint.h	/^typedef signed __int32    int32_t;$/;"	t
int32_t	.\lualib-src\sproto\msvcint.h	/^typedef signed int        int32_t;$/;"	t
int64_add	.\3rd\lua-int64\int64.c	/^int64_add(lua_State *L) {$/;"	f	file:
int64_div	.\3rd\lua-int64\int64.c	/^int64_div(lua_State *L) {$/;"	f	file:
int64_eq	.\3rd\lua-int64\int64.c	/^int64_eq(lua_State *L) {$/;"	f	file:
int64_le	.\3rd\lua-int64\int64.c	/^int64_le(lua_State *L) {$/;"	f	file:
int64_len	.\3rd\lua-int64\int64.c	/^int64_len(lua_State *L) {$/;"	f	file:
int64_lt	.\3rd\lua-int64\int64.c	/^int64_lt(lua_State *L) {$/;"	f	file:
int64_mod	.\3rd\lua-int64\int64.c	/^int64_mod(lua_State *L) {$/;"	f	file:
int64_mul	.\3rd\lua-int64\int64.c	/^int64_mul(lua_State *L) {$/;"	f	file:
int64_new	.\3rd\lua-int64\int64.c	/^int64_new(lua_State *L) {$/;"	f	file:
int64_pow	.\3rd\lua-int64\int64.c	/^int64_pow(lua_State *L) {$/;"	f	file:
int64_sub	.\3rd\lua-int64\int64.c	/^int64_sub(lua_State *L) {$/;"	f	file:
int64_t	.\lualib-src\sproto\msvcint.h	/^typedef signed __int64       int64_t;$/;"	t
int64_unm	.\3rd\lua-int64\int64.c	/^int64_unm(lua_State *L) {$/;"	f	file:
int8_t	.\lualib-src\sproto\msvcint.h	/^typedef signed __int8     int8_t;$/;"	t
int8_t	.\lualib-src\sproto\msvcint.h	/^typedef signed char       int8_t;$/;"	t
internshrstr	.\3rd\lua\lstring.c	/^static TString *internshrstr (lua_State *L, const char *str, size_t l) {$/;"	f	file:
intro	.\3rd\lpeg\lpeg.html	/^<h2><a name="intro">Introduction<\/a><\/h2>$/;"	a
invalid_stream	.\lualib-src\lua-seri.c	316;"	d	file:
invalid_stream_line	.\lualib-src\lua-seri.c	/^invalid_stream_line(lua_State *L, struct read_block *rb, int line) {$/;"	f	file:
invalidateTMcache	.\3rd\lua\ltable.h	18;"	d
invertjump	.\3rd\lua\lcode.c	/^static void invertjump (FuncState *fs, expdesc *e) {$/;"	f	file:
io_close	.\3rd\lua\liolib.c	/^static int io_close (lua_State *L) {$/;"	f	file:
io_fclose	.\3rd\lua\liolib.c	/^static int io_fclose (lua_State *L) {$/;"	f	file:
io_flush	.\3rd\lua\liolib.c	/^static int io_flush (lua_State *L) {$/;"	f	file:
io_input	.\3rd\lua\liolib.c	/^static int io_input (lua_State *L) {$/;"	f	file:
io_lines	.\3rd\lua\liolib.c	/^static int io_lines (lua_State *L) {$/;"	f	file:
io_noclose	.\3rd\lua\liolib.c	/^static int io_noclose (lua_State *L) {$/;"	f	file:
io_open	.\3rd\lua\liolib.c	/^static int io_open (lua_State *L) {$/;"	f	file:
io_output	.\3rd\lua\liolib.c	/^static int io_output (lua_State *L) {$/;"	f	file:
io_pclose	.\3rd\lua\liolib.c	/^static int io_pclose (lua_State *L) {$/;"	f	file:
io_popen	.\3rd\lua\liolib.c	/^static int io_popen (lua_State *L) {$/;"	f	file:
io_read	.\3rd\lua\liolib.c	/^static int io_read (lua_State *L) {$/;"	f	file:
io_readline	.\3rd\lua\liolib.c	/^static int io_readline (lua_State *L) {$/;"	f	file:
io_tmpfile	.\3rd\lua\liolib.c	/^static int io_tmpfile (lua_State *L) {$/;"	f	file:
io_type	.\3rd\lua\liolib.c	/^static int io_type (lua_State *L) {$/;"	f	file:
io_write	.\3rd\lua\liolib.c	/^static int io_write (lua_State *L) {$/;"	f	file:
iolib	.\3rd\lua\liolib.c	/^static const luaL_Reg iolib[] = {$/;"	v	file:
ipairsaux	.\3rd\lua\lbaselib.c	/^static int ipairsaux (lua_State *L) {$/;"	f	file:
isLfunction	.\3rd\lua\lobject.h	541;"	d
isLua	.\3rd\lua\lstate.h	106;"	d
is_vararg	.\3rd\lua\lobject.h	/^  lu_byte is_vararg;$/;"	m	struct:SharedProto
isblack	.\3rd\lua\lgc.h	100;"	d
iscleared	.\3rd\lua\lgc.c	/^static int iscleared (global_State *g, const TValue *o) {$/;"	f	file:
isclosecap	.\3rd\lpeg\lpcap.c	15;"	d	file:
isclosed	.\3rd\lua\liolib.c	127;"	d	file:
iscollectable	.\3rd\lua\lobject.h	173;"	d
isdead	.\3rd\lua\lgc.h	112;"	d
isdeadm	.\3rd\lua\lgc.h	111;"	d
isdummy	.\3rd\lua\ltable.c	69;"	d	file:
isfinalized	.\3rd\lua\lgc.c	66;"	d	file:
isfullcap	.\3rd\lpeg\lpcap.c	19;"	d	file:
isgenerational	.\3rd\lua\lgc.h	50;"	d
isgray	.\3rd\lua\lgc.h	101;"	d
ishashkey	.\lualib-src\lua-sharedata.c	/^ishashkey(struct context * ctx, lua_State *L, int index, int *key, uint32_t *keyhash, int *keytype) {$/;"	f	file:
isinstack	.\3rd\lua\ldebug.c	/^static int isinstack (CallInfo *ci, const TValue *o) {$/;"	f	file:
isloop	.\3rd\lua\lparser.c	/^  lu_byte isloop;  \/* true if `block' is a loop *\/$/;"	m	struct:BlockCnt	file:
isneg	.\3rd\lua\lobject.c	/^static int isneg (const char **s) {$/;"	f	file:
isnumeral	.\3rd\lua\lcode.c	/^static int isnumeral(expdesc *e) {$/;"	f	file:
isold	.\3rd\lua\lgc.h	104;"	d
ispseudo	.\3rd\lua\lapi.c	44;"	d	file:
isreserved	.\3rd\lua\lstring.h	28;"	d
isstackindex	.\3rd\lua\lapi.c	47;"	d	file:
isstring	.\3rd\lpeg\lpcap.c	/^  int isstring;  \/* whether capture is a string *\/$/;"	m	struct:StrAux	file:
issweepphase	.\3rd\lua\lgc.h	47;"	d
istailcall	.\3rd\lua\lua.h	/^  char istailcall;	\/* (t) *\/$/;"	m	struct:lua_Debug
isvalid	.\3rd\lua\lapi.c	41;"	d	file:
isvararg	.\3rd\lua\lua.h	/^  char isvararg;        \/* (u) *\/$/;"	m	struct:lua_Debug
iswhite	.\3rd\lua\lgc.h	99;"	d
joinkindoff	.\3rd\lpeg\lptypes.h	117;"	d
joinktables	.\3rd\lpeg\lptree.c	/^static int joinktables (lua_State *L, int p1, int p2) {$/;"	f	file:
jpc	.\3rd\lua\lparser.h	/^  int jpc;  \/* list of pending jumps to `pc' *\/$/;"	m	struct:FuncState
jumponcond	.\3rd\lua\lcode.c	/^static int jumponcond (FuncState *fs, expdesc *e, int cond) {$/;"	f	file:
jumptohere	.\3rd\lpeg\lpcode.c	/^static void jumptohere (CompileState *compst, int instruction) {$/;"	f	file:
jumptothere	.\3rd\lpeg\lpcode.c	/^static void jumptothere (CompileState *compst, int instruction, int target) {$/;"	f	file:
k	.\3rd\lua\lobject.h	/^  TValue *k;  \/* constants used by the function *\/$/;"	m	struct:Proto
k	.\3rd\lua\lparser.h	/^  expkind k;$/;"	m	struct:expdesc
k	.\3rd\lua\lstate.h	/^      lua_CFunction k;  \/* continuation in case of yields *\/$/;"	m	struct:CallInfo::__anon17::__anon19
k	.\lualib-src\lua-crypt.c	/^const uint32_t k[64] = {$/;"	v
keepinvariant	.\3rd\lua\lgc.h	61;"	d
keepinvariantout	.\3rd\lua\lgc.h	68;"	d
key	.\3rd\lpeg\lptree.h	/^  unsigned short key;  \/* key in ktable for Lua data (0 if no key) *\/$/;"	m	struct:TTree
key	.\3rd\lpeg\lpvm.h	/^    short key;$/;"	m	struct:Instruction::Inst
key	.\lualib-src\lua-sharedata.c	/^	int key;	\/\/ integer key or index of string table$/;"	m	struct:node	file:
key	.\service-src\service_harbor.c	/^	char key[GLOBALNAME_LENGTH];$/;"	m	struct:keyvalue	file:
keyfromval	.\3rd\lua\ltable.h	21;"	d
keyhash	.\lualib-src\lua-sharedata.c	/^	uint32_t keyhash;$/;"	m	struct:node	file:
keytype	.\lualib-src\lua-sharedata.c	/^	uint8_t keytype;	\/\/ key type must be integer or string$/;"	m	struct:node	file:
keyvalue	.\service-src\service_harbor.c	/^struct keyvalue {$/;"	s	file:
kind	.\3rd\lpeg\lpcap.h	/^  byte kind;  \/* kind of capture *\/$/;"	m	struct:Capture
kname	.\3rd\lua\ldebug.c	/^static void kname (Proto *p, int pc, int c, const char **name) {$/;"	f	file:
ktableidx	.\3rd\lpeg\lptypes.h	77;"	d
ktablelen	.\3rd\lpeg\lptree.c	/^static int ktablelen (lua_State *L, int idx) {$/;"	f	file:
l	.\3rd\lua\lobject.h	/^    } l;$/;"	m	union:UpVal::__anon8	typeref:struct:UpVal::__anon8::__anon9
l	.\3rd\lua\lobject.h	/^  LClosure l;$/;"	m	union:Closure
l	.\3rd\lua\lstate.c	/^  LX l;$/;"	m	struct:LG	file:
l	.\3rd\lua\lstate.c	/^  lua_State l;$/;"	m	struct:LX	file:
l	.\3rd\lua\lstate.h	/^    } l;$/;"	m	union:CallInfo::__anon17	typeref:struct:CallInfo::__anon17::__anon18
l_G	.\3rd\lua\lobject.h	/^  void *l_G;  \/* global state belongs to *\/$/;"	m	struct:SharedProto
l_G	.\3rd\lua\lstate.h	/^  global_State *l_G;$/;"	m	struct:lua_State
l_alloc	.\3rd\lua\lauxlib.c	/^static void *l_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {$/;"	f	file:
l_d	.\3rd\lua\llimits.h	/^union luai_Cast { double l_d; LUA_INT32 l_p[2]; };$/;"	m	union:luai_Cast
l_fseek	.\3rd\lua\liolib.c	109;"	d	file:
l_fseek	.\3rd\lua\liolib.c	91;"	d	file:
l_fseek	.\3rd\lua\liolib.c	99;"	d	file:
l_ftell	.\3rd\lua\liolib.c	100;"	d	file:
l_ftell	.\3rd\lua\liolib.c	110;"	d	file:
l_ftell	.\3rd\lua\liolib.c	92;"	d	file:
l_gmtime	.\3rd\lua\loslib.c	68;"	d	file:
l_gmtime	.\3rd\lua\loslib.c	73;"	d	file:
l_isfalse	.\3rd\lua\lobject.h	170;"	d
l_localtime	.\3rd\lua\loslib.c	69;"	d	file:
l_localtime	.\3rd\lua\loslib.c	74;"	d	file:
l_mathop	.\3rd\lua\luaconf.h	411;"	d
l_mem	.\3rd\lua\llimits.h	/^typedef LUAI_MEM l_mem;$/;"	t
l_message	.\3rd\lua\lua.c	/^static void l_message (const char *pname, const char *msg) {$/;"	f	file:
l_noret	.\3rd\lua\llimits.h	105;"	d
l_noret	.\3rd\lua\llimits.h	107;"	d
l_noret	.\3rd\lua\llimits.h	109;"	d
l_p	.\3rd\lua\llimits.h	/^union luai_Cast { double l_d; LUA_INT32 l_p[2]; };$/;"	m	union:luai_Cast
l_registry	.\3rd\lua\lstate.h	/^  TValue l_registry;$/;"	m	struct:global_State
l_seeknum	.\3rd\lua\liolib.c	101;"	d	file:
l_seeknum	.\3rd\lua\liolib.c	111;"	d	file:
l_seeknum	.\3rd\lua\liolib.c	93;"	d	file:
l_setbit	.\3rd\lua\lgc.h	81;"	d
l_strcmp	.\3rd\lua\lvm.c	/^static int l_strcmp (const TString *ls, const TString *rs) {$/;"	f	file:
l_uacNumber	.\3rd\lua\llimits.h	/^typedef LUAI_UACNUMBER l_uacNumber;$/;"	t
label	.\3rd\lua\lparser.h	/^  Labellist label;   \/* list of active labels *\/$/;"	m	struct:Dyndata
labelstat	.\3rd\lua\lparser.c	/^static void labelstat (LexState *ls, TString *label, int line) {$/;"	f	file:
laction	.\3rd\lua\lua.c	/^static void laction (int i) {$/;"	f	file:
lapi_c	.\3rd\lua\lapi.c	11;"	d	file:
lapi_h	.\3rd\lua\lapi.h	8;"	d
lastcopy	.\lualib-src\lua-stm.c	/^	struct stm_copy *lastcopy;$/;"	m	struct:boxreader	typeref:struct:boxreader::stm_copy	file:
lastfree	.\3rd\lua\lobject.h	/^  Node *lastfree;  \/* any free position is before this position *\/$/;"	m	struct:Table
lastline	.\3rd\lua\llex.h	/^  int lastline;  \/* line of last token `consumed' *\/$/;"	m	struct:LexState
lastlinedefined	.\3rd\lua\lobject.h	/^  int lastlinedefined;$/;"	m	struct:SharedProto
lastlinedefined	.\3rd\lua\lua.h	/^  int lastlinedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lastlistfield	.\3rd\lua\lparser.c	/^static void lastlistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	file:
lasttarget	.\3rd\lua\lparser.h	/^  int lasttarget;   \/* 'label' of last 'jump label' *\/$/;"	m	struct:FuncState
launch_master	.\lualib\snax\loginserver.lua	/^local function launch_master(conf)$/;"	f
launch_service	.\service\launcher.lua	/^local function launch_service(service, ...)$/;"	f
launch_slave	.\lualib\snax\loginserver.lua	/^local function launch_slave(auth_handler)$/;"	f
lauxlib_c	.\3rd\lua\lauxlib.c	19;"	d	file:
lauxlib_h	.\3rd\lua\lauxlib.h	9;"	d
lb64decode	.\lualib-src\lua-crypt.c	/^lb64decode(lua_State *L) {$/;"	f	file:
lb64encode	.\lualib-src\lua-crypt.c	/^lb64encode(lua_State *L) {$/;"	f	file:
lbaselib_c	.\3rd\lua\lbaselib.c	14;"	d	file:
lbinary	.\lualib-src\lua-bson.c	/^lbinary(lua_State *L) {$/;"	f	file:
lbind	.\lualib-src\lua-socket.c	/^lbind(lua_State *L) {$/;"	f	file:
lbitlib_c	.\3rd\lua\lbitlib.c	7;"	d	file:
lblock	.\lualib-src\lua-memory.c	/^lblock(lua_State *L) {$/;"	f	file:
lboxconf	.\lualib-src\lua-sharedata.c	/^lboxconf(lua_State *L) {$/;"	f	file:
lclear	.\lualib-src\lua-netpack.c	/^lclear(lua_State *L) {$/;"	f	file:
lclearbuffer	.\lualib-src\lua-socket.c	/^lclearbuffer(lua_State *L) {$/;"	f	file:
lclose	.\lualib-src\lua-clientsocket.c	/^lclose(lua_State *L) {$/;"	f	file:
lclose	.\lualib-src\lua-socket.c	/^lclose(lua_State *L) {$/;"	f	file:
lcode_c	.\3rd\lua\lcode.c	10;"	d	file:
lcode_h	.\3rd\lua\lcode.h	8;"	d
lconfig_h	.\3rd\lua\luaconf.h	9;"	d
lconnect	.\lualib-src\lua-clientsocket.c	/^lconnect(lua_State *L) {$/;"	f	file:
lconnect	.\lualib-src\lua-socket.c	/^lconnect(lua_State *L) {$/;"	f	file:
lcopy	.\lualib-src\lua-stm.c	/^lcopy(lua_State *L) {$/;"	f	file:
lcorolib_c	.\3rd\lua\lcorolib.c	11;"	d	file:
lctype_c	.\3rd\lua\lctype.c	7;"	d	file:
lctype_h	.\3rd\lua\lctype.h	8;"	d
ldate	.\lualib-src\lua-bson.c	/^ldate(lua_State *L) {$/;"	f	file:
ldblib_c	.\3rd\lua\ldblib.c	12;"	d	file:
ldebug_c	.\3rd\lua\ldebug.c	13;"	d	file:
ldebug_h	.\3rd\lua\ldebug.h	8;"	d
ldecode	.\lualib-src\lua-bson.c	/^ldecode(lua_State *L) {$/;"	f	file:
ldecode	.\lualib-src\sproto\lsproto.c	/^ldecode(lua_State *L) {$/;"	f	file:
ldecref	.\lualib-src\lua-sharedata.c	/^ldecref(lua_State *L) {$/;"	f	file:
ldeleteconf	.\lualib-src\lua-sharedata.c	/^ldeleteconf(lua_State *L) {$/;"	f	file:
ldeleteproto	.\lualib-src\sproto\lsproto.c	/^ldeleteproto(lua_State *L) {$/;"	f	file:
ldeletereader	.\lualib-src\lua-stm.c	/^ldeletereader(lua_State *L) {$/;"	f	file:
ldeletewriter	.\lualib-src\lua-stm.c	/^ldeletewriter(lua_State *L) {$/;"	f	file:
ldesdecode	.\lualib-src\lua-crypt.c	/^ldesdecode(lua_State *L) {$/;"	f	file:
ldesencode	.\lualib-src\lua-crypt.c	/^ldesencode(lua_State *L) {$/;"	f	file:
ldhexchange	.\lualib-src\lua-crypt.c	/^ldhexchange(lua_State *L) {$/;"	f	file:
ldhsecret	.\lualib-src\lua-crypt.c	/^ldhsecret(lua_State *L) {$/;"	f	file:
ldo_c	.\3rd\lua\ldo.c	12;"	d	file:
ldo_h	.\3rd\lua\ldo.h	8;"	d
ldrop	.\lualib-src\lua-socket.c	/^ldrop(lua_State *L) {$/;"	f	file:
ldump	.\lualib-src\lua-memory.c	/^ldump(lua_State *L) {$/;"	f	file:
ldump_c	.\3rd\lua\ldump.c	9;"	d	file:
ldumpinfo	.\lualib-src\lua-memory.c	/^ldumpinfo(lua_State *L) {$/;"	f	file:
ldumpproto	.\lualib-src\sproto\lsproto.c	/^ldumpproto(lua_State *L) {$/;"	f	file:
leaveblock	.\3rd\lua\lparser.c	/^static void leaveblock (FuncState *fs) {$/;"	f	file:
leavelevel	.\3rd\lua\lparser.c	339;"	d	file:
left	.\3rd\lua\lparser.c	/^  lu_byte left;  \/* left priority for each binary operator *\/$/;"	m	struct:__anon12	file:
len	.\3rd\lua\lobject.h	/^    size_t len;  \/* number of bytes *\/$/;"	m	struct:Udata::__anon7
len	.\3rd\lua\lobject.h	/^    size_t len;  \/* number of characters in string *\/$/;"	m	struct:TString::__anon6
len	.\3rd\lua\lstrlib.c	/^    ptrdiff_t len;$/;"	m	struct:MatchState::__anon20	file:
len	.\lualib-src\lua-seri.c	/^	int len;$/;"	m	struct:read_block	file:
len	.\lualib-src\lua-seri.c	/^	int len;$/;"	m	struct:write_block	file:
lencode	.\lualib-src\lua-bson.c	/^lencode(lua_State *L) {$/;"	f	file:
lencode	.\lualib-src\sproto\lsproto.c	/^lencode(lua_State *L) {$/;"	f	file:
lencode_order	.\lualib-src\lua-bson.c	/^lencode_order(lua_State *L) {$/;"	f	file:
length	.\service-src\service_harbor.c	/^	int length;$/;"	m	struct:slave	file:
level	.\3rd\lua\lstrlib.c	/^  int level;  \/* total number of captures (finished or unfinished) *\/$/;"	m	struct:MatchState	file:
lexerror	.\3rd\lua\llex.c	/^static l_noret lexerror (LexState *ls, const char *msg, int token) {$/;"	f	file:
lfilter	.\lualib-src\lua-netpack.c	/^lfilter(lua_State *L) {$/;"	f	file:
lfreepool	.\lualib-src\lua-socket.c	/^lfreepool(lua_State *L) {$/;"	f	file:
lfromhex	.\lualib-src\lua-crypt.c	/^lfromhex(lua_State *L) {$/;"	f	file:
lfunc_c	.\3rd\lua\lfunc.c	10;"	d	file:
lfunc_h	.\3rd\lua\lfunc.h	8;"	d
lgc_c	.\3rd\lua\lgc.c	9;"	d	file:
lgc_h	.\3rd\lua\lgc.h	8;"	d
lgetref	.\lualib-src\lua-sharedata.c	/^lgetref(lua_State *L) {$/;"	f	file:
lhashkey	.\lualib-src\lua-crypt.c	/^lhashkey(lua_State *L) {$/;"	f	file:
lhashlen	.\lualib-src\lua-sharedata.c	/^lhashlen(lua_State *L) {$/;"	f	file:
lheader	.\lualib-src\lua-socket.c	/^lheader(lua_State *L) {$/;"	f	file:
lhmac64	.\lualib-src\lua-crypt.c	/^lhmac64(lua_State *L) {$/;"	f	file:
lhmac_sha1	.\lualib-src\lsha1.c	/^lhmac_sha1(lua_State *L) {$/;"	f
libsize	.\3rd\lua\lauxlib.c	/^static int libsize (const luaL_Reg *l) {$/;"	f	file:
license	.\3rd\lpeg\lpeg.html	/^<h2><a name="license">License<\/a><\/h2>$/;"	a
license	.\3rd\lpeg\re.html	/^<h2><a name="license">License<\/a><\/h2>$/;"	a
lincref	.\lualib-src\lua-sharedata.c	/^lincref(lua_State *L) {$/;"	f	file:
lindexconf	.\lualib-src\lua-sharedata.c	/^lindexconf(lua_State *L) {$/;"	f	file:
line	.\3rd\lua\lparser.h	/^  int line;  \/* line where it appeared *\/$/;"	m	struct:Labeldesc
linedefined	.\3rd\lua\lobject.h	/^  int linedefined;$/;"	m	struct:SharedProto
linedefined	.\3rd\lua\lua.h	/^  int linedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lineinfo	.\3rd\lua\lobject.h	/^  int *lineinfo;  \/* map from opcodes to source lines (debug information) *\/$/;"	m	struct:SharedProto
linenumber	.\3rd\lua\llex.h	/^  int linenumber;  \/* input line counter *\/$/;"	m	struct:LexState
linit_c	.\3rd\lua\linit.c	16;"	d	file:
link	.\skynet-src\skynet_timer.c	/^link(struct link_list *list,struct timer_node *node) {$/;"	f	file:
link_clear	.\skynet-src\skynet_timer.c	/^link_clear(struct link_list *list) {$/;"	f	file:
link_list	.\skynet-src\skynet_timer.c	/^struct link_list {$/;"	s	file:
linktable	.\3rd\lua\lgc.c	100;"	d	file:
liolib_c	.\3rd\lua\liolib.c	23;"	d	file:
lisdigit	.\3rd\lua\lctype.h	59;"	d
lisdigit	.\3rd\lua\lctype.h	85;"	d
lisdirty	.\lualib-src\lua-sharedata.c	/^lisdirty(lua_State *L) {$/;"	f	file:
lislalnum	.\3rd\lua\lctype.h	58;"	d
lislalnum	.\3rd\lua\lctype.h	84;"	d
lislalpha	.\3rd\lua\lctype.h	57;"	d
lislalpha	.\3rd\lua\lctype.h	83;"	d
lisprint	.\3rd\lua\lctype.h	61;"	d
lisprint	.\3rd\lua\lctype.h	87;"	d
lisspace	.\3rd\lua\lctype.h	60;"	d
lisspace	.\3rd\lua\lctype.h	86;"	d
list_service	.\service\service_mgr.lua	/^local function list_service()$/;"	f
list_uncomplete	.\skynet-src\socket_server.c	/^list_uncomplete(struct wb_list *s) {$/;"	f	file:
listen	.\skynet-src\socket_server.c	/^		struct request_listen listen;$/;"	m	union:request_package::__anon25	typeref:struct:request_package::__anon25::request_listen	file:
listen_id	.\service-src\service_gate.c	/^	int listen_id;$/;"	m	struct:gate	file:
listen_socket	.\skynet-src\socket_server.c	/^listen_socket(struct socket_server *ss, struct request_listen * request, struct socket_message *result) {$/;"	f	file:
listfield	.\3rd\lua\lparser.c	/^static void listfield (LexState *ls, struct ConsControl *cc) {$/;"	f	file:
listing	.\3rd\lua\luac.c	/^static int listing=0;			\/* list bytecodes? *\/$/;"	v	file:
lisxdigit	.\3rd\lua\lctype.h	62;"	d
lisxdigit	.\3rd\lua\lctype.h	88;"	d
little_endian	.\lualib-src\lua-mongo.c	/^little_endian(uint32_t v) {$/;"	f	file:
ll_addtoclib	.\3rd\lua\loadlib.c	/^static void ll_addtoclib (lua_State *L, const char *path, void *plib) {$/;"	f	file:
ll_checkclib	.\3rd\lua\loadlib.c	/^static void *ll_checkclib (lua_State *L, const char *path) {$/;"	f	file:
ll_funcs	.\3rd\lua\loadlib.c	/^static const luaL_Reg ll_funcs[] = {$/;"	v	file:
ll_load	.\3rd\lua\loadlib.c	/^static void *ll_load (lua_State *L, const char *path, int seeglb) {$/;"	f	file:
ll_loadfunc	.\3rd\lua\loadlib.c	/^static int ll_loadfunc (lua_State *L, const char *path, const char *sym) {$/;"	f	file:
ll_loadlib	.\3rd\lua\loadlib.c	/^static int ll_loadlib (lua_State *L) {$/;"	f	file:
ll_module	.\3rd\lua\loadlib.c	/^static int ll_module (lua_State *L) {$/;"	f	file:
ll_require	.\3rd\lua\loadlib.c	/^static int ll_require (lua_State *L) {$/;"	f	file:
ll_searchpath	.\3rd\lua\loadlib.c	/^static int ll_searchpath (lua_State *L) {$/;"	f	file:
ll_seeall	.\3rd\lua\loadlib.c	/^static int ll_seeall (lua_State *L) {$/;"	f	file:
ll_sym	.\3rd\lua\loadlib.c	/^static lua_CFunction ll_sym (lua_State *L, void *lib, const char *sym) {$/;"	f	file:
ll_unloadlib	.\3rd\lua\loadlib.c	/^static void ll_unloadlib (void *lib) {$/;"	f	file:
llen	.\lualib-src\lua-bson.c	/^llen(lua_State *L) {$/;"	f	file:
llen	.\lualib-src\lua-sharedata.c	/^llen(lua_State *L) {$/;"	f	file:
llex	.\3rd\lua\llex.c	/^static int llex (LexState *ls, SemInfo *seminfo) {$/;"	f	file:
llex_c	.\3rd\lua\llex.c	11;"	d	file:
llex_h	.\3rd\lua\llex.h	8;"	d
llimits_h	.\3rd\lua\llimits.h	8;"	d
llisten	.\lualib-src\lua-socket.c	/^llisten(lua_State *L) {$/;"	f	file:
lmakeindex	.\lualib-src\lua-bson.c	/^lmakeindex(lua_State *L) {$/;"	f	file:
lmarkdirty	.\lualib-src\lua-sharedata.c	/^lmarkdirty(lua_State *L) {$/;"	f	file:
lmathlib_c	.\3rd\lua\lmathlib.c	11;"	d	file:
lmd5	.\3rd\lua-md5\md5lib.c	/^static int lmd5 (lua_State *L) {$/;"	f	file:
lmem_c	.\3rd\lua\lmem.c	10;"	d	file:
lmem_h	.\3rd\lua\lmem.h	8;"	d
lmemfind	.\3rd\lua\lstrlib.c	/^static const char *lmemfind (const char *s1, size_t l1,$/;"	f	file:
lmod	.\3rd\lua\lobject.h	582;"	d
lneedupdate	.\lualib-src\lua-sharedata.c	/^lneedupdate(lua_State *L) {$/;"	f	file:
lnewbuffer	.\lualib-src\lua-socket.c	/^lnewbuffer(lua_State *L) {$/;"	f	file:
lnewconf	.\lualib-src\lua-sharedata.c	/^lnewconf(lua_State *L) {$/;"	f	file:
lnewpool	.\lualib-src\lua-socket.c	/^lnewpool(lua_State *L, int sz) {$/;"	f	file:
lnewproto	.\lualib-src\sproto\lsproto.c	/^lnewproto(lua_State *L) {$/;"	f	file:
lnewreader	.\lualib-src\lua-stm.c	/^lnewreader(lua_State *L) {$/;"	f	file:
lnewwriter	.\lualib-src\lua-stm.c	/^lnewwriter(lua_State *L) {$/;"	f	file:
lnextkey	.\lualib-src\lua-sharedata.c	/^lnextkey(lua_State *L) {$/;"	f	file:
lnodelay	.\lualib-src\lua-socket.c	/^lnodelay(lua_State *L) {$/;"	f	file:
load	.\3rd\lua\lauxlib.c	/^load(const char *key) {$/;"	f	file:
load_aux	.\3rd\lua\lbaselib.c	/^static int load_aux (lua_State *L, int status, int envidx) {$/;"	f	file:
load_config	.\skynet-src\skynet_main.c	/^static const char * load_config = "\\$/;"	v	file:
loadconfig	.\service\clusterd.lua	/^local function loadconfig()$/;"	f
loadedlibs	.\3rd\lua\linit.c	/^static const luaL_Reg loadedlibs[] = {$/;"	v	file:
loader	.\lualib\snax\hotfix.lua	/^local function loader(source)$/;"	f
loadfunc	.\3rd\lua\loadlib.c	/^static int loadfunc (lua_State *L, const char *filename, const char *modname) {$/;"	f	file:
loadlib_c	.\3rd\lua\loadlib.c	24;"	d	file:
loadline	.\3rd\lua\lua.c	/^static int loadline (lua_State *L) {$/;"	f	file:
lobject_c	.\3rd\lua\lobject.c	12;"	d	file:
lobject_h	.\3rd\lua\lobject.h	9;"	d
lobjectid	.\lualib-src\lua-bson.c	/^lobjectid(lua_State *L) {$/;"	f	file:
local    new_tab 	.\lualib\mysql.lua	/^local    new_tab = function (narr, nrec) return {} end$/;"	f
local CMD 	.\lualib\snax\gateserver.lua	/^local CMD = setmetatable({}, { __gc = function() netpack.clear(queue) end })$/;"	f
local G 	.\lualib\snax.lua	/^local G = { require = function() end }$/;"	f
local I 	.\3rd\lpeg\re.lua	/^local I = m.P(function (s,i) print(i, s:sub(1, i-1)); return i end)$/;"	f
local c 	.\test\testudp.lua	/^	local c = socket.udp(function(data, sz, from)$/;"	f
local co 	.\lualib\skynet.lua	/^	local co = co_create(function() --创建协程$/;"	f
local defined 	.\3rd\lpeg\re.lua	/^local defined = "%" * Def \/ function (c,Defs)$/;"	f
local exception 	.\lualib\sprotoparser.lua	/^local exception = lpeg.Cmt( lpeg.Carg(1) , function ( _ , pos, parser_state)$/;"	f
local exitfunc 	.\service\snaxd.lua	/^				local exitfunc = method[4] or function() end$/;"	f
local f 	.\lualib\redis.lua	/^	local f = function (self, v, ...)$/;"	f
local function check(n) n 	.\3rd\lpeg\test.lua	/^  local function check(n) n = n or 1; assert(touch == n); touch = 0 end$/;"	f
local initfunc 	.\service\snaxd.lua	/^				local initfunc = method[4] or function() end$/;"	f
local instance 	.\service\launcher.lua	/^local instance = {} -- for confirm (function command.LAUNCH \/ command.ERROR \/ command.LAUNCHOK)$/;"	f
local meta 	.\lualib\snax.lua	/^local meta = { __tostring = function(v) return string.format("[%s:%x]", v.type, v.handle) end}$/;"	f
local ok, err 	.\examples\share.lua	/^	local ok, err = pcall(function()$/;"	f
local ok, err 	.\service\cslave.lua	/^	local ok, err = pcall(function()$/;"	f
local socket_error 	.\lualib\http\sockethelper.lua	/^local socket_error = setmetatable({} , { __tostring = function() return "[Socket Error]" end })$/;"	f
local socket_error 	.\lualib\socketchannel.lua	/^local socket_error = setmetatable({}, {__tostring = function() return "[Error: socket]" end })	-- alias for error object$/;"	f
localfunc	.\3rd\lua\lparser.c	/^static void localfunc (LexState *ls) {$/;"	f	file:
localstat	.\3rd\lua\lparser.c	/^static void localstat (LexState *ls) {$/;"	f	file:
lock	.\3rd\lua\lauxlib.c	/^	int lock;$/;"	m	struct:codecache	file:
lock	.\lualib-src\lua-clientsocket.c	/^	int lock;$/;"	m	struct:queue	file:
lock	.\lualib-src\lua-stm.c	/^	struct rwlock lock;$/;"	m	struct:stm_object	typeref:struct:stm_object::rwlock	file:
lock	.\skynet-src\skynet_env.c	/^	int lock;			\/\/锁$/;"	m	struct:skynet_env	file:
lock	.\skynet-src\skynet_handle.c	/^	struct rwlock lock;	\/\/读写锁$/;"	m	struct:handle_storage	typeref:struct:handle_storage::rwlock	file:
lock	.\skynet-src\skynet_module.c	/^	int lock;\/\/锁$/;"	m	struct:modules	file:
lock	.\skynet-src\skynet_mq.c	/^	int lock;					\/\/锁$/;"	m	struct:global_queue	file:
lock	.\skynet-src\skynet_mq.c	/^	int lock;		\/\/用于实现自旋锁 加锁将这个值设置为1 释放锁将这个值设置为0$/;"	m	struct:message_queue	file:
lock	.\skynet-src\skynet_timer.c	/^	int lock;$/;"	m	struct:timer	file:
locvars	.\3rd\lua\lobject.h	/^  LocVar *locvars;  \/* information about local variables (debug information) *\/$/;"	m	struct:SharedProto
log_blob	.\skynet-src\skynet_log.c	/^log_blob(FILE *f, void * buffer, size_t sz) {$/;"	f	file:
log_socket	.\skynet-src\skynet_log.c	/^log_socket(FILE * f, struct skynet_socket_message * message, size_t sz) {$/;"	f	file:
logfile	.\skynet-src\skynet_server.c	/^	FILE * logfile;					\/\/日志文件句柄$/;"	m	struct:skynet_context	file:
logger	.\service-src\service_logger.c	/^struct logger {$/;"	s	file:
logger	.\skynet-src\skynet_imp.h	/^	const char * logger;		\/\/日志配置$/;"	m	struct:skynet_config
logger_create	.\service-src\service_logger.c	/^logger_create(void) {$/;"	f
logger_init	.\service-src\service_logger.c	/^logger_init(struct logger * inst, struct skynet_context *ctx, const char * parm) {$/;"	f
logger_release	.\service-src\service_logger.c	/^logger_release(struct logger * inst) {$/;"	f
login	.\lualib\snax\loginserver.lua	/^local function login(conf)$/;"	f
logout	.\examples\login\msgagent.lua	/^local function logout()$/;"	f
lookahead	.\3rd\lua\llex.h	/^  Token lookahead;  \/* look ahead token *\/$/;"	m	struct:LexState
lookup_key	.\lualib-src\lua-sharedata.c	/^lookup_key(struct table *tbl, uint32_t keyhash, int key, int keytype, const char *str, size_t sz) {$/;"	f	file:
loopset	.\3rd\lpeg\lptypes.h	99;"	d
lopcodes_c	.\3rd\lua\lopcodes.c	8;"	d	file:
lopcodes_h	.\3rd\lua\lopcodes.h	8;"	d
loslib_c	.\3rd\lua\loslib.c	14;"	d	file:
low	.\skynet-src\socket_server.c	/^	struct wb_list low;		\/\/低$/;"	m	struct:socket	typeref:struct:socket::wb_list	file:
lp_P	.\3rd\lpeg\lptree.c	/^static int lp_P (lua_State *L) {$/;"	f	file:
lp_V	.\3rd\lpeg\lptree.c	/^static int lp_V (lua_State *L) {$/;"	f	file:
lp_and	.\3rd\lpeg\lptree.c	/^static int lp_and (lua_State *L) {$/;"	f	file:
lp_argcapture	.\3rd\lpeg\lptree.c	/^static int lp_argcapture (lua_State *L) {$/;"	f	file:
lp_backref	.\3rd\lpeg\lptree.c	/^static int lp_backref (lua_State *L) {$/;"	f	file:
lp_behind	.\3rd\lpeg\lptree.c	/^static int lp_behind (lua_State *L) {$/;"	f	file:
lp_choice	.\3rd\lpeg\lptree.c	/^static int lp_choice (lua_State *L) {$/;"	f	file:
lp_constcapture	.\3rd\lpeg\lptree.c	/^static int lp_constcapture (lua_State *L) {$/;"	f	file:
lp_divcapture	.\3rd\lpeg\lptree.c	/^static int lp_divcapture (lua_State *L) {$/;"	f	file:
lp_foldcapture	.\3rd\lpeg\lptree.c	/^static int lp_foldcapture (lua_State *L) {$/;"	f	file:
lp_gc	.\3rd\lpeg\lptree.c	/^int lp_gc (lua_State *L) {$/;"	f
lp_groupcapture	.\3rd\lpeg\lptree.c	/^static int lp_groupcapture (lua_State *L) {$/;"	f	file:
lp_locale	.\3rd\lpeg\lptree.c	/^static int lp_locale (lua_State *L) {$/;"	f	file:
lp_match	.\3rd\lpeg\lptree.c	/^static int lp_match (lua_State *L) {$/;"	f	file:
lp_matchtime	.\3rd\lpeg\lptree.c	/^static int lp_matchtime (lua_State *L) {$/;"	f	file:
lp_not	.\3rd\lpeg\lptree.c	/^static int lp_not (lua_State *L) {$/;"	f	file:
lp_poscapture	.\3rd\lpeg\lptree.c	/^static int lp_poscapture (lua_State *L) {$/;"	f	file:
lp_printcode	.\3rd\lpeg\lptree.c	/^static int lp_printcode (lua_State *L) {$/;"	f	file:
lp_printtree	.\3rd\lpeg\lptree.c	/^static int lp_printtree (lua_State *L) {$/;"	f	file:
lp_range	.\3rd\lpeg\lptree.c	/^static int lp_range (lua_State *L) {$/;"	f	file:
lp_seq	.\3rd\lpeg\lptree.c	/^static int lp_seq (lua_State *L) {$/;"	f	file:
lp_set	.\3rd\lpeg\lptree.c	/^static int lp_set (lua_State *L) {$/;"	f	file:
lp_setmax	.\3rd\lpeg\lptree.c	/^static int lp_setmax (lua_State *L) {$/;"	f	file:
lp_simplecapture	.\3rd\lpeg\lptree.c	/^static int lp_simplecapture (lua_State *L) {$/;"	f	file:
lp_star	.\3rd\lpeg\lptree.c	/^static int lp_star (lua_State *L) {$/;"	f	file:
lp_sub	.\3rd\lpeg\lptree.c	/^static int lp_sub (lua_State *L) {$/;"	f	file:
lp_substcapture	.\3rd\lpeg\lptree.c	/^static int lp_substcapture (lua_State *L) {$/;"	f	file:
lp_tablecapture	.\3rd\lpeg\lptree.c	/^static int lp_tablecapture (lua_State *L) {$/;"	f	file:
lp_type	.\3rd\lpeg\lptree.c	/^static int lp_type (lua_State *L) {$/;"	f	file:
lp_version	.\3rd\lpeg\lptree.c	/^static int lp_version (lua_State *L) {$/;"	f	file:
lpack	.\lualib-src\lua-netpack.c	/^lpack(lua_State *L) {$/;"	f	file:
lpack	.\lualib-src\sproto\lsproto.c	/^lpack(lua_State *L) {$/;"	f	file:
lpack_padding	.\lualib-src\lua-netpack.c	/^lpack_padding(lua_State *L) {$/;"	f	file:
lpack_string	.\lualib-src\lua-netpack.c	/^lpack_string(lua_State *L) {$/;"	f	file:
lpackrequest	.\lualib-src\lua-cluster.c	/^lpackrequest(lua_State *L) {$/;"	f	file:
lpackresponse	.\lualib-src\lua-cluster.c	/^lpackresponse(lua_State *L) {$/;"	f	file:
lpackstring	.\lualib-src\lua-skynet.c	/^lpackstring(lua_State *L) {\/\/pack字符串$/;"	f	file:
lparser_c	.\3rd\lua\lparser.c	10;"	d	file:
lparser_h	.\3rd\lua\lparser.h	8;"	d
lpcap_h	.\3rd\lpeg\lpcap.h	6;"	d
lpcode_h	.\3rd\lpeg\lpcode.h	6;"	d
lpop	.\lualib-src\lua-netpack.c	/^lpop(lua_State *L) {$/;"	f	file:
lpopbuffer	.\lualib-src\lua-socket.c	/^lpopbuffer(lua_State *L) {$/;"	f	file:
lpprint_h	.\3rd\lpeg\lpprint.h	7;"	d
lprotocol	.\lualib-src\sproto\lsproto.c	/^lprotocol(lua_State *L) {$/;"	f	file:
lptree_h	.\3rd\lpeg\lptree.h	6;"	d
lptypes_h	.\3rd\lpeg\lptypes.h	9;"	d
lpushbuffer	.\lualib-src\lua-socket.c	/^lpushbuffer(lua_State *L) {$/;"	f	file:
lpvm_h	.\3rd\lpeg\lpvm.h	6;"	d
lquerytype	.\lualib-src\sproto\lsproto.c	/^lquerytype(lua_State *L) {$/;"	f	file:
lrandomkey	.\lualib-src\lua-crypt.c	/^lrandomkey(lua_State *L) {$/;"	f	file:
lread	.\lualib-src\lua-stm.c	/^lread(lua_State *L) {$/;"	f	file:
lreadall	.\lualib-src\lua-socket.c	/^lreadall(lua_State *L) {$/;"	f	file:
lreadline	.\lualib-src\lua-socket.c	/^lreadline(lua_State *L) {$/;"	f	file:
lreadstdin	.\lualib-src\lua-clientsocket.c	/^lreadstdin(lua_State *L) {$/;"	f	file:
lrecv	.\lualib-src\lua-clientsocket.c	/^lrecv(lua_State *L) {$/;"	f	file:
lregex	.\lualib-src\lua-bson.c	/^lregex(lua_State *L) {$/;"	f	file:
lreplace	.\lualib-src\lua-bson.c	/^lreplace(lua_State *L) {$/;"	f	file:
lresume	.\lualib-src\lua-profile.c	/^lresume(lua_State *L) {$/;"	f	file:
ls	.\3rd\lua\lparser.h	/^  struct LexState *ls;  \/* lexical state *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::LexState
lsend	.\lualib-src\lua-clientsocket.c	/^lsend(lua_State *L) {$/;"	f	file:
lsend	.\lualib-src\lua-socket.c	/^lsend(lua_State *L) {$/;"	f	file:
lsendlow	.\lualib-src\lua-socket.c	/^lsendlow(lua_State *L) {$/;"	f	file:
lsha1	.\lualib-src\lsha1.c	/^lsha1(lua_State *L) {$/;"	f
lsizenode	.\3rd\lua\lobject.h	/^  lu_byte lsizenode;  \/* log2 of size of `node' array *\/$/;"	m	struct:Table
lstart	.\lualib-src\lua-profile.c	/^lstart(lua_State *L) {$/;"	f	file:
lstart	.\lualib-src\lua-socket.c	/^lstart(lua_State *L) {$/;"	f	file:
lstate_c	.\3rd\lua\lstate.c	11;"	d	file:
lstate_h	.\3rd\lua\lstate.h	8;"	d
lstop	.\3rd\lua\lua.c	/^static void lstop (lua_State *L, lua_Debug *ar) {$/;"	f	file:
lstop	.\lualib-src\lua-profile.c	/^lstop(lua_State *L) {$/;"	f	file:
lstr2p	.\lualib-src\lua-socket.c	/^lstr2p(lua_State *L) {$/;"	f	file:
lstring_c	.\3rd\lua\lstring.c	10;"	d	file:
lstring_h	.\3rd\lua\lstring.h	8;"	d
lstrlib_c	.\3rd\lua\lstrlib.c	14;"	d	file:
lsubtype	.\lualib-src\lua-bson.c	/^lsubtype(lua_State *L, int subtype, const uint8_t * buf, size_t sz) {$/;"	f	file:
ltable_c	.\3rd\lua\ltable.c	23;"	d	file:
ltable_h	.\3rd\lua\ltable.h	8;"	d
ltablib_c	.\3rd\lua\ltablib.c	10;"	d	file:
ltimestamp	.\lualib-src\lua-bson.c	/^ltimestamp(lua_State *L) {$/;"	f	file:
ltm_c	.\3rd\lua\ltm.c	10;"	d	file:
ltm_h	.\3rd\lua\ltm.h	8;"	d
ltohex	.\lualib-src\lua-crypt.c	/^ltohex(lua_State *L) {$/;"	f	file:
ltolower	.\3rd\lua\lctype.h	67;"	d
ltolower	.\3rd\lua\lctype.h	90;"	d
ltostring	.\lualib-src\lua-bson.c	/^ltostring(lua_State *L) {$/;"	f	file:
ltostring	.\lualib-src\lua-netpack.c	/^ltostring(lua_State *L) {$/;"	f	file:
ltotal	.\lualib-src\lua-memory.c	/^ltotal(lua_State *L) {$/;"	f	file:
ltrash	.\lualib-src\lua-skynet.c	/^ltrash(lua_State *L) {$/;"	f	file:
ltype	.\lualib-src\lua-bson.c	/^ltype(lua_State *L) {$/;"	f	file:
lu_byte	.\3rd\lua\llimits.h	/^typedef unsigned char lu_byte;$/;"	t
lu_int32	.\3rd\lua\llimits.h	/^typedef unsigned LUA_INT32 lu_int32;$/;"	t
lu_mem	.\3rd\lua\llimits.h	/^typedef LUAI_UMEM lu_mem;$/;"	t
luaB_assert	.\3rd\lua\lbaselib.c	/^static int luaB_assert (lua_State *L) {$/;"	f	file:
luaB_auxwrap	.\3rd\lua\lcorolib.c	/^static int luaB_auxwrap (lua_State *L) {$/;"	f	file:
luaB_cocreate	.\3rd\lua\lcorolib.c	/^static int luaB_cocreate (lua_State *L) {$/;"	f	file:
luaB_collectgarbage	.\3rd\lua\lbaselib.c	/^static int luaB_collectgarbage (lua_State *L) {$/;"	f	file:
luaB_coresume	.\3rd\lua\lcorolib.c	/^static int luaB_coresume (lua_State *L) {$/;"	f	file:
luaB_corunning	.\3rd\lua\lcorolib.c	/^static int luaB_corunning (lua_State *L) {$/;"	f	file:
luaB_costatus	.\3rd\lua\lcorolib.c	/^static int luaB_costatus (lua_State *L) {$/;"	f	file:
luaB_cowrap	.\3rd\lua\lcorolib.c	/^static int luaB_cowrap (lua_State *L) {$/;"	f	file:
luaB_dofile	.\3rd\lua\lbaselib.c	/^static int luaB_dofile (lua_State *L) {$/;"	f	file:
luaB_error	.\3rd\lua\lbaselib.c	/^static int luaB_error (lua_State *L) {$/;"	f	file:
luaB_getmetatable	.\3rd\lua\lbaselib.c	/^static int luaB_getmetatable (lua_State *L) {$/;"	f	file:
luaB_ipairs	.\3rd\lua\lbaselib.c	/^static int luaB_ipairs (lua_State *L) {$/;"	f	file:
luaB_load	.\3rd\lua\lbaselib.c	/^static int luaB_load (lua_State *L) {$/;"	f	file:
luaB_loadfile	.\3rd\lua\lbaselib.c	/^static int luaB_loadfile (lua_State *L) {$/;"	f	file:
luaB_next	.\3rd\lua\lbaselib.c	/^static int luaB_next (lua_State *L) {$/;"	f	file:
luaB_pairs	.\3rd\lua\lbaselib.c	/^static int luaB_pairs (lua_State *L) {$/;"	f	file:
luaB_pcall	.\3rd\lua\lbaselib.c	/^static int luaB_pcall (lua_State *L) {$/;"	f	file:
luaB_print	.\3rd\lua\lbaselib.c	/^static int luaB_print (lua_State *L) {$/;"	f	file:
luaB_rawequal	.\3rd\lua\lbaselib.c	/^static int luaB_rawequal (lua_State *L) {$/;"	f	file:
luaB_rawget	.\3rd\lua\lbaselib.c	/^static int luaB_rawget (lua_State *L) {$/;"	f	file:
luaB_rawlen	.\3rd\lua\lbaselib.c	/^static int luaB_rawlen (lua_State *L) {$/;"	f	file:
luaB_rawset	.\3rd\lua\lbaselib.c	/^static int luaB_rawset (lua_State *L) {$/;"	f	file:
luaB_select	.\3rd\lua\lbaselib.c	/^static int luaB_select (lua_State *L) {$/;"	f	file:
luaB_setmetatable	.\3rd\lua\lbaselib.c	/^static int luaB_setmetatable (lua_State *L) {$/;"	f	file:
luaB_tonumber	.\3rd\lua\lbaselib.c	/^static int luaB_tonumber (lua_State *L) {$/;"	f	file:
luaB_tostring	.\3rd\lua\lbaselib.c	/^static int luaB_tostring (lua_State *L) {$/;"	f	file:
luaB_type	.\3rd\lua\lbaselib.c	/^static int luaB_type (lua_State *L) {$/;"	f	file:
luaB_xpcall	.\3rd\lua\lbaselib.c	/^static int luaB_xpcall (lua_State *L) {$/;"	f	file:
luaB_yield	.\3rd\lua\lcorolib.c	/^static int luaB_yield (lua_State *L) {$/;"	f	file:
luaC_barrier	.\3rd\lua\lgc.h	127;"	d
luaC_barrier_	.\3rd\lua\lgc.c	/^void luaC_barrier_ (lua_State *L, GCObject *o, GCObject *v) {$/;"	f
luaC_barrierback	.\3rd\lua\lgc.h	130;"	d
luaC_barrierback_	.\3rd\lua\lgc.c	/^void luaC_barrierback_ (lua_State *L, GCObject *o) {$/;"	f
luaC_barrierproto	.\3rd\lua\lgc.h	140;"	d
luaC_barrierproto_	.\3rd\lua\lgc.c	/^LUAI_FUNC void luaC_barrierproto_ (lua_State *L, Proto *p, Closure *c) {$/;"	f
luaC_changemode	.\3rd\lua\lgc.c	/^void luaC_changemode (lua_State *L, int mode) {$/;"	f
luaC_checkGC	.\3rd\lua\lgc.h	124;"	d
luaC_checkfinalizer	.\3rd\lua\lgc.c	/^void luaC_checkfinalizer (lua_State *L, GCObject *o, Table *mt) {$/;"	f
luaC_checkupvalcolor	.\3rd\lua\lgc.c	/^void luaC_checkupvalcolor (global_State *g, UpVal *uv) {$/;"	f
luaC_condGC	.\3rd\lua\lgc.h	122;"	d
luaC_forcestep	.\3rd\lua\lgc.c	/^void luaC_forcestep (lua_State *L) {$/;"	f
luaC_freeallobjects	.\3rd\lua\lgc.c	/^void luaC_freeallobjects (lua_State *L) {$/;"	f
luaC_fullgc	.\3rd\lua\lgc.c	/^void luaC_fullgc (lua_State *L, int isemergency) {$/;"	f
luaC_newobj	.\3rd\lua\lgc.c	/^GCObject *luaC_newobj (lua_State *L, int tt, size_t sz, GCObject **list,$/;"	f
luaC_objbarrier	.\3rd\lua\lgc.h	133;"	d
luaC_objbarrierback	.\3rd\lua\lgc.h	137;"	d
luaC_runtilstate	.\3rd\lua\lgc.c	/^void luaC_runtilstate (lua_State *L, int statesmask) {$/;"	f
luaC_step	.\3rd\lua\lgc.c	/^void luaC_step (lua_State *L) {$/;"	f
luaC_white	.\3rd\lua\lgc.h	119;"	d
luaD_call	.\3rd\lua\ldo.c	/^void luaD_call (lua_State *L, StkId func, int nResults, int allowyield) {$/;"	f
luaD_checkstack	.\3rd\lua\ldo.h	16;"	d
luaD_growstack	.\3rd\lua\ldo.c	/^void luaD_growstack (lua_State *L, int n) {$/;"	f
luaD_hook	.\3rd\lua\ldo.c	/^void luaD_hook (lua_State *L, int event, int line) {$/;"	f
luaD_pcall	.\3rd\lua\ldo.c	/^int luaD_pcall (lua_State *L, Pfunc func, void *u,$/;"	f
luaD_poscall	.\3rd\lua\ldo.c	/^int luaD_poscall (lua_State *L, StkId firstResult) {$/;"	f
luaD_precall	.\3rd\lua\ldo.c	/^int luaD_precall (lua_State *L, StkId func, int nresults) {$/;"	f
luaD_protectedparser	.\3rd\lua\ldo.c	/^int luaD_protectedparser (lua_State *L, ZIO *z, const char *name,$/;"	f
luaD_rawrunprotected	.\3rd\lua\ldo.c	/^int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {$/;"	f
luaD_reallocstack	.\3rd\lua\ldo.c	/^void luaD_reallocstack (lua_State *L, int newsize) {$/;"	f
luaD_shrinkstack	.\3rd\lua\ldo.c	/^void luaD_shrinkstack (lua_State *L) {$/;"	f
luaD_throw	.\3rd\lua\ldo.c	/^l_noret luaD_throw (lua_State *L, int errcode) {$/;"	f
luaE_extendCI	.\3rd\lua\lstate.c	/^CallInfo *luaE_extendCI (lua_State *L) {$/;"	f
luaE_freeCI	.\3rd\lua\lstate.c	/^void luaE_freeCI (lua_State *L) {$/;"	f
luaE_freethread	.\3rd\lua\lstate.c	/^void luaE_freethread (lua_State *L, lua_State *L1) {$/;"	f
luaE_setdebt	.\3rd\lua\lstate.c	/^void luaE_setdebt (global_State *g, l_mem debt) {$/;"	f
luaF_close	.\3rd\lua\lfunc.c	/^void luaF_close (lua_State *L, StkId level) {$/;"	f
luaF_findupval	.\3rd\lua\lfunc.c	/^UpVal *luaF_findupval (lua_State *L, StkId level) {$/;"	f
luaF_freeproto	.\3rd\lua\lfunc.c	/^void luaF_freeproto (lua_State *L, Proto *f) {$/;"	f
luaF_freesharedproto	.\3rd\lua\lfunc.c	/^luaF_freesharedproto (lua_State *L, SharedProto *f) {$/;"	f	file:
luaF_freeupval	.\3rd\lua\lfunc.c	/^void luaF_freeupval (lua_State *L, UpVal *uv) {$/;"	f
luaF_getlocalname	.\3rd\lua\lfunc.c	/^const char *luaF_getlocalname (const Proto *fp, int local_number, int pc) {$/;"	f
luaF_newCclosure	.\3rd\lua\lfunc.c	/^Closure *luaF_newCclosure (lua_State *L, int n) {$/;"	f
luaF_newLclosure	.\3rd\lua\lfunc.c	/^Closure *luaF_newLclosure (lua_State *L, int n) {$/;"	f
luaF_newproto	.\3rd\lua\lfunc.c	/^Proto *luaF_newproto (lua_State *L, SharedProto *sp) {$/;"	f
luaF_newupval	.\3rd\lua\lfunc.c	/^UpVal *luaF_newupval (lua_State *L) {$/;"	f
luaG_aritherror	.\3rd\lua\ldebug.c	/^l_noret luaG_aritherror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_concaterror	.\3rd\lua\ldebug.c	/^l_noret luaG_concaterror (lua_State *L, StkId p1, StkId p2) {$/;"	f
luaG_errormsg	.\3rd\lua\ldebug.c	/^l_noret luaG_errormsg (lua_State *L) {$/;"	f
luaG_ordererror	.\3rd\lua\ldebug.c	/^l_noret luaG_ordererror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_runerror	.\3rd\lua\ldebug.c	/^l_noret luaG_runerror (lua_State *L, const char *fmt, ...) {$/;"	f
luaG_typeerror	.\3rd\lua\ldebug.c	/^l_noret luaG_typeerror (lua_State *L, const TValue *o, const char *op) {$/;"	f
luaH_free	.\3rd\lua\ltable.c	/^void luaH_free (lua_State *L, Table *t) {$/;"	f
luaH_get	.\3rd\lua\ltable.c	/^const TValue *luaH_get (Table *t, const TValue *key) {$/;"	f
luaH_getint	.\3rd\lua\ltable.c	/^const TValue *luaH_getint (Table *t, int key) {$/;"	f
luaH_getn	.\3rd\lua\ltable.c	/^int luaH_getn (Table *t) {$/;"	f
luaH_getstr	.\3rd\lua\ltable.c	/^const TValue *luaH_getstr (Table *t, TString *key) {$/;"	f
luaH_isdummy	.\3rd\lua\ltable.c	/^int luaH_isdummy (Node *n) { return isdummy(n); }$/;"	f
luaH_mainposition	.\3rd\lua\ltable.c	/^Node *luaH_mainposition (const Table *t, const TValue *key) {$/;"	f
luaH_new	.\3rd\lua\ltable.c	/^Table *luaH_new (lua_State *L) {$/;"	f
luaH_newkey	.\3rd\lua\ltable.c	/^TValue *luaH_newkey (lua_State *L, Table *t, const TValue *key) {$/;"	f
luaH_next	.\3rd\lua\ltable.c	/^int luaH_next (lua_State *L, Table *t, StkId key) {$/;"	f
luaH_resize	.\3rd\lua\ltable.c	/^void luaH_resize (lua_State *L, Table *t, int nasize, int nhsize) {$/;"	f
luaH_resizearray	.\3rd\lua\ltable.c	/^void luaH_resizearray (lua_State *L, Table *t, int nasize) {$/;"	f
luaH_set	.\3rd\lua\ltable.c	/^TValue *luaH_set (lua_State *L, Table *t, const TValue *key) {$/;"	f
luaH_setint	.\3rd\lua\ltable.c	/^void luaH_setint (lua_State *L, Table *t, int key, TValue *value) {$/;"	f
luaK_checkstack	.\3rd\lua\lcode.c	/^void luaK_checkstack (FuncState *fs, int n) {$/;"	f
luaK_code	.\3rd\lua\lcode.c	/^static int luaK_code (FuncState *fs, Instruction i) {$/;"	f	file:
luaK_codeABC	.\3rd\lua\lcode.c	/^int luaK_codeABC (FuncState *fs, OpCode o, int a, int b, int c) {$/;"	f
luaK_codeABx	.\3rd\lua\lcode.c	/^int luaK_codeABx (FuncState *fs, OpCode o, int a, unsigned int bc) {$/;"	f
luaK_codeAsBx	.\3rd\lua\lcode.h	41;"	d
luaK_codek	.\3rd\lua\lcode.c	/^int luaK_codek (FuncState *fs, int reg, int k) {$/;"	f
luaK_concat	.\3rd\lua\lcode.c	/^void luaK_concat (FuncState *fs, int *l1, int l2) {$/;"	f
luaK_dischargevars	.\3rd\lua\lcode.c	/^void luaK_dischargevars (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2RK	.\3rd\lua\lcode.c	/^int luaK_exp2RK (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2anyreg	.\3rd\lua\lcode.c	/^int luaK_exp2anyreg (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2anyregup	.\3rd\lua\lcode.c	/^void luaK_exp2anyregup (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2nextreg	.\3rd\lua\lcode.c	/^void luaK_exp2nextreg (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2val	.\3rd\lua\lcode.c	/^void luaK_exp2val (FuncState *fs, expdesc *e) {$/;"	f
luaK_fixline	.\3rd\lua\lcode.c	/^void luaK_fixline (FuncState *fs, int line) {$/;"	f
luaK_getlabel	.\3rd\lua\lcode.c	/^int luaK_getlabel (FuncState *fs) {$/;"	f
luaK_goiffalse	.\3rd\lua\lcode.c	/^void luaK_goiffalse (FuncState *fs, expdesc *e) {$/;"	f
luaK_goiftrue	.\3rd\lua\lcode.c	/^void luaK_goiftrue (FuncState *fs, expdesc *e) {$/;"	f
luaK_indexed	.\3rd\lua\lcode.c	/^void luaK_indexed (FuncState *fs, expdesc *t, expdesc *k) {$/;"	f
luaK_infix	.\3rd\lua\lcode.c	/^void luaK_infix (FuncState *fs, BinOpr op, expdesc *v) {$/;"	f
luaK_jump	.\3rd\lua\lcode.c	/^int luaK_jump (FuncState *fs) {$/;"	f
luaK_jumpto	.\3rd\lua\lcode.h	45;"	d
luaK_nil	.\3rd\lua\lcode.c	/^void luaK_nil (FuncState *fs, int from, int n) {$/;"	f
luaK_numberK	.\3rd\lua\lcode.c	/^int luaK_numberK (FuncState *fs, lua_Number r) {$/;"	f
luaK_patchclose	.\3rd\lua\lcode.c	/^LUAI_FUNC void luaK_patchclose (FuncState *fs, int list, int level) {$/;"	f
luaK_patchlist	.\3rd\lua\lcode.c	/^void luaK_patchlist (FuncState *fs, int list, int target) {$/;"	f
luaK_patchtohere	.\3rd\lua\lcode.c	/^void luaK_patchtohere (FuncState *fs, int list) {$/;"	f
luaK_posfix	.\3rd\lua\lcode.c	/^void luaK_posfix (FuncState *fs, BinOpr op,$/;"	f
luaK_prefix	.\3rd\lua\lcode.c	/^void luaK_prefix (FuncState *fs, UnOpr op, expdesc *e, int line) {$/;"	f
luaK_reserveregs	.\3rd\lua\lcode.c	/^void luaK_reserveregs (FuncState *fs, int n) {$/;"	f
luaK_ret	.\3rd\lua\lcode.c	/^void luaK_ret (FuncState *fs, int first, int nret) {$/;"	f
luaK_self	.\3rd\lua\lcode.c	/^void luaK_self (FuncState *fs, expdesc *e, expdesc *key) {$/;"	f
luaK_setlist	.\3rd\lua\lcode.c	/^void luaK_setlist (FuncState *fs, int base, int nelems, int tostore) {$/;"	f
luaK_setmultret	.\3rd\lua\lcode.h	43;"	d
luaK_setoneret	.\3rd\lua\lcode.c	/^void luaK_setoneret (FuncState *fs, expdesc *e) {$/;"	f
luaK_setreturns	.\3rd\lua\lcode.c	/^void luaK_setreturns (FuncState *fs, expdesc *e, int nresults) {$/;"	f
luaK_storevar	.\3rd\lua\lcode.c	/^void luaK_storevar (FuncState *fs, expdesc *var, expdesc *ex) {$/;"	f
luaK_stringK	.\3rd\lua\lcode.c	/^int luaK_stringK (FuncState *fs, TString *s) {$/;"	f
luaL_Buffer	.\3rd\lua\lauxlib.h	/^typedef struct luaL_Buffer {$/;"	s
luaL_Buffer	.\3rd\lua\lauxlib.h	/^} luaL_Buffer;$/;"	t	typeref:struct:luaL_Buffer
luaL_Reg	.\3rd\lua-md5\compat-5.2.h	3;"	d
luaL_Reg	.\3rd\lua\lauxlib.h	/^typedef struct luaL_Reg {$/;"	s
luaL_Reg	.\3rd\lua\lauxlib.h	/^} luaL_Reg;$/;"	t	typeref:struct:luaL_Reg
luaL_Stream	.\3rd\lua\lauxlib.h	/^typedef struct luaL_Stream {$/;"	s
luaL_Stream	.\3rd\lua\lauxlib.h	/^} luaL_Stream;$/;"	t	typeref:struct:luaL_Stream
luaL_addchar	.\3rd\lua-md5\compat-5.2.h	5;"	d
luaL_addchar	.\3rd\lua\lauxlib.h	152;"	d
luaL_addlstring	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l) {$/;"	f
luaL_addsize	.\3rd\lua\lauxlib.h	156;"	d
luaL_addstring	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_addstring (luaL_Buffer *B, const char *s) {$/;"	f
luaL_addvalue	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_addvalue (luaL_Buffer *B) {$/;"	f
luaL_argcheck	.\3rd\lua\lauxlib.h	113;"	d
luaL_argerror	.\3rd\lua\lauxlib.c	/^LUALIB_API int luaL_argerror (lua_State *L, int narg, const char *extramsg) {$/;"	f
luaL_buffinit	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_buffinit (lua_State *L, luaL_Buffer *B) {$/;"	f
luaL_buffinitsize	.\3rd\lua\lauxlib.c	/^LUALIB_API char *luaL_buffinitsize (lua_State *L, luaL_Buffer *B, size_t sz) {$/;"	f
luaL_callmeta	.\3rd\lua\lauxlib.c	/^LUALIB_API int luaL_callmeta (lua_State *L, int obj, const char *event) {$/;"	f
luaL_checkany	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_checkany (lua_State *L, int narg) {$/;"	f
luaL_checkint	.\3rd\lua\lauxlib.h	117;"	d
luaL_checkinteger	.\3rd\lua\lauxlib.c	/^LUALIB_API lua_Integer luaL_checkinteger (lua_State *L, int narg) {$/;"	f
luaL_checklong	.\3rd\lua\lauxlib.h	119;"	d
luaL_checklstring	.\3rd\lua\lauxlib.c	/^LUALIB_API const char *luaL_checklstring (lua_State *L, int narg, size_t *len) {$/;"	f
luaL_checknumber	.\3rd\lua\lauxlib.c	/^LUALIB_API lua_Number luaL_checknumber (lua_State *L, int narg) {$/;"	f
luaL_checkoption	.\3rd\lua\lauxlib.c	/^LUALIB_API int luaL_checkoption (lua_State *L, int narg, const char *def,$/;"	f
luaL_checkstack	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_checkstack (lua_State *L, int space, const char *msg) {$/;"	f
luaL_checkstring	.\3rd\lua\lauxlib.h	115;"	d
luaL_checktype	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_checktype (lua_State *L, int narg, int t) {$/;"	f
luaL_checkudata	.\3rd\lua\lauxlib.c	/^LUALIB_API void *luaL_checkudata (lua_State *L, int ud, const char *tname) {$/;"	f
luaL_checkunsigned	.\3rd\lua\lauxlib.c	/^LUALIB_API lua_Unsigned luaL_checkunsigned (lua_State *L, int narg) {$/;"	f
luaL_checkversion	.\3rd\lua\lauxlib.h	30;"	d
luaL_checkversion_	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_checkversion_ (lua_State *L, lua_Number ver) {$/;"	f
luaL_dofile	.\3rd\lua\lauxlib.h	124;"	d
luaL_dostring	.\3rd\lua\lauxlib.h	127;"	d
luaL_error	.\3rd\lua\lauxlib.c	/^LUALIB_API int luaL_error (lua_State *L, const char *fmt, ...) {$/;"	f
luaL_execresult	.\3rd\lua\lauxlib.c	/^LUALIB_API int luaL_execresult (lua_State *L, int stat) {$/;"	f
luaL_fileresult	.\3rd\lua\lauxlib.c	/^LUALIB_API int luaL_fileresult (lua_State *L, int stat, const char *fname) {$/;"	f
luaL_findtable	.\3rd\lua\lauxlib.c	/^static const char *luaL_findtable (lua_State *L, int idx,$/;"	f	file:
luaL_getmetafield	.\3rd\lua\lauxlib.c	/^LUALIB_API int luaL_getmetafield (lua_State *L, int obj, const char *event) {$/;"	f
luaL_getmetatable	.\3rd\lua\lauxlib.h	130;"	d
luaL_getsubtable	.\3rd\lua\lauxlib.c	/^LUALIB_API int luaL_getsubtable (lua_State *L, int idx, const char *fname) {$/;"	f
luaL_gsub	.\3rd\lua\lauxlib.c	/^LUALIB_API const char *luaL_gsub (lua_State *L, const char *s, const char *p,$/;"	f
luaL_len	.\3rd\lua\lauxlib.c	/^LUALIB_API int luaL_len (lua_State *L, int idx) {$/;"	f
luaL_loadbuffer	.\3rd\lua\lauxlib.h	134;"	d
luaL_loadbufferx	.\3rd\lua\lauxlib.c	/^LUALIB_API int luaL_loadbufferx (lua_State *L, const char *buff, size_t size,$/;"	f
luaL_loadfile	.\3rd\lua\lauxlib.h	78;"	d
luaL_loadfilex	.\3rd\lua\lauxlib.c	/^LUALIB_API int luaL_loadfilex (lua_State *L, const char *filename,$/;"	f
luaL_loadfilex_	.\3rd\lua\lauxlib.c	/^static int luaL_loadfilex_ (lua_State *L, const char *filename,$/;"	f	file:
luaL_loadstring	.\3rd\lua\lauxlib.c	/^LUALIB_API int luaL_loadstring (lua_State *L, const char *s) {$/;"	f
luaL_newlib	.\3rd\lua\lauxlib.h	111;"	d
luaL_newlib	.\lualib-src\sproto\lsproto.c	38;"	d	file:
luaL_newlibtable	.\3rd\lua\lauxlib.h	108;"	d
luaL_newlibtable	.\lualib-src\sproto\lsproto.c	35;"	d	file:
luaL_newmetatable	.\3rd\lua\lauxlib.c	/^LUALIB_API int luaL_newmetatable (lua_State *L, const char *tname) {$/;"	f
luaL_newstate	.\3rd\lua\lauxlib.c	/^LUALIB_API lua_State *luaL_newstate (void) {$/;"	f
luaL_openlib	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_openlib (lua_State *L, const char *libname,$/;"	f
luaL_openlibs	.\3rd\lua\linit.c	/^LUALIB_API void luaL_openlibs (lua_State *L) {$/;"	f
luaL_opt	.\3rd\lua\lauxlib.h	132;"	d
luaL_optint	.\3rd\lua\lauxlib.h	118;"	d
luaL_optinteger	.\3rd\lua\lauxlib.c	/^LUALIB_API lua_Integer luaL_optinteger (lua_State *L, int narg,$/;"	f
luaL_optlong	.\3rd\lua\lauxlib.h	120;"	d
luaL_optlstring	.\3rd\lua\lauxlib.c	/^LUALIB_API const char *luaL_optlstring (lua_State *L, int narg,$/;"	f
luaL_optnumber	.\3rd\lua\lauxlib.c	/^LUALIB_API lua_Number luaL_optnumber (lua_State *L, int narg, lua_Number def) {$/;"	f
luaL_optstring	.\3rd\lua\lauxlib.h	116;"	d
luaL_optunsigned	.\3rd\lua\lauxlib.c	/^LUALIB_API lua_Unsigned luaL_optunsigned (lua_State *L, int narg,$/;"	f
luaL_prepbuffer	.\3rd\lua\lauxlib.h	167;"	d
luaL_prepbuffsize	.\3rd\lua\lauxlib.c	/^LUALIB_API char *luaL_prepbuffsize (luaL_Buffer *B, size_t sz) {$/;"	f
luaL_pushmodule	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_pushmodule (lua_State *L, const char *modname,$/;"	f
luaL_pushresult	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_pushresult (luaL_Buffer *B) {$/;"	f
luaL_pushresultsize	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_pushresultsize (luaL_Buffer *B, size_t sz) {$/;"	f
luaL_ref	.\3rd\lua\lauxlib.c	/^LUALIB_API int luaL_ref (lua_State *L, int t) {$/;"	f
luaL_register	.\3rd\lpeg\lptypes.h	45;"	d
luaL_register	.\3rd\lpeg\lptypes.h	46;"	d
luaL_register	.\3rd\lua\lauxlib.h	205;"	d
luaL_requiref	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_requiref (lua_State *L, const char *modname,$/;"	f
luaL_setfuncs	.\3rd\lua-md5\compat-5.2.c	/^void luaL_setfuncs (lua_State *L, const luaL_Reg *l, int nup) {$/;"	f
luaL_setfuncs	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_setfuncs (lua_State *L, const luaL_Reg *l, int nup) {$/;"	f
luaL_setfuncs	.\lualib-src\sproto\lsproto.c	/^LUALIB_API void luaL_setfuncs (lua_State *L, const luaL_Reg *l, int nup) {$/;"	f
luaL_setmetatable	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_setmetatable (lua_State *L, const char *tname) {$/;"	f
luaL_testudata	.\3rd\lua\lauxlib.c	/^LUALIB_API void *luaL_testudata (lua_State *L, int ud, const char *tname) {$/;"	f
luaL_tolstring	.\3rd\lua\lauxlib.c	/^LUALIB_API const char *luaL_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f
luaL_traceback	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_traceback (lua_State *L, lua_State *L1,$/;"	f
luaL_typename	.\3rd\lua\lauxlib.h	122;"	d
luaL_unref	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_unref (lua_State *L, int t, int ref) {$/;"	f
luaL_where	.\3rd\lua\lauxlib.c	/^LUALIB_API void luaL_where (lua_State *L, int level) {$/;"	f
luaM_free	.\3rd\lua\lmem.h	30;"	d
luaM_freearray	.\3rd\lua\lmem.h	31;"	d
luaM_freemem	.\3rd\lua\lmem.h	29;"	d
luaM_growaux_	.\3rd\lua\lmem.c	/^void *luaM_growaux_ (lua_State *L, void *block, int *size, size_t size_elems,$/;"	f
luaM_growvector	.\3rd\lua\lmem.h	40;"	d
luaM_malloc	.\3rd\lua\lmem.h	33;"	d
luaM_new	.\3rd\lua\lmem.h	34;"	d
luaM_newobject	.\3rd\lua\lmem.h	38;"	d
luaM_newvector	.\3rd\lua\lmem.h	35;"	d
luaM_realloc_	.\3rd\lua\lmem.c	/^void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {$/;"	f
luaM_reallocv	.\3rd\lua\lmem.h	24;"	d
luaM_reallocvector	.\3rd\lua\lmem.h	44;"	d
luaM_toobig	.\3rd\lua\lmem.c	/^l_noret luaM_toobig (lua_State *L) {$/;"	f
luaO_arith	.\3rd\lua\lobject.c	/^lua_Number luaO_arith (int op, lua_Number v1, lua_Number v2) {$/;"	f
luaO_ceillog2	.\3rd\lua\lobject.c	/^int luaO_ceillog2 (unsigned int x) {$/;"	f
luaO_chunkid	.\3rd\lua\lobject.c	/^void luaO_chunkid (char *out, const char *source, size_t bufflen) {$/;"	f
luaO_fb2int	.\3rd\lua\lobject.c	/^int luaO_fb2int (int x) {$/;"	f
luaO_hexavalue	.\3rd\lua\lobject.c	/^int luaO_hexavalue (int c) {$/;"	f
luaO_int2fb	.\3rd\lua\lobject.c	/^int luaO_int2fb (unsigned int x) {$/;"	f
luaO_nilobject	.\3rd\lua\lobject.h	593;"	d
luaO_nilobject_	.\3rd\lua\lobject.c	/^LUAI_DDEF const TValue luaO_nilobject_ = {NILCONSTANT};$/;"	v
luaO_nilobject_	.\3rd\lua\lobject.h	/^LUAI_DDEC const TValue luaO_nilobject_;$/;"	v
luaO_pushfstring	.\3rd\lua\lobject.c	/^const char *luaO_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f
luaO_pushvfstring	.\3rd\lua\lobject.c	/^const char *luaO_pushvfstring (lua_State *L, const char *fmt, va_list argp) {$/;"	f
luaO_str2d	.\3rd\lua\lobject.c	/^int luaO_str2d (const char *s, size_t len, lua_Number *result) {$/;"	f
luaP_opmodes	.\3rd\lua\lopcodes.c	/^LUAI_DDEF const lu_byte luaP_opmodes[NUM_OPCODES] = {$/;"	v
luaP_opmodes	.\3rd\lua\lopcodes.h	/^LUAI_DDEC const lu_byte luaP_opmodes[NUM_OPCODES];$/;"	v
luaP_opnames	.\3rd\lua\lopcodes.c	/^LUAI_DDEF const char *const luaP_opnames[NUM_OPCODES+1] = {$/;"	v
luaP_opnames	.\3rd\lua\lopcodes.h	/^LUAI_DDEC const char *const luaP_opnames[NUM_OPCODES+1];  \/* opcode names *\/$/;"	v
luaS_eqlngstr	.\3rd\lua\lstring.c	/^int luaS_eqlngstr (TString *a, TString *b) {$/;"	f
luaS_eqstr	.\3rd\lua\lstring.c	/^int luaS_eqstr (TString *a, TString *b) {$/;"	f
luaS_fix	.\3rd\lua\lstring.h	22;"	d
luaS_hash	.\3rd\lua\lstring.c	/^unsigned int luaS_hash (const char *str, size_t l, unsigned int seed) {$/;"	f
luaS_new	.\3rd\lua\lstring.c	/^TString *luaS_new (lua_State *L, const char *str) {$/;"	f
luaS_newliteral	.\3rd\lua\lstring.h	19;"	d
luaS_newlstr	.\3rd\lua\lstring.c	/^TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {$/;"	f
luaS_newudata	.\3rd\lua\lstring.c	/^Udata *luaS_newudata (lua_State *L, size_t s, Table *e) {$/;"	f
luaS_resize	.\3rd\lua\lstring.c	/^void luaS_resize (lua_State *L, int newsize) {$/;"	f
luaT_gettm	.\3rd\lua\ltm.c	/^const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {$/;"	f
luaT_gettmbyobj	.\3rd\lua\ltm.c	/^const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o, TMS event) {$/;"	f
luaT_init	.\3rd\lua\ltm.c	/^void luaT_init (lua_State *L) {$/;"	f
luaT_typenames_	.\3rd\lua\ltm.c	/^LUAI_DDEF const char *const luaT_typenames_[LUA_TOTALTAGS] = {$/;"	v
luaT_typenames_	.\3rd\lua\ltm.h	/^LUAI_DDEC const char *const luaT_typenames_[LUA_TOTALTAGS];$/;"	v
luaU_dump	.\3rd\lua\ldump.c	/^int luaU_dump (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip)$/;"	f
luaU_header	.\3rd\lua\lundump.c	/^void luaU_header (lu_byte* h)$/;"	f
luaU_print	.\3rd\lua\luac.c	23;"	d	file:
luaU_undump	.\3rd\lua\lundump.c	/^Closure* luaU_undump (lua_State* L, ZIO* Z, Mbuffer* buff, const char* name)$/;"	f
luaV_arith	.\3rd\lua\lvm.c	/^void luaV_arith (lua_State *L, StkId ra, const TValue *rb,$/;"	f
luaV_concat	.\3rd\lua\lvm.c	/^void luaV_concat (lua_State *L, int total) {$/;"	f
luaV_equalobj_	.\3rd\lua\lvm.c	/^int luaV_equalobj_ (lua_State *L, const TValue *t1, const TValue *t2) {$/;"	f
luaV_execute	.\3rd\lua\lvm.c	/^void luaV_execute (lua_State *L) {$/;"	f
luaV_finishOp	.\3rd\lua\lvm.c	/^void luaV_finishOp (lua_State *L) {$/;"	f
luaV_gettable	.\3rd\lua\lvm.c	/^void luaV_gettable (lua_State *L, const TValue *t, TValue *key, StkId val) {$/;"	f
luaV_lessequal	.\3rd\lua\lvm.c	/^int luaV_lessequal (lua_State *L, const TValue *l, const TValue *r) {$/;"	f
luaV_lessthan	.\3rd\lua\lvm.c	/^int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r) {$/;"	f
luaV_objlen	.\3rd\lua\lvm.c	/^void luaV_objlen (lua_State *L, StkId ra, const TValue *rb) {$/;"	f
luaV_rawequalobj	.\3rd\lua\lvm.h	22;"	d
luaV_settable	.\3rd\lua\lvm.c	/^void luaV_settable (lua_State *L, const TValue *t, TValue *key, StkId val) {$/;"	f
luaV_tonumber	.\3rd\lua\lvm.c	/^const TValue *luaV_tonumber (const TValue *obj, TValue *n) {$/;"	f
luaV_tostring	.\3rd\lua\lvm.c	/^int luaV_tostring (lua_State *L, StkId obj) {$/;"	f
luaX_init	.\3rd\lua\llex.c	/^void luaX_init (lua_State *L) {$/;"	f
luaX_lookahead	.\3rd\lua\llex.c	/^int luaX_lookahead (LexState *ls) {$/;"	f
luaX_newstring	.\3rd\lua\llex.c	/^TString *luaX_newstring (LexState *ls, const char *str, size_t l) {$/;"	f
luaX_next	.\3rd\lua\llex.c	/^void luaX_next (LexState *ls) {$/;"	f
luaX_setinput	.\3rd\lua\llex.c	/^void luaX_setinput (lua_State *L, LexState *ls, ZIO *z, TString *source,$/;"	f
luaX_syntaxerror	.\3rd\lua\llex.c	/^l_noret luaX_syntaxerror (LexState *ls, const char *msg) {$/;"	f
luaX_token2str	.\3rd\lua\llex.c	/^const char *luaX_token2str (LexState *ls, int token) {$/;"	f
luaX_tokens	.\3rd\lua\llex.c	/^static const char *const luaX_tokens [] = {$/;"	v	file:
luaY_parser	.\3rd\lua\lparser.c	/^Closure *luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff,$/;"	f
luaZ_buffer	.\3rd\lua\lzio.h	31;"	d
luaZ_bufflen	.\3rd\lua\lzio.h	33;"	d
luaZ_fill	.\3rd\lua\lzio.c	/^int luaZ_fill (ZIO *z) {$/;"	f
luaZ_freebuffer	.\3rd\lua\lzio.h	42;"	d
luaZ_init	.\3rd\lua\lzio.c	/^void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader, void *data) {$/;"	f
luaZ_initbuffer	.\3rd\lua\lzio.h	29;"	d
luaZ_openspace	.\3rd\lua\lzio.c	/^char *luaZ_openspace (lua_State *L, Mbuffer *buff, size_t n) {$/;"	f
luaZ_read	.\3rd\lua\lzio.c	/^size_t luaZ_read (ZIO *z, void *b, size_t n) {$/;"	f
luaZ_resetbuffer	.\3rd\lua\lzio.h	35;"	d
luaZ_resizebuffer	.\3rd\lua\lzio.h	38;"	d
luaZ_sizebuffer	.\3rd\lua\lzio.h	32;"	d
lua_Alloc	.\3rd\lua\lua.h	/^typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);$/;"	t
lua_CFunction	.\3rd\lua\lua.h	/^typedef int (*lua_CFunction) (lua_State *L);$/;"	t
lua_Debug	.\3rd\lua\lua.h	/^struct lua_Debug {$/;"	s
lua_Debug	.\3rd\lua\lua.h	/^typedef struct lua_Debug lua_Debug;  \/* activation record *\/$/;"	t	typeref:struct:lua_Debug
lua_Hook	.\3rd\lua\lua.h	/^typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);$/;"	t
lua_Integer	.\3rd\lua\lua.h	/^typedef LUA_INTEGER lua_Integer;$/;"	t
lua_Number	.\3rd\lua\lua.h	/^typedef LUA_NUMBER lua_Number;$/;"	t
lua_Reader	.\3rd\lua\lua.h	/^typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);$/;"	t
lua_State	.\3rd\lua\lstate.h	/^struct lua_State {$/;"	s
lua_State	.\3rd\lua\lua.h	/^typedef struct lua_State lua_State;$/;"	t	typeref:struct:lua_State
lua_TValue	.\3rd\lua\lobject.h	/^struct lua_TValue {$/;"	s
lua_Unsigned	.\3rd\lua\lua.h	/^typedef LUA_UNSIGNED lua_Unsigned;$/;"	t
lua_Writer	.\3rd\lua\lua.h	/^typedef int (*lua_Writer) (lua_State *L, const void* p, size_t sz, void* ud);$/;"	t
lua_absindex	.\3rd\lua\lapi.c	/^LUA_API int lua_absindex (lua_State *L, int idx) {$/;"	f
lua_arith	.\3rd\lua\lapi.c	/^LUA_API void lua_arith (lua_State *L, int op) {$/;"	f
lua_assert	.\3rd\lua\llimits.h	66;"	d
lua_assert	.\3rd\lua\lualib.h	53;"	d
lua_atpanic	.\3rd\lua\lapi.c	/^LUA_API lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf) {$/;"	f
lua_c	.\3rd\lua\lua.c	13;"	d	file:
lua_call	.\3rd\lua\lua.h	253;"	d
lua_callk	.\3rd\lua\lapi.c	/^LUA_API void lua_callk (lua_State *L, int nargs, int nresults, int ctx,$/;"	f
lua_checkmode	.\3rd\lua\liolib.c	39;"	d	file:
lua_checkstack	.\3rd\lua\lapi.c	/^LUA_API int lua_checkstack (lua_State *L, int size) {$/;"	f
lua_clonefunction	.\3rd\lua\lapi.c	/^LUA_API void lua_clonefunction (lua_State *L, const void * fp) {$/;"	f
lua_close	.\3rd\lua\lstate.c	/^LUA_API void lua_close (lua_State *L) {$/;"	f
lua_compare	.\3rd\lua\lapi.c	/^LUA_API int lua_compare (lua_State *L, int index1, int index2, int op) {$/;"	f
lua_concat	.\3rd\lua\lapi.c	/^LUA_API void lua_concat (lua_State *L, int n) {$/;"	f
lua_copy	.\3rd\lua\lapi.c	/^LUA_API void lua_copy (lua_State *L, int fromidx, int toidx) {$/;"	f
lua_cpcall	.\3rd\lua\luaconf.h	265;"	d
lua_createtable	.\3rd\lua\lapi.c	/^LUA_API void lua_createtable (lua_State *L, int narray, int nrec) {$/;"	f
lua_dump	.\3rd\lua\lapi.c	/^LUA_API int lua_dump (lua_State *L, lua_Writer writer, void *data) {$/;"	f
lua_equal	.\3rd\lpeg\lptypes.h	34;"	d
lua_equal	.\3rd\lpeg\lptypes.h	35;"	d
lua_equal	.\3rd\lua\luaconf.h	297;"	d
lua_error	.\3rd\lua\lapi.c	/^LUA_API int lua_error (lua_State *L) {$/;"	f
lua_freeline	.\3rd\lua\lua.c	73;"	d	file:
lua_freeline	.\3rd\lua\lua.c	81;"	d	file:
lua_gc	.\3rd\lua\lapi.c	/^LUA_API int lua_gc (lua_State *L, int what, int data) {$/;"	f
lua_getallocf	.\3rd\lua\lapi.c	/^LUA_API lua_Alloc lua_getallocf (lua_State *L, void **ud) {$/;"	f
lua_getctx	.\3rd\lua\lapi.c	/^LUA_API int lua_getctx (lua_State *L, int *ctx) {$/;"	f
lua_getfenv	.\3rd\lpeg\lptypes.h	37;"	d
lua_getfenv	.\3rd\lpeg\lptypes.h	38;"	d
lua_getfield	.\3rd\lua\lapi.c	/^LUA_API void lua_getfield (lua_State *L, int idx, const char *k) {$/;"	f
lua_getglobal	.\3rd\lua\lapi.c	/^LUA_API void lua_getglobal (lua_State *L, const char *var) {$/;"	f
lua_gethook	.\3rd\lua\ldebug.c	/^LUA_API lua_Hook lua_gethook (lua_State *L) {$/;"	f
lua_gethookcount	.\3rd\lua\ldebug.c	/^LUA_API int lua_gethookcount (lua_State *L) {$/;"	f
lua_gethookmask	.\3rd\lua\ldebug.c	/^LUA_API int lua_gethookmask (lua_State *L) {$/;"	f
lua_getinfo	.\3rd\lua\ldebug.c	/^LUA_API int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar) {$/;"	f
lua_getlocal	.\3rd\lua\ldebug.c	/^LUA_API const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f
lua_getmetatable	.\3rd\lua\lapi.c	/^LUA_API int lua_getmetatable (lua_State *L, int objindex) {$/;"	f
lua_getstack	.\3rd\lua\ldebug.c	/^LUA_API int lua_getstack (lua_State *L, int level, lua_Debug *ar) {$/;"	f
lua_gettable	.\3rd\lua\lapi.c	/^LUA_API void lua_gettable (lua_State *L, int idx) {$/;"	f
lua_gettop	.\3rd\lua\lapi.c	/^LUA_API int lua_gettop (lua_State *L) {$/;"	f
lua_getupvalue	.\3rd\lua\lapi.c	/^LUA_API const char *lua_getupvalue (lua_State *L, int funcindex, int n) {$/;"	f
lua_getuservalue	.\3rd\lua\lapi.c	/^LUA_API void lua_getuservalue (lua_State *L, int idx) {$/;"	f
lua_h	.\3rd\lua\lua.h	10;"	d
lua_ident	.\3rd\lua\lapi.c	/^const char lua_ident[] =$/;"	v
lua_insert	.\3rd\lua\lapi.c	/^LUA_API void lua_insert (lua_State *L, int idx) {$/;"	f
lua_isboolean	.\3rd\lua\lua.h	336;"	d
lua_iscfunction	.\3rd\lua\lapi.c	/^LUA_API int lua_iscfunction (lua_State *L, int idx) {$/;"	f
lua_isfunction	.\3rd\lua\lua.h	332;"	d
lua_islightuserdata	.\3rd\lua\lua.h	334;"	d
lua_isnil	.\3rd\lua\lua.h	335;"	d
lua_isnone	.\3rd\lua\lua.h	338;"	d
lua_isnoneornil	.\3rd\lua\lua.h	339;"	d
lua_isnumber	.\3rd\lua\lapi.c	/^LUA_API int lua_isnumber (lua_State *L, int idx) {$/;"	f
lua_isstring	.\3rd\lua\lapi.c	/^LUA_API int lua_isstring (lua_State *L, int idx) {$/;"	f
lua_istable	.\3rd\lua\lua.h	333;"	d
lua_isthread	.\3rd\lua\lua.h	337;"	d
lua_isuserdata	.\3rd\lua\lapi.c	/^LUA_API int lua_isuserdata (lua_State *L, int idx) {$/;"	f
lua_len	.\3rd\lua\lapi.c	/^LUA_API void lua_len (lua_State *L, int idx) {$/;"	f
lua_lessthan	.\3rd\lua\luaconf.h	298;"	d
lua_load	.\3rd\lua\lapi.c	/^LUA_API int lua_load (lua_State *L, lua_Reader reader, void *data,$/;"	f
lua_lock	.\3rd\lua\llimits.h	155;"	d
lua_longassert	.\3rd\lua\llimits.h	64;"	d
lua_longassert	.\3rd\lua\llimits.h	68;"	d
lua_longjmp	.\3rd\lua\ldo.c	/^struct lua_longjmp {$/;"	s	file:
lua_newstate	.\3rd\lua\lstate.c	/^LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) {$/;"	f
lua_newtable	.\3rd\lua\lua.h	326;"	d
lua_newthread	.\3rd\lua\lstate.c	/^LUA_API lua_State *lua_newthread (lua_State *L) {$/;"	f
lua_newuserdata	.\3rd\lua\lapi.c	/^LUA_API void *lua_newuserdata (lua_State *L, size_t size) {$/;"	f
lua_next	.\3rd\lua\lapi.c	/^LUA_API int lua_next (lua_State *L, int idx) {$/;"	f
lua_number2int	.\3rd\lua\llimits.h	206;"	d
lua_number2int	.\3rd\lua\llimits.h	236;"	d
lua_number2int	.\3rd\lua\llimits.h	250;"	d
lua_number2int32	.\3rd\lua\llimits.h	227;"	d
lua_number2integer	.\3rd\lua\llimits.h	207;"	d
lua_number2integer	.\3rd\lua\llimits.h	241;"	d
lua_number2integer	.\3rd\lua\llimits.h	254;"	d
lua_number2str	.\3rd\lua\luaconf.h	404;"	d
lua_number2unsigned	.\3rd\lua\llimits.h	208;"	d
lua_number2unsigned	.\3rd\lua\llimits.h	237;"	d
lua_number2unsigned	.\3rd\lua\llimits.h	262;"	d
lua_number2unsigned	.\3rd\lua\llimits.h	265;"	d
lua_objlen	.\3rd\lpeg\lptypes.h	42;"	d
lua_objlen	.\3rd\lpeg\lptypes.h	43;"	d
lua_objlen	.\3rd\lua\luaconf.h	295;"	d
lua_pcall	.\3rd\lua\lua.h	259;"	d
lua_pcallk	.\3rd\lua\lapi.c	/^LUA_API int lua_pcallk (lua_State *L, int nargs, int nresults, int errfunc,$/;"	f
lua_pclose	.\3rd\lua\liolib.c	59;"	d	file:
lua_pclose	.\3rd\lua\liolib.c	64;"	d	file:
lua_pclose	.\3rd\lua\liolib.c	71;"	d	file:
lua_pop	.\3rd\lua\lua.h	324;"	d
lua_popen	.\3rd\lua\liolib.c	58;"	d	file:
lua_popen	.\3rd\lua\liolib.c	63;"	d	file:
lua_popen	.\3rd\lua\liolib.c	69;"	d	file:
lua_pushboolean	.\3rd\lua\lapi.c	/^LUA_API void lua_pushboolean (lua_State *L, int b) {$/;"	f
lua_pushcclosure	.\3rd\lua\lapi.c	/^LUA_API void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n) {$/;"	f
lua_pushcfunction	.\3rd\lua\lua.h	330;"	d
lua_pushfstring	.\3rd\lua\lapi.c	/^LUA_API const char *lua_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f
lua_pushglobaltable	.\3rd\lua\lua.h	344;"	d
lua_pushinteger	.\3rd\lua\lapi.c	/^LUA_API void lua_pushinteger (lua_State *L, lua_Integer n) {$/;"	f
lua_pushlightuserdata	.\3rd\lua\lapi.c	/^LUA_API void lua_pushlightuserdata (lua_State *L, void *p) {$/;"	f
lua_pushliteral	.\3rd\lua\lua.h	341;"	d
lua_pushlstring	.\3rd\lua\lapi.c	/^LUA_API const char *lua_pushlstring (lua_State *L, const char *s, size_t len) {$/;"	f
lua_pushnil	.\3rd\lua\lapi.c	/^LUA_API void lua_pushnil (lua_State *L) {$/;"	f
lua_pushnumber	.\3rd\lua\lapi.c	/^LUA_API void lua_pushnumber (lua_State *L, lua_Number n) {$/;"	f
lua_pushstring	.\3rd\lua\lapi.c	/^LUA_API const char *lua_pushstring (lua_State *L, const char *s) {$/;"	f
lua_pushthread	.\3rd\lua\lapi.c	/^LUA_API int lua_pushthread (lua_State *L) {$/;"	f
lua_pushunsigned	.\3rd\lua\lapi.c	/^LUA_API void lua_pushunsigned (lua_State *L, lua_Unsigned u) {$/;"	f
lua_pushvalue	.\3rd\lua\lapi.c	/^LUA_API void lua_pushvalue (lua_State *L, int idx) {$/;"	f
lua_pushvfstring	.\3rd\lua\lapi.c	/^LUA_API const char *lua_pushvfstring (lua_State *L, const char *fmt,$/;"	f
lua_rawequal	.\3rd\lua\lapi.c	/^LUA_API int lua_rawequal (lua_State *L, int index1, int index2) {$/;"	f
lua_rawget	.\3rd\lua\lapi.c	/^LUA_API void lua_rawget (lua_State *L, int idx) {$/;"	f
lua_rawgeti	.\3rd\lua\lapi.c	/^LUA_API void lua_rawgeti (lua_State *L, int idx, int n) {$/;"	f
lua_rawgetp	.\3rd\lua\lapi.c	/^LUA_API void lua_rawgetp (lua_State *L, int idx, const void *p) {$/;"	f
lua_rawlen	.\3rd\lua-md5\compat-5.2.h	12;"	d
lua_rawlen	.\3rd\lua\lapi.c	/^LUA_API size_t lua_rawlen (lua_State *L, int idx) {$/;"	f
lua_rawset	.\3rd\lua\lapi.c	/^LUA_API void lua_rawset (lua_State *L, int idx) {$/;"	f
lua_rawseti	.\3rd\lua\lapi.c	/^LUA_API void lua_rawseti (lua_State *L, int idx, int n) {$/;"	f
lua_rawsetp	.\3rd\lua\lapi.c	/^LUA_API void lua_rawsetp (lua_State *L, int idx, const void *p) {$/;"	f
lua_readline	.\3rd\lua\lua.c	69;"	d	file:
lua_readline	.\3rd\lua\lua.c	77;"	d	file:
lua_register	.\3rd\lua\lua.h	328;"	d
lua_remove	.\3rd\lua\lapi.c	/^LUA_API void lua_remove (lua_State *L, int idx) {$/;"	f
lua_replace	.\3rd\lua\lapi.c	/^LUA_API void lua_replace (lua_State *L, int idx) {$/;"	f
lua_resume	.\3rd\lua\ldo.c	/^LUA_API int lua_resume (lua_State *L, lua_State *from, int nargs) {$/;"	f
lua_saveline	.\3rd\lua\lua.c	70;"	d	file:
lua_saveline	.\3rd\lua\lua.c	80;"	d	file:
lua_setallocf	.\3rd\lua\lapi.c	/^LUA_API void lua_setallocf (lua_State *L, lua_Alloc f, void *ud) {$/;"	f
lua_setfenv	.\3rd\lpeg\lptypes.h	39;"	d
lua_setfenv	.\3rd\lpeg\lptypes.h	40;"	d
lua_setfield	.\3rd\lua\lapi.c	/^LUA_API void lua_setfield (lua_State *L, int idx, const char *k) {$/;"	f
lua_setglobal	.\3rd\lua\lapi.c	/^LUA_API void lua_setglobal (lua_State *L, const char *var) {$/;"	f
lua_sethook	.\3rd\lua\ldebug.c	/^LUA_API int lua_sethook (lua_State *L, lua_Hook func, int mask, int count) {$/;"	f
lua_setlocal	.\3rd\lua\ldebug.c	/^LUA_API const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f
lua_setmetatable	.\3rd\lua\lapi.c	/^LUA_API int lua_setmetatable (lua_State *L, int objindex) {$/;"	f
lua_settable	.\3rd\lua\lapi.c	/^LUA_API void lua_settable (lua_State *L, int idx) {$/;"	f
lua_settop	.\3rd\lua\lapi.c	/^LUA_API void lua_settop (lua_State *L, int idx) {$/;"	f
lua_setupvalue	.\3rd\lua\lapi.c	/^LUA_API const char *lua_setupvalue (lua_State *L, int funcindex, int n) {$/;"	f
lua_setuservalue	.\3rd\lua\lapi.c	/^LUA_API void lua_setuservalue (lua_State *L, int idx) {$/;"	f
lua_status	.\3rd\lua\lapi.c	/^LUA_API int lua_status (lua_State *L) {$/;"	f
lua_stdin_is_tty	.\3rd\lua\lua.c	48;"	d	file:
lua_stdin_is_tty	.\3rd\lua\lua.c	52;"	d	file:
lua_stdin_is_tty	.\3rd\lua\lua.c	54;"	d	file:
lua_str2number	.\3rd\lua\luaconf.h	422;"	d
lua_strlen	.\3rd\lua\luaconf.h	293;"	d
lua_strx2number	.\3rd\lua\lobject.c	/^static lua_Number lua_strx2number (const char *s, char **endptr) {$/;"	f	file:
lua_strx2number	.\3rd\lua\luaconf.h	425;"	d
lua_tmpnam	.\3rd\lua\loslib.c	48;"	d	file:
lua_tmpnam	.\3rd\lua\loslib.c	57;"	d	file:
lua_toboolean	.\3rd\lua\lapi.c	/^LUA_API int lua_toboolean (lua_State *L, int idx) {$/;"	f
lua_tocfunction	.\3rd\lua\lapi.c	/^LUA_API lua_CFunction lua_tocfunction (lua_State *L, int idx) {$/;"	f
lua_tointeger	.\3rd\lua\lua.h	321;"	d
lua_tointegerx	.\3rd\lua\lapi.c	/^LUA_API lua_Integer lua_tointegerx (lua_State *L, int idx, int *isnum) {$/;"	f
lua_tolstring	.\3rd\lua\lapi.c	/^LUA_API const char *lua_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f
lua_tonumber	.\3rd\lua\lua.h	320;"	d
lua_tonumberx	.\3rd\lua\lapi.c	/^LUA_API lua_Number lua_tonumberx (lua_State *L, int idx, int *isnum) {$/;"	f
lua_topointer	.\3rd\lua\lapi.c	/^LUA_API const void *lua_topointer (lua_State *L, int idx) {$/;"	f
lua_tostring	.\3rd\lua\lua.h	347;"	d
lua_tothread	.\3rd\lua\lapi.c	/^LUA_API lua_State *lua_tothread (lua_State *L, int idx) {$/;"	f
lua_tounsigned	.\3rd\lua\lua.h	322;"	d
lua_tounsignedx	.\3rd\lua\lapi.c	/^LUA_API lua_Unsigned lua_tounsignedx (lua_State *L, int idx, int *isnum) {$/;"	f
lua_touserdata	.\3rd\lua\lapi.c	/^LUA_API void *lua_touserdata (lua_State *L, int idx) {$/;"	f
lua_type	.\3rd\lua\lapi.c	/^LUA_API int lua_type (lua_State *L, int idx) {$/;"	f
lua_typename	.\3rd\lua\lapi.c	/^LUA_API const char *lua_typename (lua_State *L, int t) {$/;"	f
lua_unlock	.\3rd\lua\llimits.h	156;"	d
lua_unsigned2number	.\3rd\lua\llimits.h	273;"	d
lua_upvalueid	.\3rd\lua\lapi.c	/^LUA_API void *lua_upvalueid (lua_State *L, int fidx, int n) {$/;"	f
lua_upvalueindex	.\3rd\lua\lua.h	41;"	d
lua_upvaluejoin	.\3rd\lua\lapi.c	/^LUA_API void lua_upvaluejoin (lua_State *L, int fidx1, int n1,$/;"	f
lua_version	.\3rd\lua\lapi.c	/^LUA_API const lua_Number *lua_version (lua_State *L) {$/;"	f
lua_xmove	.\3rd\lua\lapi.c	/^LUA_API void lua_xmove (lua_State *from, lua_State *to, int n) {$/;"	f
lua_yield	.\3rd\lua\lua.h	274;"	d
lua_yieldk	.\3rd\lua\ldo.c	/^LUA_API int lua_yieldk (lua_State *L, int nresults, int ctx, lua_CFunction k) {$/;"	f
luac_c	.\3rd\lua\luac.c	12;"	d	file:
luac_c	.\3rd\lua\luac.c	214;"	d	file:
luai_Cast	.\3rd\lua\llimits.h	/^union luai_Cast { double l_d; LUA_INT32 l_p[2]; };$/;"	u
luai_apicheck	.\3rd\lua\llimits.h	78;"	d
luai_apicheck	.\3rd\lua\llimits.h	80;"	d
luai_checknum	.\3rd\lua\lobject.h	267;"	d
luai_checknum	.\3rd\lua\lobject.h	373;"	d
luai_checknum	.\3rd\lua\lobject.h	374;"	d
luai_ctype_	.\3rd\lua\lctype.c	/^LUAI_DDEF const lu_byte luai_ctype_[UCHAR_MAX + 2] = {$/;"	v
luai_ctype_	.\3rd\lua\lctype.h	/^LUAI_DDEC const lu_byte luai_ctype_[UCHAR_MAX + 2];$/;"	v
luai_hashnum	.\3rd\lua\llimits.h	232;"	d
luai_hashnum	.\3rd\lua\llimits.h	284;"	d
luai_jmpbuf	.\3rd\lua\ldo.c	56;"	d	file:
luai_jmpbuf	.\3rd\lua\ldo.c	62;"	d	file:
luai_jmpbuf	.\3rd\lua\ldo.c	68;"	d	file:
luai_makeseed	.\3rd\lua\lstate.c	51;"	d	file:
luai_numadd	.\3rd\lua\luaconf.h	442;"	d
luai_numdiv	.\3rd\lua\luaconf.h	445;"	d
luai_numeq	.\3rd\lua\luaconf.h	447;"	d
luai_numisnan	.\3rd\lua\luaconf.h	450;"	d
luai_numle	.\3rd\lua\luaconf.h	449;"	d
luai_numlt	.\3rd\lua\luaconf.h	448;"	d
luai_nummod	.\3rd\lua\luaconf.h	436;"	d
luai_nummul	.\3rd\lua\luaconf.h	444;"	d
luai_numpow	.\3rd\lua\luaconf.h	437;"	d
luai_numsub	.\3rd\lua\luaconf.h	443;"	d
luai_numunm	.\3rd\lua\luaconf.h	446;"	d
luai_runtimecheck	.\3rd\lua\lvm.c	485;"	d	file:
luai_threadyield	.\3rd\lua\llimits.h	160;"	d
luai_userstateclose	.\3rd\lua\llimits.h	174;"	d
luai_userstatefree	.\3rd\lua\llimits.h	182;"	d
luai_userstateopen	.\3rd\lua\llimits.h	170;"	d
luai_userstateresume	.\3rd\lua\llimits.h	186;"	d
luai_userstatethread	.\3rd\lua\llimits.h	178;"	d
luai_userstateyield	.\3rd\lua\llimits.h	190;"	d
luai_verifycode	.\3rd\lua\lundump.c	42;"	d	file:
luai_writeline	.\3rd\lua\luaconf.h	215;"	d
luai_writestring	.\3rd\lua\luaconf.h	214;"	d
luai_writestringerror	.\3rd\lua\luaconf.h	222;"	d
lualib_h	.\3rd\lua\lualib.h	9;"	d
luaopen_base	.\3rd\lua\lbaselib.c	/^LUAMOD_API int luaopen_base (lua_State *L) {$/;"	f
luaopen_bit32	.\3rd\lua\lbitlib.c	/^LUAMOD_API int luaopen_bit32 (lua_State *L) {$/;"	f
luaopen_bson	.\lualib-src\lua-bson.c	/^luaopen_bson(lua_State *L) {$/;"	f
luaopen_cache	.\3rd\lua\lauxlib.c	/^LUAMOD_API int luaopen_cache(lua_State *L) {$/;"	f
luaopen_clientsocket	.\lualib-src\lua-clientsocket.c	/^luaopen_clientsocket(lua_State *L) {$/;"	f
luaopen_cluster_core	.\lualib-src\lua-cluster.c	/^luaopen_cluster_core(lua_State *L) {$/;"	f
luaopen_coroutine	.\3rd\lua\lcorolib.c	/^LUAMOD_API int luaopen_coroutine (lua_State *L) {$/;"	f
luaopen_crypt	.\lualib-src\lua-crypt.c	/^luaopen_crypt(lua_State *L) {$/;"	f
luaopen_debug	.\3rd\lua\ldblib.c	/^LUAMOD_API int luaopen_debug (lua_State *L) {$/;"	f
luaopen_int64	.\3rd\lua-int64\int64.c	/^luaopen_int64(lua_State *L) {$/;"	f
luaopen_io	.\3rd\lua\liolib.c	/^LUAMOD_API int luaopen_io (lua_State *L) {$/;"	f
luaopen_lpeg	.\3rd\lpeg\lptree.c	/^int luaopen_lpeg (lua_State *L) {$/;"	f
luaopen_math	.\3rd\lua\lmathlib.c	/^LUAMOD_API int luaopen_math (lua_State *L) {$/;"	f
luaopen_md5_core	.\3rd\lua-md5\md5lib.c	/^int luaopen_md5_core (lua_State *L) {$/;"	f
luaopen_memory	.\lualib-src\lua-memory.c	/^luaopen_memory(lua_State *L) {$/;"	f
luaopen_mongo_driver	.\lualib-src\lua-mongo.c	/^luaopen_mongo_driver(lua_State *L) {$/;"	f
luaopen_multicast_core	.\lualib-src\lua-multicast.c	/^luaopen_multicast_core(lua_State *L) {$/;"	f
luaopen_mysqlaux_c	.\lualib-src\lua_mysqlaux.c	/^int luaopen_mysqlaux_c (lua_State *L) {$/;"	f
luaopen_netpack	.\lualib-src\lua-netpack.c	/^luaopen_netpack(lua_State *L) {$/;"	f
luaopen_os	.\3rd\lua\loslib.c	/^LUAMOD_API int luaopen_os (lua_State *L) {$/;"	f
luaopen_package	.\3rd\lua\loadlib.c	/^LUAMOD_API int luaopen_package (lua_State *L) {$/;"	f
luaopen_profile	.\lualib-src\lua-profile.c	/^luaopen_profile(lua_State *L) {$/;"	f
luaopen_sharedata_core	.\lualib-src\lua-sharedata.c	/^luaopen_sharedata_core(lua_State *L) {$/;"	f
luaopen_skynet_core	.\lualib-src\lua-skynet.c	/^luaopen_skynet_core(lua_State *L) {$/;"	f
luaopen_socketdriver	.\lualib-src\lua-socket.c	/^luaopen_socketdriver(lua_State *L) {$/;"	f
luaopen_sproto_core	.\lualib-src\sproto\lsproto.c	/^luaopen_sproto_core(lua_State *L) {$/;"	f
luaopen_stm	.\lualib-src\lua-stm.c	/^luaopen_stm(lua_State *L) {$/;"	f
luaopen_string	.\3rd\lua\lstrlib.c	/^LUAMOD_API int luaopen_string (lua_State *L) {$/;"	f
luaopen_table	.\3rd\lua\ltablib.c	/^LUAMOD_API int luaopen_table (lua_State *L) {$/;"	f
ludp	.\lualib-src\lua-socket.c	/^ludp(lua_State *L) {$/;"	f	file:
ludp_address	.\lualib-src\lua-socket.c	/^ludp_address(lua_State *L) {$/;"	f	file:
ludp_connect	.\lualib-src\lua-socket.c	/^ludp_connect(lua_State *L) {$/;"	f	file:
ludp_send	.\lualib-src\lua-socket.c	/^ludp_send(lua_State *L) {$/;"	f	file:
lundump_c	.\3rd\lua\lundump.c	9;"	d	file:
lundump_h	.\3rd\lua\lundump.h	8;"	d
lunpack	.\lualib-src\lua-socket.c	/^lunpack(lua_State *L) {$/;"	f	file:
lunpack	.\lualib-src\sproto\lsproto.c	/^lunpack(lua_State *L) {$/;"	f	file:
lunpackrequest	.\lualib-src\lua-cluster.c	/^lunpackrequest(lua_State *L) {$/;"	f	file:
lunpackresponse	.\lualib-src\lua-cluster.c	/^lunpackresponse(lua_State *L) {$/;"	f	file:
lupdate	.\lualib-src\lua-sharedata.c	/^lupdate(lua_State *L) {$/;"	f	file:
lupdate	.\lualib-src\lua-stm.c	/^lupdate(lua_State *L) {$/;"	f	file:
lusleep	.\lualib-src\lua-clientsocket.c	/^lusleep(lua_State *L) {$/;"	f	file:
lvm_c	.\3rd\lua\lvm.c	12;"	d	file:
lvm_h	.\3rd\lua\lvm.h	8;"	d
lyield	.\lualib-src\lua-profile.c	/^lyield(lua_State *L) {$/;"	f	file:
lzio_c	.\3rd\lua\lzio.c	10;"	d	file:
lzio_h	.\3rd\lua\lzio.h	9;"	d
m	.\skynet-src\skynet_module.c	/^	struct skynet_module m[MAX_MODULE_TYPE];\/\/存储具体模块的数组$/;"	m	struct:modules	typeref:struct:modules::skynet_module	file:
m	.\skynet-src\skynet_start.c	/^	struct monitor *m;\/\/监视者们引用$/;"	m	struct:worker_parm	typeref:struct:worker_parm::monitor	file:
m	.\skynet-src\skynet_start.c	/^	struct skynet_monitor ** m;\/\/存储具体的监视者$/;"	m	struct:monitor	typeref:struct:monitor::skynet_monitor	file:
main	.\3rd\lua\lua.c	/^int main (int argc, char **argv) {$/;"	f
main	.\3rd\lua\luac.c	/^int main(int argc, char* argv[])$/;"	f
main	.\skynet-src\skynet_main.c	/^main(int argc, char *argv[]) {$/;"	f
mainfunc	.\3rd\lua\lparser.c	/^static void mainfunc (LexState *ls, FuncState *fs) {$/;"	f	file:
mainloop	.\service-src\service_harbor.c	/^mainloop(struct skynet_context * context, void * ud, int type, int session, uint32_t source, const void * msg, size_t sz) {$/;"	f	file:
mainposition	.\3rd\lua\ltable.c	/^static Node *mainposition (const Table *t, const TValue *key) {$/;"	f	file:
mainthread	.\3rd\lua\lstate.h	/^  struct lua_State *mainthread;$/;"	m	struct:global_State	typeref:struct:global_State::lua_State
make_mt	.\3rd\lua-int64\int64.c	/^make_mt(lua_State *L) {$/;"	f	file:
make_object	.\lualib-src\lua-bson.c	/^make_object(lua_State *L, int type, const void * ptr, size_t len) {$/;"	f	file:
makemask	.\3rd\lua\ldblib.c	/^static int makemask (const char *smask, int count) {$/;"	f	file:
makeseed	.\3rd\lua\lstate.c	/^static unsigned int makeseed (lua_State *L) {$/;"	f	file:
makewhite	.\3rd\lua\lgc.c	59;"	d	file:
mallctl_int64	.\skynet-src\malloc_hook.c	/^mallctl_int64(const char* name, size_t* newval) {$/;"	f
mallctl_opt	.\skynet-src\malloc_hook.c	/^mallctl_opt(const char* name, int* newval) {$/;"	f
malloc_memory_block	.\skynet-src\malloc_hook.c	/^malloc_memory_block(void) {$/;"	f
malloc_oom	.\skynet-src\malloc_hook.c	/^static void malloc_oom(size_t size) {$/;"	f	file:
malloc_used_memory	.\skynet-src\malloc_hook.c	/^malloc_used_memory(void) {$/;"	f
map	.\service-src\service_harbor.c	/^	struct hashmap * map;$/;"	m	struct:harbor	typeref:struct:harbor::hashmap	file:
markbeingfnz	.\3rd\lua\lgc.c	/^static void markbeingfnz (global_State *g) {$/;"	f	file:
marklen	.\3rd\lua\lua.c	245;"	d	file:
markmt	.\3rd\lua\lgc.c	/^static void markmt (global_State *g) {$/;"	f	file:
markobject	.\3rd\lua\lgc.c	78;"	d	file:
marksharedproto	.\3rd\lua\lgc.c	/^marksharedproto (global_State *g, SharedProto *f) {$/;"	f	file:
markupval	.\3rd\lua\lparser.c	/^static void markupval (FuncState *fs, int level) {$/;"	f	file:
markvalue	.\3rd\lua\lgc.c	75;"	d	file:
mask	.\3rd\lua\lbitlib.c	29;"	d	file:
maskcolors	.\3rd\lua\lgc.c	58;"	d	file:
match	.\3rd\lpeg\lpvm.c	/^const char *match (lua_State *L, const char *o, const char *s, const char *e,$/;"	f
match	.\3rd\lua\lstrlib.c	/^static const char *match (MatchState *ms, const char *s, const char *p) {$/;"	f	file:
match 	.\3rd\lpeg\re.lua	/^local function match (s, p, i)$/;"	f
match 	.\3rd\lpeg\test.lua	/^local function match (s,p)$/;"	f
match_capture	.\3rd\lua\lstrlib.c	/^static const char *match_capture (MatchState *ms, const char *s, int l) {$/;"	f	file:
match_class	.\3rd\lua\lstrlib.c	/^static int match_class (int c, int cl) {$/;"	f	file:
matchbalance	.\3rd\lua\lstrlib.c	/^static const char *matchbalance (MatchState *ms, const char *s,$/;"	f	file:
matchbracketclass	.\3rd\lua\lstrlib.c	/^static int matchbracketclass (int c, const char *p, const char *ec) {$/;"	f	file:
matchdepth	.\3rd\lua\lstrlib.c	/^  int matchdepth;  \/* control for recursive depth (to avoid C stack overflow) *\/$/;"	m	struct:MatchState	file:
matchtime	.\3rd\lpeg\lpeg.html	/^<h3><a name="matchtime"><\/a><code>lpeg.Cmt(patt, function)<\/code><\/h3>$/;"	a
math_abs	.\3rd\lua\lmathlib.c	/^static int math_abs (lua_State *L) {$/;"	f	file:
math_acos	.\3rd\lua\lmathlib.c	/^static int math_acos (lua_State *L) {$/;"	f	file:
math_asin	.\3rd\lua\lmathlib.c	/^static int math_asin (lua_State *L) {$/;"	f	file:
math_atan	.\3rd\lua\lmathlib.c	/^static int math_atan (lua_State *L) {$/;"	f	file:
math_atan2	.\3rd\lua\lmathlib.c	/^static int math_atan2 (lua_State *L) {$/;"	f	file:
math_ceil	.\3rd\lua\lmathlib.c	/^static int math_ceil (lua_State *L) {$/;"	f	file:
math_cos	.\3rd\lua\lmathlib.c	/^static int math_cos (lua_State *L) {$/;"	f	file:
math_cosh	.\3rd\lua\lmathlib.c	/^static int math_cosh (lua_State *L) {$/;"	f	file:
math_deg	.\3rd\lua\lmathlib.c	/^static int math_deg (lua_State *L) {$/;"	f	file:
math_exp	.\3rd\lua\lmathlib.c	/^static int math_exp (lua_State *L) {$/;"	f	file:
math_floor	.\3rd\lua\lmathlib.c	/^static int math_floor (lua_State *L) {$/;"	f	file:
math_fmod	.\3rd\lua\lmathlib.c	/^static int math_fmod (lua_State *L) {$/;"	f	file:
math_frexp	.\3rd\lua\lmathlib.c	/^static int math_frexp (lua_State *L) {$/;"	f	file:
math_ldexp	.\3rd\lua\lmathlib.c	/^static int math_ldexp (lua_State *L) {$/;"	f	file:
math_log	.\3rd\lua\lmathlib.c	/^static int math_log (lua_State *L) {$/;"	f	file:
math_log10	.\3rd\lua\lmathlib.c	/^static int math_log10 (lua_State *L) {$/;"	f	file:
math_max	.\3rd\lua\lmathlib.c	/^static int math_max (lua_State *L) {$/;"	f	file:
math_min	.\3rd\lua\lmathlib.c	/^static int math_min (lua_State *L) {$/;"	f	file:
math_modf	.\3rd\lua\lmathlib.c	/^static int math_modf (lua_State *L) {$/;"	f	file:
math_pow	.\3rd\lua\lmathlib.c	/^static int math_pow (lua_State *L) {$/;"	f	file:
math_rad	.\3rd\lua\lmathlib.c	/^static int math_rad (lua_State *L) {$/;"	f	file:
math_random	.\3rd\lua\lmathlib.c	/^static int math_random (lua_State *L) {$/;"	f	file:
math_randomseed	.\3rd\lua\lmathlib.c	/^static int math_randomseed (lua_State *L) {$/;"	f	file:
math_sin	.\3rd\lua\lmathlib.c	/^static int math_sin (lua_State *L) {$/;"	f	file:
math_sinh	.\3rd\lua\lmathlib.c	/^static int math_sinh (lua_State *L) {$/;"	f	file:
math_sqrt	.\3rd\lua\lmathlib.c	/^static int math_sqrt (lua_State *L) {$/;"	f	file:
math_tan	.\3rd\lua\lmathlib.c	/^static int math_tan (lua_State *L) {$/;"	f	file:
math_tanh	.\3rd\lua\lmathlib.c	/^static int math_tanh (lua_State *L) {$/;"	f	file:
mathlib	.\3rd\lua\lmathlib.c	/^static const luaL_Reg mathlib[] = {$/;"	v	file:
max_connection	.\service-src\service_gate.c	/^	int max_connection;$/;"	m	struct:gate	file:
max_expand	.\3rd\lua\lstrlib.c	/^static const char *max_expand (MatchState *ms, const char *s,$/;"	f	file:
maxn	.\3rd\lua\ltablib.c	/^static int maxn (lua_State *L) {$/;"	f	file:
maxn	.\lualib-src\sproto\sproto.c	/^	int maxn;$/;"	m	struct:sproto_type	file:
maxstacksize	.\3rd\lua\lobject.h	/^  lu_byte maxstacksize;  \/* maximum stack used by this function *\/$/;"	m	struct:SharedProto
mc_bindrefer	.\lualib-src\lua-multicast.c	/^mc_bindrefer(lua_State *L) {$/;"	f	file:
mc_closelocal	.\lualib-src\lua-multicast.c	/^mc_closelocal(lua_State *L) {$/;"	f	file:
mc_nextid	.\lualib-src\lua-multicast.c	/^mc_nextid(lua_State *L) {$/;"	f	file:
mc_package	.\lualib-src\lua-multicast.c	/^struct mc_package {$/;"	s	file:
mc_packlocal	.\lualib-src\lua-multicast.c	/^mc_packlocal(lua_State *L) {$/;"	f	file:
mc_packremote	.\lualib-src\lua-multicast.c	/^mc_packremote(lua_State *L) {$/;"	f	file:
mc_packstring	.\lualib-src\lua-multicast.c	/^mc_packstring(lua_State *L) {$/;"	f	file:
mc_remote	.\lualib-src\lua-multicast.c	/^mc_remote(lua_State *L) {$/;"	f	file:
mc_unpacklocal	.\lualib-src\lua-multicast.c	/^mc_unpacklocal(lua_State *L) {$/;"	f	file:
md5	.\3rd\lua-md5\md5.c	/^void md5 (const char *message, long len, char *output) {$/;"	f
md5_h	.\3rd\lua-md5\md5.h	9;"	d
md5lib	.\3rd\lua-md5\md5lib.c	/^static struct luaL_Reg md5lib[] = {$/;"	v	typeref:struct:luaL_Reg	file:
mem_data	.\skynet-src\malloc_hook.c	/^} mem_data;$/;"	t	typeref:struct:_mem_data	file:
mem_stats	.\skynet-src\malloc_hook.c	/^static mem_data mem_stats[SLOT_SIZE];$/;"	v	file:
memerrmsg	.\3rd\lua\lstate.h	/^  TString *memerrmsg;  \/* memory-error message *\/$/;"	m	struct:global_State
memory	.\lualib-src\sproto\sproto.c	/^	struct pool memory;$/;"	m	struct:sproto	typeref:struct:sproto::pool	file:
memory_info_dump	.\skynet-src\malloc_hook.c	/^memory_info_dump(void) {$/;"	f
mergektable	.\3rd\lpeg\lptree.c	/^static void mergektable (lua_State *L, int idx, TTree *rule) {$/;"	f	file:
message	.\service-src\databuffer.h	/^struct message {$/;"	s
message	.\skynet-src\skynet_harbor.h	/^	const void * message;$/;"	m	struct:remote_message
message_dispatch	.\lualib\mqueue.lua	/^local function message_dispatch(f)$/;"	f
message_drop	.\skynet-src\skynet_mq.h	/^typedef void (*message_drop)(struct skynet_message *, void *);$/;"	t
message_queue	.\skynet-src\skynet_mq.c	/^struct message_queue {$/;"	s	file:
message_to_header	.\service-src\service_harbor.c	/^message_to_header(const uint32_t *message, struct remote_message_header *header) {$/;"	f	file:
messagepool	.\service-src\databuffer.h	/^struct messagepool {$/;"	s
messagepool_free	.\service-src\databuffer.h	/^messagepool_free(struct messagepool *pool) {$/;"	f
messagepool_list	.\service-src\databuffer.h	/^struct messagepool_list {$/;"	s
meta:__index	.\lualib\sharedata\corelib.lua	/^function meta:__index(key)$/;"	f
meta:__ipairs	.\lualib\sharedata\corelib.lua	/^function meta:__ipairs()$/;"	f
meta:__len	.\lualib\sharedata\corelib.lua	/^function meta:__len()$/;"	f
meta:__pairs	.\lualib\sharedata\corelib.lua	/^function meta:__pairs()$/;"	f
metareg	.\3rd\lpeg\lptree.c	/^static struct luaL_Reg metareg[] = {$/;"	v	typeref:struct:luaL_Reg	file:
metatable	.\3rd\lua\lobject.h	/^    struct Table *metatable;$/;"	m	struct:Udata::__anon7	typeref:struct:Udata::__anon7::Table
metatable	.\3rd\lua\lobject.h	/^  struct Table *metatable;$/;"	m	struct:Table	typeref:struct:Table::Table
min_expand	.\3rd\lua\lstrlib.c	/^static const char *min_expand (MatchState *ms, const char *s,$/;"	f	file:
mod	.\skynet-src\skynet_server.c	/^	struct skynet_module * mod;	\/\/模块引用$/;"	m	struct:skynet_context	typeref:struct:skynet_context::skynet_module	file:
mode	.\3rd\lua\ldo.c	/^  const char *mode;$/;"	m	struct:SParser	file:
modinit	.\3rd\lua\loadlib.c	/^static void modinit (lua_State *L, const char *modname) {$/;"	f	file:
module	.\skynet-src\skynet_module.h	/^	void * module;\/\/模块句柄，此句柄不是skynet中handle$/;"	m	struct:skynet_module
module_path	.\skynet-src\skynet_imp.h	/^	const char * module_path;	\/\/模块目录配置$/;"	m	struct:skynet_config
modules	.\skynet-src\skynet_module.c	/^struct modules {$/;"	s	file:
mongo.client	.\lualib\mongo.lua	/^function mongo.client( conf	)$/;"	f
mongo_auth	.\lualib\mongo.lua	/^local function mongo_auth(mongoc)$/;"	f
mongo_client:auth	.\lualib\mongo.lua	/^function mongo_client:auth(user,password)$/;"	f
mongo_client:disconnect	.\lualib\mongo.lua	/^function mongo_client:disconnect()$/;"	f
mongo_client:genId	.\lualib\mongo.lua	/^function mongo_client:genId()$/;"	f
mongo_client:getDB	.\lualib\mongo.lua	/^function mongo_client:getDB(dbname)$/;"	f
mongo_client:logout	.\lualib\mongo.lua	/^function mongo_client:logout()$/;"	f
mongo_client:runCommand	.\lualib\mongo.lua	/^function mongo_client:runCommand(...)$/;"	f
mongo_collection:batch_insert	.\lualib\mongo.lua	/^function mongo_collection:batch_insert(docs)		$/;"	f
mongo_collection:createIndex	.\lualib\mongo.lua	/^function mongo_collection:createIndex(keys, option)$/;"	f
mongo_collection:delete	.\lualib\mongo.lua	/^function mongo_collection:delete(selector, single)$/;"	f
mongo_collection:drop	.\lualib\mongo.lua	/^function mongo_collection:drop()$/;"	f
mongo_collection:dropIndex	.\lualib\mongo.lua	/^function mongo_collection:dropIndex(indexName)$/;"	f
mongo_collection:find	.\lualib\mongo.lua	/^function mongo_collection:find(query, selector)$/;"	f
mongo_collection:findAndModify	.\lualib\mongo.lua	/^function mongo_collection:findAndModify(doc)$/;"	f
mongo_collection:findOne	.\lualib\mongo.lua	/^function mongo_collection:findOne(query, selector)$/;"	f
mongo_collection:insert	.\lualib\mongo.lua	/^function mongo_collection:insert(doc)$/;"	f
mongo_collection:safe_insert	.\lualib\mongo.lua	/^function mongo_collection:safe_insert(doc)$/;"	f
mongo_collection:update	.\lualib\mongo.lua	/^function mongo_collection:update(selector,update,upsert,multi)$/;"	f
mongo_cursor:close	.\lualib\mongo.lua	/^function mongo_cursor:close()$/;"	f
mongo_cursor:hasNext	.\lualib\mongo.lua	/^function mongo_cursor:hasNext()$/;"	f
mongo_cursor:next	.\lualib\mongo.lua	/^function mongo_cursor:next()$/;"	f
mongo_db:getCollection	.\lualib\mongo.lua	/^function mongo_db:getCollection(collection)$/;"	f
mongo_db:runCommand	.\lualib\mongo.lua	/^function mongo_db:runCommand(cmd,cmd_v,...)$/;"	f
monitor	.\examples\simplemonitor.lua	/^local function monitor(session, watcher, command, service)$/;"	f
monitor	.\lualib\sharedata.lua	/^local function monitor(name, obj, cobj)$/;"	f
monitor	.\skynet-src\skynet_start.c	/^struct monitor {$/;"	s	file:
monitor_clear	.\service\cslave.lua	/^local function monitor_clear(id)$/;"	f
monitor_exit	.\skynet-src\skynet_server.c	/^	uint32_t monitor_exit;\/\/监视服务退出的句柄号$/;"	m	struct:skynet_node	file:
monitor_harbor	.\service\cslave.lua	/^local function monitor_harbor(master_fd)$/;"	f
monitor_master	.\examples\main_log.lua	/^local function monitor_master()$/;"	f
monitor_master	.\service\cslave.lua	/^local function monitor_master(master_fd)$/;"	f
monitor_slave	.\service\cmaster.lua	/^local function monitor_slave(slave_id, slave_address)$/;"	f
move_list	.\skynet-src\skynet_timer.c	/^move_list(struct timer *T, int level, int idx) {$/;"	f	file:
movegotosout	.\3rd\lua\lparser.c	/^static void movegotosout (FuncState *fs, BlockCnt *bl) {$/;"	f	file:
moveto	.\3rd\lua\lapi.c	/^static void moveto (lua_State *L, TValue *fr, int idx) {$/;"	f	file:
mp	.\service-src\service_gate.c	/^	struct messagepool mp;$/;"	m	struct:gate	typeref:struct:gate::messagepool	file:
mqueue.call	.\lualib\mqueue.lua	/^function mqueue.call(addr, ...)$/;"	f
mqueue.register	.\lualib\mqueue.lua	/^function mqueue.register(f)$/;"	f
mqueue.send	.\lualib\mqueue.lua	/^function mqueue.send(addr, ...)$/;"	f
mqueue.size	.\lualib\mqueue.lua	/^function mqueue.size()$/;"	f
msg	.\lualib-src\lua-socket.c	/^	char * msg;$/;"	m	struct:buffer_node	file:
msg	.\lualib-src\lua-stm.c	/^	void * msg;$/;"	m	struct:stm_copy	file:
msvc_int_h	.\lualib-src\sproto\msvcint.h	2;"	d
mt	.\3rd\lua\lstate.h	/^  struct Table *mt[LUA_NUMTAGS];  \/* metatables for basic types *\/$/;"	m	struct:global_State	typeref:struct:global_State::Table
mul_mod_p	.\lualib-src\lua-crypt.c	/^mul_mod_p(uint64_t a, uint64_t b) {$/;"	f	file:
mult 	.\3rd\lpeg\re.lua	/^local function mult (p, n)$/;"	f
multicast.new	.\lualib\multicast.lua	/^function multicast.new(conf)$/;"	f
multipat	.\lualib\sprotoparser.lua	/^local function multipat(pat)$/;"	f
mutex	.\skynet-src\skynet_start.c	/^	pthread_mutex_t mutex;\/\/互斥锁$/;"	m	struct:monitor	file:
mysqlauxlib	.\lualib-src\lua_mysqlaux.c	/^static struct luaL_Reg mysqlauxlib[] = {$/;"	v	typeref:struct:luaL_Reg	file:
n	.\3rd\lpeg\lptree.h	/^    int n;  \/* occasional counter *\/$/;"	m	union:TTree::__anon3
n	.\3rd\lua\lauxlib.c	/^  int n;  \/* number of pre-read characters *\/$/;"	m	struct:LoadF	file:
n	.\3rd\lua\lauxlib.h	/^  size_t n;  \/* number of characters in buffer *\/$/;"	m	struct:luaL_Buffer
n	.\3rd\lua\lparser.h	/^    int n;$/;"	m	struct:Dyndata::__anon16
n	.\3rd\lua\lparser.h	/^  int n;  \/* number of entries in use *\/$/;"	m	struct:Labellist
n	.\3rd\lua\lzio.h	/^  size_t n;			\/* bytes still unread *\/$/;"	m	struct:Zio
n	.\3rd\lua\lzio.h	/^  size_t n;$/;"	m	struct:Mbuffer
n	.\lualib-src\lua-sharedata.c	/^	lua_Number n;$/;"	m	union:value	file:
n	.\lualib-src\sproto\sproto.c	/^	int n;$/;"	m	struct:sproto_type	file:
nCcalls	.\3rd\lua\lstate.h	/^  unsigned short nCcalls;  \/* number of nested C calls *\/$/;"	m	struct:lua_State
na	.\3rd\lua\lparser.c	/^  int na;  \/* total number of array elements *\/$/;"	m	struct:ConsControl	file:
nactvar	.\3rd\lua\lparser.c	/^  lu_byte nactvar;  \/* # active locals outside the block *\/$/;"	m	struct:BlockCnt	file:
nactvar	.\3rd\lua\lparser.h	/^  lu_byte nactvar;  \/* local level where it appears in current block *\/$/;"	m	struct:Labeldesc
nactvar	.\3rd\lua\lparser.h	/^  lu_byte nactvar;  \/* number of active local variables *\/$/;"	m	struct:FuncState
name	.\3rd\lua\lauxlib.h	/^  const char *name;$/;"	m	struct:luaL_Reg
name	.\3rd\lua\ldo.c	/^  const char *name;$/;"	m	struct:SParser	file:
name	.\3rd\lua\lobject.h	/^  TString *name;  \/* upvalue name (for debug information) *\/$/;"	m	struct:Upvaldesc
name	.\3rd\lua\lparser.h	/^  TString *name;  \/* label identifier *\/$/;"	m	struct:Labeldesc
name	.\3rd\lua\lua.h	/^  const char *name;	\/* (n) *\/$/;"	m	struct:lua_Debug
name	.\3rd\lua\lundump.c	/^ const char* name;$/;"	m	struct:__anon22	file:
name	.\lualib-src\sproto\sproto.c	/^	const char * name;$/;"	m	struct:field	file:
name	.\lualib-src\sproto\sproto.c	/^	const char * name;$/;"	m	struct:sproto_type	file:
name	.\lualib-src\sproto\sproto.c	/^	const char *name;$/;"	m	struct:protocol	file:
name	.\skynet-src\skynet_handle.c	/^	char * name;		\/\/名字$/;"	m	struct:handle_name	file:
name	.\skynet-src\skynet_handle.c	/^	struct handle_name *name;\/\/句柄名字$/;"	m	struct:handle_storage	typeref:struct:handle_storage::handle_name	file:
name	.\skynet-src\skynet_harbor.h	/^	char name[GLOBALNAME_LENGTH];$/;"	m	struct:remote_name
name	.\skynet-src\skynet_module.h	/^	const char * name;\/\/模块名字$/;"	m	struct:skynet_module
name	.\skynet-src\skynet_server.c	/^	const char *name;	\/\/命令名$/;"	m	struct:command_func	file:
name_cap	.\skynet-src\skynet_handle.c	/^	int name_cap;\/\/名字容量$/;"	m	struct:handle_storage	file:
name_count	.\skynet-src\skynet_handle.c	/^	int name_count;\/\/名字计数$/;"	m	struct:handle_storage	file:
namedpat	.\lualib\sprotoparser.lua	/^local function namedpat(name, pat)$/;"	f
namewhat	.\3rd\lua\lua.h	/^  const char *namewhat;	\/* (n) 'global', 'local', 'field', 'method' *\/$/;"	m	struct:lua_Debug
ncode	.\3rd\lpeg\lpcode.c	/^  int ncode;  \/* next position in p->code to be filled *\/$/;"	m	struct:CompileState	file:
near	.\skynet-src\skynet_timer.c	/^	struct link_list near[TIME_NEAR];$/;"	m	struct:timer	typeref:struct:timer::link_list	file:
need_value	.\3rd\lua\lcode.c	/^static int need_value (FuncState *fs, int list) {$/;"	f	file:
needfollow	.\3rd\lpeg\lpcode.c	/^static int needfollow (TTree *tree) {$/;"	f	file:
netpack	.\lualib-src\lua-netpack.c	/^struct netpack {$/;"	s	file:
new_fd	.\skynet-src\socket_server.c	/^new_fd(struct socket_server *ss, int id, int fd, int protocol, uintptr_t opaque, bool add) {$/;"	f	file:
new_localvar	.\3rd\lua\lparser.c	/^static void new_localvar (LexState *ls, TString *name) {$/;"	f	file:
new_localvarliteral	.\3rd\lua\lparser.c	195;"	d	file:
new_localvarliteral_	.\3rd\lua\lparser.c	/^static void new_localvarliteral_ (LexState *ls, const char *name, size_t sz) {$/;"	f	file:
new_queue	.\service-src\service_harbor.c	/^new_queue() {$/;"	f	file:
newcharset	.\3rd\lpeg\lptree.c	/^static TTree *newcharset (lua_State *L) {$/;"	f	file:
newemptycap	.\3rd\lpeg\lptree.c	/^static TTree *newemptycap (lua_State *L, int cap, int idx) {$/;"	f	file:
newfile	.\3rd\lua\liolib.c	/^static LStream *newfile (lua_State *L) {$/;"	f	file:
newgrammar	.\3rd\lpeg\lptree.c	/^static TTree *newgrammar (lua_State *L, int arg) {$/;"	f	file:
newlabelentry	.\3rd\lua\lparser.c	/^static int newlabelentry (LexState *ls, Labellist *l, TString *name,$/;"	f	file:
newleaf	.\3rd\lpeg\lptree.c	/^static TTree *newleaf (lua_State *L, int tag) {$/;"	f	file:
newobj	.\service\sharedatad.lua	/^local function newobj(name, tbl)$/;"	f
newprefile	.\3rd\lua\liolib.c	/^static LStream *newprefile (lua_State *L) {$/;"	f	file:
newroot1sib	.\3rd\lpeg\lptree.c	/^static TTree *newroot1sib (lua_State *L, int tag) {$/;"	f	file:
newroot2sib	.\3rd\lpeg\lptree.c	/^static TTree *newroot2sib (lua_State *L, int tag) {$/;"	f	file:
newshrstr	.\3rd\lua\lstring.c	/^static TString *newshrstr (lua_State *L, const char *str, size_t l,$/;"	f	file:
newtree	.\3rd\lpeg\lptree.c	/^static TTree *newtree (lua_State *L, int len) {$/;"	f	file:
newupvalue	.\3rd\lua\lparser.c	/^static int newupvalue (FuncState *fs, TString *name, expdesc *v) {$/;"	f	file:
next	.\3rd\lua\llex.c	28;"	d	file:
next	.\3rd\lua\lobject.h	/^      struct UpVal *next;$/;"	m	struct:UpVal::__anon8::__anon9	typeref:struct:UpVal::__anon8::__anon9::UpVal
next	.\3rd\lua\lobject.h	/^    struct Node *next;  \/* for chaining *\/$/;"	m	struct:TKey::__anon10	typeref:struct:TKey::__anon10::Node
next	.\3rd\lua\lstate.h	/^  struct CallInfo *previous, *next;  \/* dynamic call link *\/$/;"	m	struct:CallInfo	typeref:struct:CallInfo::
next	.\lualib-src\lua-netpack.c	/^	struct uncomplete * next;$/;"	m	struct:uncomplete	typeref:struct:uncomplete::uncomplete	file:
next	.\lualib-src\lua-seri.c	/^	struct block * next;\/\/形成链式结构$/;"	m	struct:block	typeref:struct:block::block	file:
next	.\lualib-src\lua-sharedata.c	/^	int next;	\/\/ next slot index$/;"	m	struct:node	file:
next	.\lualib-src\lua-socket.c	/^	struct buffer_node *next;$/;"	m	struct:buffer_node	typeref:struct:buffer_node::buffer_node	file:
next	.\lualib-src\sproto\sproto.c	/^	struct chunk * next;$/;"	m	struct:chunk	typeref:struct:chunk::chunk	file:
next	.\service-src\databuffer.h	/^	struct message * next;$/;"	m	struct:message	typeref:struct:message::message
next	.\service-src\databuffer.h	/^	struct messagepool_list *next;$/;"	m	struct:messagepool_list	typeref:struct:messagepool_list::messagepool_list
next	.\service-src\hashid.h	/^	struct hashid_node *next;$/;"	m	struct:hashid_node	typeref:struct:hashid_node::hashid_node
next	.\service-src\service_harbor.c	/^	struct keyvalue * next;$/;"	m	struct:keyvalue	typeref:struct:keyvalue::keyvalue	file:
next	.\skynet-src\skynet_mq.c	/^	struct message_queue *next;		\/\/下一个消息队列$/;"	m	struct:message_queue	typeref:struct:message_queue::message_queue	file:
next	.\skynet-src\skynet_timer.c	/^	struct timer_node *next;$/;"	m	struct:timer_node	typeref:struct:timer_node::timer_node	file:
next	.\skynet-src\socket_server.c	/^	struct write_buffer * next; \/\/ 发送缓冲区构成一个链表$/;"	m	struct:write_buffer	typeref:struct:write_buffer::write_buffer	file:
next_ci	.\3rd\lua\ldo.c	290;"	d	file:
nextcap	.\3rd\lpeg\lpcap.c	/^static void nextcap (CapState *cs) {$/;"	f	file:
nextinstruction	.\3rd\lpeg\lpcode.c	/^static int nextinstruction (CompileState *compst) {$/;"	f	file:
nh	.\3rd\lua\lparser.c	/^  int nh;  \/* total number of `record' elements *\/$/;"	m	struct:ConsControl	file:
nilK	.\3rd\lua\lcode.c	/^static int nilK (FuncState *fs) {$/;"	f	file:
nk	.\3rd\lua\lobject.h	/^  } nk;$/;"	m	union:TKey	typeref:struct:TKey::__anon10
nk	.\3rd\lua\lparser.h	/^  int nk;  \/* number of elements in `k' *\/$/;"	m	struct:FuncState
nlocvars	.\3rd\lua\lparser.h	/^  short nlocvars;  \/* number of elements in 'f->locvars' *\/$/;"	m	struct:FuncState
nny	.\3rd\lua\lstate.h	/^  unsigned short nny;  \/* number of non-yieldable calls in stack *\/$/;"	m	struct:lua_State
noLuaClosure	.\3rd\lua\ldebug.c	33;"	d	file:
nocolliding	.\lualib-src\lua-sharedata.c	/^	uint8_t nocolliding;	\/\/ 0 means colliding slot$/;"	m	struct:node	file:
node	.\3rd\lua\lobject.h	/^  Node *node;$/;"	m	struct:Table
node	.\lualib-src\lua-sharedata.c	/^struct node {$/;"	s	file:
node	.\service-src\service_harbor.c	/^	struct keyvalue *node[HASH_SIZE];$/;"	m	struct:hashmap	typeref:struct:hashmap::keyvalue	file:
noenv	.\3rd\lua\loadlib.c	/^static int noenv (lua_State *L) {$/;"	f	file:
noextrachars	.\3rd\lua\lua.c	345;"	d	file:
nofail	.\3rd\lpeg\lpcode.h	27;"	d
nospecials	.\3rd\lua\lstrlib.c	/^static int nospecials (const char *p, size_t l) {$/;"	f	file:
novariant	.\3rd\lua\lobject.h	121;"	d
np	.\3rd\lua\lparser.h	/^  int np;  \/* number of elements in `p' *\/$/;"	m	struct:FuncState
nparams	.\3rd\lua\lua.h	/^  unsigned char nparams;\/* (u) number of parameters *\/$/;"	m	struct:lua_Debug
nresults	.\3rd\lua\lapi.c	/^  int nresults;$/;"	m	struct:CallS	file:
nresults	.\3rd\lua\lstate.h	/^  short nresults;  \/* expected number of results from this function *\/$/;"	m	struct:CallInfo
nullable	.\3rd\lpeg\lpcode.h	28;"	d
num_	.\3rd\lua\lobject.h	114;"	d
num_	.\3rd\lua\lobject.h	329;"	d
num_	.\3rd\lua\lobject.h	330;"	d
num_escape_sql_str	.\lualib-src\lua_mysqlaux.c	/^static unsigned int num_escape_sql_str(unsigned char *dst, unsigned char *src, size_t size)$/;"	f	file:
num_has	.\3rd\lua\lua.c	354;"	d	file:
number	.\lualib-src\lua-mongo.c	/^	int number;$/;"	m	struct:response	file:
numcap	.\3rd\lpeg\lpcap.c	/^static int numcap (CapState *cs) {$/;"	f	file:
numfield	.\3rd\lua\lobject.h	333;"	d
numfield	.\3rd\lua\lobject.h	334;"	d
numfield	.\3rd\lua\lobject.h	95;"	d
numparams	.\3rd\lua\lobject.h	/^  lu_byte numparams;  \/* number of fixed parameters *\/$/;"	m	struct:SharedProto
numsiblings	.\3rd\lpeg\lptree.c	/^const byte numsiblings[] = {$/;"	v
numtree	.\3rd\lpeg\lptree.c	/^static TTree *numtree (lua_State *L, int n) {$/;"	f	file:
numusearray	.\3rd\lua\ltable.c	/^static int numusearray (const Table *t, int *nums) {$/;"	f	file:
numusehash	.\3rd\lua\ltable.c	/^static int numusehash (const Table *t, int *nums, int *pnasize) {$/;"	f	file:
nups	.\3rd\lua\lparser.h	/^  lu_byte nups;  \/* number of upvalues *\/$/;"	m	struct:FuncState
nups	.\3rd\lua\lua.h	/^  unsigned char nups;	\/* (u) number of upvalues *\/$/;"	m	struct:lua_Debug
nuse	.\3rd\lua\lstate.h	/^  lu_int32 nuse;  \/* number of elements *\/$/;"	m	struct:stringtable
nval	.\3rd\lua\lparser.h	/^    lua_Number nval;  \/* for VKNUM *\/$/;"	m	union:expdesc::__anon14
nvalue	.\3rd\lua\lobject.h	153;"	d
obj	.\lualib-src\lua-stm.c	/^	struct stm_object * obj;$/;"	m	struct:boxstm	typeref:struct:boxstm::stm_object	file:
obj	.\lualib-src\lua-stm.c	/^	struct stm_object *obj;$/;"	m	struct:boxreader	typeref:struct:boxreader::stm_object	file:
obj2gco	.\3rd\lua\lstate.h	215;"	d
objtypename	.\3rd\lua\ltm.h	47;"	d
ocap	.\3rd\lpeg\lpcap.h	/^  Capture *ocap;  \/* (original) capture list *\/$/;"	m	struct:CapState
offset	.\3rd\lpeg\lpvm.h	/^  int offset;$/;"	m	union:Instruction
offset	.\lualib-src\lua-socket.c	/^	int offset;$/;"	m	struct:socket_buffer	file:
offset	.\service-src\databuffer.h	/^	int offset;$/;"	m	struct:databuffer
oid_counter	.\lualib-src\lua-bson.c	/^static uint32_t oid_counter;$/;"	v	file:
oid_header	.\lualib-src\lua-bson.c	/^static uint8_t oid_header[5];$/;"	v	file:
old_allowhook	.\3rd\lua\lstate.h	/^      lu_byte old_allowhook;$/;"	m	struct:CallInfo::__anon17::__anon19
old_errfunc	.\3rd\lua\lstate.h	/^      ptrdiff_t old_errfunc;$/;"	m	struct:CallInfo::__anon17::__anon19
oldpc	.\3rd\lua\lstate.h	/^  const Instruction *oldpc;  \/* last pc traced *\/$/;"	m	struct:lua_State
op-add	.\3rd\lpeg\lpeg.html	/^<h3><a name="op-add"><\/a><code>patt1 + patt2<\/code><\/h3>$/;"	a
op-behind	.\3rd\lpeg\lpeg.html	/^<h3><a name="op-behind"><\/a><code>lpeg.B(patt)<\/code><\/h3>$/;"	a
op-len	.\3rd\lpeg\lpeg.html	/^<h3><a name="op-len"><\/a><code>#patt<\/code><\/h3>$/;"	a
op-locale	.\3rd\lpeg\lpeg.html	/^<h3><a name="op-locale"><\/a><code>lpeg.locale ([table])<\/code><\/h3>$/;"	a
op-mul	.\3rd\lpeg\lpeg.html	/^<h3><a name="op-mul"><\/a><code>patt1 * patt2<\/code><\/h3>$/;"	a
op-p	.\3rd\lpeg\lpeg.html	/^<h3><a name="op-p"><\/a><code>lpeg.P (value)<\/code><\/h3>$/;"	a
op-pow	.\3rd\lpeg\lpeg.html	/^<h3><a name="op-pow"><\/a><code>patt^n<\/code><\/h3>$/;"	a
op-r	.\3rd\lpeg\lpeg.html	/^<h3><a name="op-r"><\/a><code>lpeg.R ({range})<\/code><\/h3>$/;"	a
op-s	.\3rd\lpeg\lpeg.html	/^<h3><a name="op-s"><\/a><code>lpeg.S (string)<\/code><\/h3>$/;"	a
op-sub	.\3rd\lpeg\lpeg.html	/^<h3><a name="op-sub"><\/a><code>patt1 - patt2<\/code><\/h3>$/;"	a
op-unm	.\3rd\lpeg\lpeg.html	/^<h3><a name="op-unm"><\/a><code>-patt<\/code><\/h3>$/;"	a
op-v	.\3rd\lpeg\lpeg.html	/^<h3><a name="op-v"><\/a><code>lpeg.V (v)<\/code><\/h3>$/;"	a
op_delete	.\lualib-src\lua-mongo.c	/^op_delete(lua_State *L) {$/;"	f	file:
op_get_more	.\lualib-src\lua-mongo.c	/^op_get_more(lua_State *L) {$/;"	f	file:
op_insert	.\lualib-src\lua-mongo.c	/^op_insert(lua_State *L) {$/;"	f	file:
op_kill	.\lualib-src\lua-mongo.c	/^op_kill(lua_State *L) {$/;"	f	file:
op_query	.\lualib-src\lua-mongo.c	/^op_query(lua_State *L) {$/;"	f	file:
op_reply	.\lualib-src\lua-mongo.c	/^op_reply(lua_State *L) {$/;"	f	file:
op_update	.\lualib-src\lua-mongo.c	/^op_update(lua_State *L) {$/;"	f	file:
opaque	.\skynet-src\socket_server.c	/^	uintptr_t opaque;		\/\/在skynet中用于保存服务的handle$/;"	m	struct:socket	file:
opaque	.\skynet-src\socket_server.c	/^	uintptr_t opaque;$/;"	m	struct:request_bind	file:
opaque	.\skynet-src\socket_server.c	/^	uintptr_t opaque;$/;"	m	struct:request_close	file:
opaque	.\skynet-src\socket_server.c	/^	uintptr_t opaque;$/;"	m	struct:request_listen	file:
opaque	.\skynet-src\socket_server.c	/^	uintptr_t opaque;$/;"	m	struct:request_open	file:
opaque	.\skynet-src\socket_server.c	/^	uintptr_t opaque;$/;"	m	struct:request_start	file:
opaque	.\skynet-src\socket_server.c	/^	uintptr_t opaque;$/;"	m	struct:request_udp	file:
opaque	.\skynet-src\socket_server.h	/^	uintptr_t opaque;$/;"	m	struct:socket_message
open	.\skynet-src\socket_server.c	/^		struct request_open open;$/;"	m	union:request_package::__anon25	typeref:struct:request_package::__anon25::request_open	file:
open_channel	.\service\clusterd.lua	/^local function open_channel(t, key)$/;"	f
open_func	.\3rd\lua\lparser.c	/^static void open_func (LexState *ls, FuncState *fs, BlockCnt *bl) {$/;"	f	file:
open_request	.\skynet-src\socket_server.c	/^open_request(struct socket_server *ss, struct request_package *req, uintptr_t opaque, const char *addr, int port) {$/;"	f	file:
open_socket	.\skynet-src\socket_server.c	/^open_socket(struct socket_server *ss, struct request_open * request, struct socket_message *result) {$/;"	f	file:
opencheck	.\3rd\lua\liolib.c	/^static void opencheck (lua_State *L, const char *fname, const char *mode) {$/;"	f	file:
openupval	.\3rd\lua\lstate.h	/^  GCObject *openupval;  \/* list of open upvalues in this stack *\/$/;"	m	struct:lua_State
opmode	.\3rd\lua\lopcodes.c	62;"	d	file:
optint	.\skynet-src\skynet_main.c	/^optint(const char *key, int opt) {$/;"	f	file:
optstring	.\service-src\service_snlua.c	/^optstring(struct skynet_context *ctx, const char *key, const char * str) {$/;"	f	file:
optstring	.\skynet-src\skynet_main.c	/^optstring(const char *key,const char * opt) {\/\/作用同optint,区别是这里取字符串$/;"	f	file:
origin_point	.\skynet-src\skynet_timer.c	/^	uint64_t origin_point;$/;"	m	struct:timer	file:
os_clock	.\3rd\lua\loslib.c	/^static int os_clock (lua_State *L) {$/;"	f	file:
os_date	.\3rd\lua\loslib.c	/^static int os_date (lua_State *L) {$/;"	f	file:
os_difftime	.\3rd\lua\loslib.c	/^static int os_difftime (lua_State *L) {$/;"	f	file:
os_execute	.\3rd\lua\loslib.c	/^static int os_execute (lua_State *L) {$/;"	f	file:
os_exit	.\3rd\lua\loslib.c	/^static int os_exit (lua_State *L) {$/;"	f	file:
os_getenv	.\3rd\lua\loslib.c	/^static int os_getenv (lua_State *L) {$/;"	f	file:
os_remove	.\3rd\lua\loslib.c	/^static int os_remove (lua_State *L) {$/;"	f	file:
os_rename	.\3rd\lua\loslib.c	/^static int os_rename (lua_State *L) {$/;"	f	file:
os_setlocale	.\3rd\lua\loslib.c	/^static int os_setlocale (lua_State *L) {$/;"	f	file:
os_time	.\3rd\lua\loslib.c	/^static int os_time (lua_State *L) {$/;"	f	file:
os_tmpname	.\3rd\lua\loslib.c	/^static int os_tmpname (lua_State *L) {$/;"	f	file:
otherwhite	.\3rd\lua\lgc.h	110;"	d
output	.\3rd\lua\luac.c	/^static const char* output=Output;	\/* actual output file name *\/$/;"	v	file:
overload	.\skynet-src\skynet_mq.c	/^	int overload;	\/\/超载值（超载队列的长度）$/;"	m	struct:message_queue	file:
overload_threshold	.\skynet-src\skynet_mq.c	/^	int overload_threshold;			\/\/超载阀值$/;"	m	struct:message_queue	file:
p	.\3rd\lpeg\lpcode.c	/^  Pattern *p;  \/* pattern being compiled *\/$/;"	m	struct:CompileState	file:
p	.\3rd\lpeg\lpvm.c	/^  const Instruction *p;  \/* next instruction *\/$/;"	m	struct:Stack	file:
p	.\3rd\lua\lobject.h	/^  struct Proto **p;  \/* functions defined inside the function *\/$/;"	m	struct:Proto	typeref:struct:Proto::Proto
p	.\3rd\lua\lobject.h	/^  struct Proto *p;$/;"	m	struct:LClosure	typeref:struct:LClosure::Proto
p	.\3rd\lua\lobject.h	/^  void *p;         \/* light userdata *\/$/;"	m	union:Value
p	.\3rd\lua\lstate.h	/^  struct Proto p;$/;"	m	union:GCObject	typeref:struct:GCObject::Proto
p	.\3rd\lua\lzio.h	/^  const char *p;		\/* current position in buffer *\/$/;"	m	struct:Zio
p	.\lualib-src\sproto\sproto.c	/^	struct sproto_type * p[2];$/;"	m	struct:protocol	typeref:struct:protocol::sproto_type	file:
p	.\skynet-src\socket_server.c	/^	} p;$/;"	m	struct:socket	typeref:union:socket::__anon24	file:
p 	.\3rd\lpeg\test.lua	/^p = (m.P(function () return true, "a" end) * 'a'$/;"	f
p 	.\3rd\lpeg\test.lua	/^p = (m.P(function (s, i) return i%2 == 0 and i end) * 1$/;"	f
p 	.\3rd\lpeg\test.lua	/^p = function (s1, i) assert(s == s1); t[#t + 1] = i; return i end$/;"	f
p 	.\3rd\lpeg\test.lua	/^p = function (s1, i) return m.match(m.P"a"^1, s1, i) end$/;"	f
p 	.\3rd\lpeg\test.lua	/^p = m.Cg(m.P(true)\/function () end * 1)   -- no value$/;"	f
p 	.\3rd\lpeg\test.lua	/^p = m.Cmt(0, function (s) p = s end) * m.P(false)$/;"	f
p 	.\3rd\lpeg\test.lua	/^p = m.P'a' * (function (s, i) return (s:sub(i, i) == 'b') and i + 1 end)$/;"	f
p 	.\3rd\lpeg\test.lua	/^p = m.P(function (s1, i) assert(s == s1); t[#t + 1] = i; return nil end) * false$/;"	f
p 	.\3rd\lpeg\test.lua	/^p = m.P(function (s1, i) assert(s == s1); t[#t + 1] = i;$/;"	f
p 	.\3rd\lpeg\test.lua	/^p = mt.__add(function (s, i) return i end, function (s, i) return nil end)$/;"	f
p 	.\3rd\lpeg\test.lua	/^p = mt.__mul(function (s, i) return i end, function (s, i) return nil end)$/;"	f
p_end	.\3rd\lua\lstrlib.c	/^  const char *p_end;  \/* end ('\\0') of pattern *\/$/;"	m	struct:MatchState	file:
pack	.\3rd\lua\ltablib.c	/^static int pack (lua_State *L) {$/;"	f	file:
pack	.\lualib-src\lua-multicast.c	/^pack(lua_State *L, void *data, size_t size) {$/;"	f	file:
pack	.\lualib-src\lua-netpack.c	/^	struct netpack pack;$/;"	m	struct:uncomplete	typeref:struct:uncomplete::netpack	file:
pack 	.\service\cdummy.lua	/^	pack = function(...) return ... end,$/;"	f
pack 	.\service\cslave.lua	/^	pack = function(...) return ... end,$/;"	f
pack_dict	.\lualib-src\lua-bson.c	/^pack_dict(lua_State *L, struct bson *b, bool isarray) {$/;"	f	file:
pack_from	.\lualib-src\lua-seri.c	/^pack_from(lua_State *L, struct write_block *b, int from) {\/\/打包参数$/;"	f	file:
pack_one	.\lualib-src\lua-seri.c	/^pack_one(lua_State *L, struct write_block *b, int index, int depth) {$/;"	f	file:
pack_ordered_dict	.\lualib-src\lua-bson.c	/^pack_ordered_dict(lua_State *L, struct bson *b, int n) {$/;"	f	file:
pack_package	.\service\cmaster.lua	/^local function pack_package(...)$/;"	f
pack_package	.\service\cslave.lua	/^local function pack_package(...)$/;"	f
pack_seg	.\lualib-src\sproto\sproto.c	/^pack_seg(const uint8_t *src, uint8_t * buffer, int sz, int n) {$/;"	f	file:
pack_value	.\lualib\redis.lua	/^local function pack_value(lines, v)$/;"	f
packbytes	.\lualib\sprotoparser.lua	/^local function packbytes(str)$/;"	f
packfield	.\lualib\sprotoparser.lua	/^local function packfield(f)$/;"	f
packgroup	.\lualib\sprotoparser.lua	/^local function packgroup(t,p)$/;"	f
packproto	.\lualib\sprotoparser.lua	/^local function packproto(name, p, alltypes)$/;"	f
packreq_number	.\lualib-src\lua-cluster.c	/^packreq_number(lua_State *L, int session, void * msg, size_t sz) {$/;"	f	file:
packreq_string	.\lualib-src\lua-cluster.c	/^packreq_string(lua_State *L, int session, void * msg, size_t sz) {$/;"	f	file:
packtype	.\lualib\sprotoparser.lua	/^local function packtype(name, t, alltypes)$/;"	f
packvalue	.\lualib\sprotoparser.lua	/^local function packvalue(id)$/;"	f
pairsmeta	.\3rd\lua\lbaselib.c	/^static int pairsmeta (lua_State *L, const char *method, int iszero,$/;"	f	file:
panic	.\3rd\lua\lauxlib.c	/^static int panic (lua_State *L) {$/;"	f	file:
panic	.\3rd\lua\lstate.h	/^  lua_CFunction panic;  \/* to be called in unprotected errors *\/$/;"	m	struct:global_State
parlist	.\3rd\lua\lparser.c	/^static void parlist (LexState *ls) {$/;"	f	file:
parser	.\lualib\sprotoparser.lua	/^local function parser(text,filename)$/;"	f
patch_func	.\lualib\snax\hotfix.lua	/^local function patch_func(funcs, global, group, name, f)$/;"	f
patchlistaux	.\3rd\lua\lcode.c	/^static void patchlistaux (FuncState *fs, int list, int vtarget, int reg,$/;"	f	file:
patchtestreg	.\3rd\lua\lcode.c	/^static int patchtestreg (FuncState *fs, int node, int reg) {$/;"	f	file:
path	.\skynet-src\skynet_module.c	/^	const char * path;\/\/模块所在路径$/;"	m	struct:modules	file:
patt_error 	.\3rd\lpeg\re.lua	/^local function patt_error (s, i)$/;"	f
pattreg	.\3rd\lpeg\lptree.c	/^static struct luaL_Reg pattreg[] = {$/;"	v	typeref:struct:luaL_Reg	file:
pc	.\3rd\lua\lparser.h	/^  int pc;  \/* next position to code (equivalent to `ncode') *\/$/;"	m	struct:FuncState
pc	.\3rd\lua\lparser.h	/^  int pc;  \/* position in code *\/$/;"	m	struct:Labeldesc
pcRel	.\3rd\lua\ldebug.h	14;"	d
pcallcont	.\3rd\lua\lbaselib.c	/^static int pcallcont (lua_State *L) {$/;"	f	file:
pconv	.\lualib-src\lua-sharedata.c	/^pconv(lua_State *L) {$/;"	f	file:
peephole	.\3rd\lpeg\lpcode.c	/^static void peephole (CompileState *compst) {$/;"	f	file:
pk_funcs	.\3rd\lua\loadlib.c	/^static const luaL_Reg pk_funcs[] = {$/;"	v	file:
pmain	.\3rd\lua\lua.c	/^static int pmain (lua_State *L) {$/;"	f	file:
pmain	.\3rd\lua\luac.c	/^static int pmain(lua_State* L)$/;"	f	file:
poll_fd	.\skynet-src\socket_poll.h	/^typedef int poll_fd;\/\/poll文件描述符$/;"	t
poll_socket_epoll_h	.\skynet-src\socket_epoll.h	3;"	d
poll_socket_kqueue_h	.\skynet-src\socket_kqueue.h	3;"	d
pool	.\lualib-src\sproto\sproto.c	/^struct pool {$/;"	s	file:
pool	.\service-src\databuffer.h	/^	struct message pool[MESSAGEPOOL];$/;"	m	struct:messagepool_list	typeref:struct:messagepool_list::message
pool	.\service-src\databuffer.h	/^	struct messagepool_list * pool;$/;"	m	struct:messagepool	typeref:struct:messagepool::messagepool_list
pool_alloc	.\lualib-src\sproto\sproto.c	/^pool_alloc(struct pool *p, size_t sz) {$/;"	f	file:
pool_init	.\lualib-src\sproto\sproto.c	/^pool_init(struct pool *p) {$/;"	f	file:
pool_newchunk	.\lualib-src\sproto\sproto.c	/^pool_newchunk(struct pool *p, size_t sz) {$/;"	f	file:
pool_release	.\lualib-src\sproto\sproto.c	/^pool_release(struct pool *p) {$/;"	f	file:
pop_lstring	.\lualib-src\lua-socket.c	/^pop_lstring(lua_State *L, struct socket_buffer *sb, int sz, int skip) {$/;"	f	file:
pop_queue	.\service-src\service_harbor.c	/^pop_queue(struct harbor_msg_queue * queue) {$/;"	f	file:
pop_response	.\lualib\socketchannel.lua	/^local function pop_response(self)$/;"	f
port	.\skynet-src\socket_server.c	/^	int port;$/;"	m	struct:request_open	file:
posrelat	.\3rd\lua\lstrlib.c	/^static size_t posrelat (ptrdiff_t pos, size_t len) {$/;"	f	file:
pow_mod_p	.\lualib-src\lua-crypt.c	/^pow_mod_p(uint64_t a, uint64_t b) {$/;"	f	file:
powmodp	.\lualib-src\lua-crypt.c	/^powmodp(uint64_t a, uint64_t b) {$/;"	f	file:
preinit_state	.\3rd\lua\lstate.c	/^static void preinit_state (lua_State *L, global_State *g) {$/;"	f	file:
preload	.\lualib-src\lua-skynet.c	/^	const char * preload;$/;"	m	struct:snlua	file:
preloadedlibs	.\3rd\lua\linit.c	/^static const luaL_Reg preloadedlibs[] = {$/;"	v	file:
prepcompile	.\3rd\lpeg\lptree.c	/^static Instruction *prepcompile (lua_State *L, Pattern *p, int idx) {$/;"	f	file:
prev	.\3rd\lua\lobject.h	/^      struct UpVal *prev;$/;"	m	struct:UpVal::__anon8::__anon9	typeref:struct:UpVal::__anon8::__anon9::UpVal
prev	.\3rd\lua\lparser.c	/^  struct LHS_assign *prev;$/;"	m	struct:LHS_assign	typeref:struct:LHS_assign::LHS_assign	file:
prev	.\3rd\lua\lparser.h	/^  struct FuncState *prev;  \/* enclosing function *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::FuncState
previous	.\3rd\lua\ldo.c	/^  struct lua_longjmp *previous;$/;"	m	struct:lua_longjmp	typeref:struct:lua_longjmp::lua_longjmp	file:
previous	.\3rd\lua\lparser.c	/^  struct BlockCnt *previous;  \/* chain *\/$/;"	m	struct:BlockCnt	typeref:struct:BlockCnt::BlockCnt	file:
previous	.\3rd\lua\lstate.h	/^  struct CallInfo *previous, *next;  \/* dynamic call link *\/$/;"	m	struct:CallInfo	typeref:struct:CallInfo::CallInfo
primaryexp	.\3rd\lua\lparser.c	/^static void primaryexp (LexState *ls, expdesc *v) {$/;"	f	file:
print	.\lualib\skynet\inject.lua	/^	local function print(...)$/;"	f
print	.\service\debug_console.lua	/^		local function print(...)$/;"	f
print_package	.\examples\client.lua	/^local function print_package(t, ...)$/;"	f
print_request	.\examples\client.lua	/^local function print_request(name, args)$/;"	f
print_response	.\examples\client.lua	/^local function print_response(session, args)$/;"	f
print_usage	.\3rd\lua\lua.c	/^static void print_usage (const char *badoption) {$/;"	f	file:
print_version	.\3rd\lua\lua.c	/^static void print_version (void) {$/;"	f	file:
printcap	.\3rd\lpeg\lpprint.c	/^static void printcap (Capture *cap) {$/;"	f	file:
printcapkind	.\3rd\lpeg\lpprint.c	/^static void printcapkind (int kind) {$/;"	f	file:
printcaplist	.\3rd\lpeg\lpprint.c	/^void printcaplist (Capture *cap, Capture *limit) {$/;"	f
printcharset	.\3rd\lpeg\lpprint.c	/^void printcharset (const byte *st) {$/;"	f
printinst	.\3rd\lpeg\lpprint.c	/^static void printinst (const Instruction *op, const Instruction *p) {$/;"	f	file:
printjmp	.\3rd\lpeg\lpprint.c	/^static void printjmp (const Instruction *op, const Instruction *p) {$/;"	f	file:
printktable	.\3rd\lpeg\lpprint.c	/^void printktable (lua_State *L, int idx) {$/;"	f
printktable	.\3rd\lpeg\lpprint.h	24;"	d
printpatt	.\3rd\lpeg\lpprint.c	/^void printpatt (Instruction *p, int n) {$/;"	f
printpatt	.\3rd\lpeg\lpprint.h	28;"	d
printtree	.\3rd\lpeg\lpprint.c	/^void printtree (TTree *tree, int ident) {$/;"	f
printtree	.\3rd\lpeg\lpprint.h	26;"	d
priority	.\3rd\lua\lparser.c	/^} priority[] = {  \/* ORDER OPR *\/$/;"	v	typeref:struct:__anon12	file:
progname	.\3rd\lua\lua.c	/^static const char *progname = LUA_PROGNAME;$/;"	v	file:
progname	.\3rd\lua\luac.c	/^static const char* progname=PROGNAME;	\/* actual program name *\/$/;"	v	file:
propagateall	.\3rd\lua\lgc.c	/^static void propagateall (global_State *g) {$/;"	f	file:
propagatelist	.\3rd\lua\lgc.c	/^static void propagatelist (global_State *g, GCObject *l) {$/;"	f	file:
propagatemark	.\3rd\lua\lgc.c	/^static void propagatemark (global_State *g) {$/;"	f	file:
proto	.\lualib-src\sproto\sproto.c	/^	struct protocol * proto;$/;"	m	struct:sproto	typeref:struct:sproto::protocol	file:
protocol	.\lualib-src\sproto\sproto.c	/^struct protocol {$/;"	s	file:
protocol	.\skynet-src\socket_server.c	/^	uint16_t protocol;		\/\/协议$/;"	m	struct:socket	file:
protocol_n	.\lualib-src\sproto\sproto.c	/^	int protocol_n;$/;"	m	struct:sproto	file:
ps	.\3rd\lpeg\lptree.h	/^    int ps;  \/* occasional second sibling *\/$/;"	m	union:TTree::__anon3
ptop	.\3rd\lpeg\lpcap.h	/^  int ptop;  \/* index of last argument to 'match' *\/$/;"	m	struct:CapState
ptr	.\lualib-src\lua-bson.c	/^	const uint8_t * ptr;$/;"	m	struct:bson_reader	file:
ptr	.\lualib-src\lua-bson.c	/^	uint8_t *ptr;$/;"	m	struct:bson	file:
ptr	.\lualib-src\lua-mongo.c	/^	uint8_t * ptr;$/;"	m	struct:buffer	file:
ptr	.\lualib-src\lua-seri.c	/^	int ptr;$/;"	m	struct:read_block	file:
ptr	.\lualib-src\lua-seri.c	/^	int ptr;$/;"	m	struct:write_block	file:
ptr	.\skynet-src\socket_server.c	/^	char *ptr;	\/\/ 指向当前未发送的数据首部$/;"	m	struct:write_buffer	file:
publish	.\service\multicastd.lua	/^local function publish(c , source, pack, size)$/;"	f
push64	.\lualib-src\lua-crypt.c	/^push64(lua_State *L, uint64_t r) {$/;"	f	file:
push_captures	.\3rd\lua\lstrlib.c	/^static int push_captures (MatchState *ms, const char *s, const char *e) {$/;"	f	file:
push_data	.\lualib-src\lua-netpack.c	/^push_data(lua_State *L, int fd, void *buffer, int size, int clone) {$/;"	f	file:
push_more	.\lualib-src\lua-netpack.c	/^push_more(lua_State *L, int fd, uint8_t *buffer, int size) {$/;"	f	file:
push_onecapture	.\3rd\lua\lstrlib.c	/^static void push_onecapture (MatchState *ms, int i, const char *s,$/;"	f	file:
push_queue	.\service-src\service_harbor.c	/^push_queue(struct harbor_msg_queue * queue, void * buffer, size_t sz, struct remote_message_header * header) {$/;"	f	file:
push_queue_msg	.\service-src\service_harbor.c	/^push_queue_msg(struct harbor_msg_queue * queue, struct harbor_msg * m) {$/;"	f	file:
push_response	.\lualib\socketchannel.lua	/^local function push_response(self, response, co)$/;"	f
push_socket_data	.\service-src\service_harbor.c	/^push_socket_data(struct harbor *h, const struct skynet_socket_message * message) {$/;"	f	file:
push_value	.\lualib-src\lua-seri.c	/^push_value(lua_State *L, struct read_block *rb, int type, int cookie) {$/;"	f	file:
pushcapture	.\3rd\lpeg\lpcap.c	/^static int pushcapture (CapState *cs) {$/;"	f	file:
pushclosure	.\3rd\lua\lvm.c	/^static void pushclosure (lua_State *L, Proto *p, UpVal **encup, StkId base,$/;"	f	file:
pusherror	.\3rd\lua\loadlib.c	/^static void pusherror (lua_State *L) {$/;"	f	file:
pushfirsthash	.\lualib-src\lua-sharedata.c	/^pushfirsthash(lua_State *L, struct table * tbl) {$/;"	f	file:
pushfuncname	.\3rd\lua\lauxlib.c	/^static void pushfuncname (lua_State *L, lua_Debug *ar) {$/;"	f	file:
pushfunction_withbuffer	.\lualib-src\sproto\lsproto.c	/^pushfunction_withbuffer(lua_State *L, const char * name, lua_CFunction func) {$/;"	f	file:
pushglobalfuncname	.\3rd\lua\lauxlib.c	/^static int pushglobalfuncname (lua_State *L, lua_Debug *ar) {$/;"	f	file:
pushkey	.\lualib-src\lua-sharedata.c	/^pushkey(lua_State *L, lua_State *sL, struct node *n) {$/;"	f	file:
pushline	.\3rd\lua\lua.c	/^static int pushline (lua_State *L, int firstline) {$/;"	f	file:
pushluaval	.\3rd\lpeg\lpcap.c	23;"	d	file:
pushnestedvalues	.\3rd\lpeg\lpcap.c	/^static int pushnestedvalues (CapState *cs, int addextra) {$/;"	f	file:
pushnexttemplate	.\3rd\lua\loadlib.c	/^static const char *pushnexttemplate (lua_State *L, const char *path) {$/;"	f	file:
pushonenestedvalue	.\3rd\lpeg\lpcap.c	/^static void pushonenestedvalue (CapState *cs) {$/;"	f	file:
pushstr	.\3rd\lua\lobject.c	/^static void pushstr (lua_State *L, const char *str, size_t l) {$/;"	f	file:
pushstring	.\lualib-src\lua-netpack.c	/^pushstring(lua_State *L, const char * msg, int size) {$/;"	f	file:
pushvalue	.\lualib-src\lua-sharedata.c	/^pushvalue(lua_State *L, lua_State *sL, uint8_t vt, union value *v) {$/;"	f	file:
put_length	.\3rd\lua-md5\md5.c	/^static void put_length(WORD32 *x, long len) {$/;"	f	file:
pvalue	.\3rd\lua\lobject.h	155;"	d
query	.\service\datacenterd.lua	/^local function query(db, key, ...)$/;"	f
query_proto	.\lualib-src\sproto\sproto.c	/^query_proto(struct sproto *sp, int tag) {$/;"	f	file:
querycap	.\3rd\lpeg\lpcap.c	/^static int querycap (CapState *cs) {$/;"	f	file:
queryproto	.\lualib\sproto.lua	/^local function queryproto(self, pname)$/;"	f
querytype	.\lualib\sproto.lua	/^local function querytype(self, typename)$/;"	f
queue	.\lualib-src\lua-clientsocket.c	/^	char * queue[QUEUE_SIZE];$/;"	m	struct:queue	file:
queue	.\lualib-src\lua-clientsocket.c	/^struct queue {$/;"	s	file:
queue	.\lualib-src\lua-netpack.c	/^	struct netpack queue[QUEUESIZE];$/;"	m	struct:queue	typeref:struct:queue::netpack	file:
queue	.\lualib-src\lua-netpack.c	/^struct queue {$/;"	s	file:
queue	.\service-src\service_harbor.c	/^	struct harbor_msg_queue * queue;$/;"	m	struct:keyvalue	typeref:struct:keyvalue::harbor_msg_queue	file:
queue	.\service-src\service_harbor.c	/^	struct harbor_msg_queue *queue;$/;"	m	struct:slave	typeref:struct:slave::harbor_msg_queue	file:
queue	.\skynet-src\skynet_mq.c	/^	struct skynet_message *queue;	\/\/具体的消息队列(存放具体的skynet消息) 类似于数组，按需扩展$/;"	m	struct:message_queue	typeref:struct:message_queue::skynet_message	file:
queue	.\skynet-src\skynet_server.c	/^	struct message_queue *queue;	\/\/消息队列$/;"	m	struct:skynet_context	typeref:struct:skynet_context::message_queue	file:
quoteStr 	.\test\testmysql.lua	/^    quoteStr = function(str)$/;"	f
quote_sql_str	.\lualib-src\lua_mysqlaux.c	/^quote_sql_str(lua_State *L)$/;"	f	file:
r	.\3rd\lua\llex.h	/^  lua_Number r;$/;"	m	union:__anon5
r	.\lualib-src\lua-crypt.c	/^const uint32_t r[] = {7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,$/;"	v
raise_uncomplete	.\skynet-src\socket_server.c	/^raise_uncomplete(struct socket * s) {$/;"	f	file:
raw_dispatch_message	.\lualib\skynet.lua	/^local function raw_dispatch_message(prototype, msg, sz, session, source, ...)$/;"	f
rawgco2ts	.\3rd\lua\lstate.h	200;"	d
rawgco2u	.\3rd\lua\lstate.h	203;"	d
rawtsvalue	.\3rd\lua\lobject.h	156;"	d
rawuvalue	.\3rd\lua\lobject.h	158;"	d
rb_read	.\lualib-src\lua-seri.c	/^rb_read(struct read_block *rb, void *buffer, int sz) {$/;"	f	file:
rball_init	.\lualib-src\lua-seri.c	/^rball_init(struct read_block * rb, char * buffer, int size) {$/;"	f	file:
read	.\lualib-src\lua-netpack.c	/^	int read;$/;"	m	struct:uncomplete	file:
read	.\service-src\service_harbor.c	/^	int read;$/;"	m	struct:slave	file:
read	.\skynet-src\rwlock.h	/^	int read;$/;"	m	struct:rwlock
read	.\skynet-src\socket_poll.h	/^	bool read;$/;"	m	struct:event
read64	.\lualib-src\lua-crypt.c	/^read64(lua_State *L, uint32_t xx[2], uint32_t yy[2]) {$/;"	f	file:
read_all	.\3rd\lua\liolib.c	/^static void read_all (lua_State *L, FILE *f) {$/;"	f	file:
read_block	.\lualib-src\lua-seri.c	/^struct read_block {$/;"	s	file:
read_boolean	.\lualib\redis.lua	/^local function read_boolean(so)$/;"	f
read_byte	.\lualib-src\lua-bson.c	/^read_byte(lua_State *L, struct bson_reader *br) {$/;"	f	file:
read_bytes	.\lualib-src\lua-bson.c	/^read_bytes(lua_State *L, struct bson_reader *br, int sz) {$/;"	f	file:
read_chars	.\3rd\lua\liolib.c	/^static int read_chars (lua_State *L, FILE *f, size_t n) {$/;"	f	file:
read_cstring	.\lualib-src\lua-bson.c	/^read_cstring(lua_State *L, struct bson_reader *br, size_t *sz) {$/;"	f	file:
read_double	.\lualib-src\lua-bson.c	/^read_double(lua_State *L, struct bson_reader *br) {$/;"	f	file:
read_int32	.\lualib-src\lua-bson.c	/^read_int32(lua_State *L, struct bson_reader *br) {$/;"	f	file:
read_int64	.\lualib-src\lua-bson.c	/^read_int64(lua_State *L, struct bson_reader *br) {$/;"	f	file:
read_line	.\3rd\lua\liolib.c	/^static int read_line (lua_State *L, FILE *f, int chop) {$/;"	f	file:
read_long_string	.\3rd\lua\llex.c	/^static void read_long_string (LexState *ls, SemInfo *seminfo, int sep) {$/;"	f	file:
read_name	.\service\service_mgr.lua	/^local function read_name(service_name)$/;"	f
read_number	.\3rd\lua\liolib.c	/^static int read_number (lua_State *L, FILE *f) {$/;"	f	file:
read_numeral	.\3rd\lua\llex.c	/^static void read_numeral (LexState *ls, SemInfo *seminfo) {$/;"	f	file:
read_package	.\service\cmaster.lua	/^local function read_package(fd)$/;"	f
read_package	.\service\cslave.lua	/^local function read_package(fd)$/;"	f
read_response	.\lualib\redis.lua	/^local function read_response(fd)$/;"	f
read_response	.\service\clusterd.lua	/^local function read_response(sock)$/;"	f
read_result	.\lualib\mysql.lua	/^local function read_result(self, sock)$/;"	f
read_size	.\lualib-src\lua-netpack.c	/^read_size(uint8_t * buffer) {$/;"	f	file:
read_string	.\3rd\lua\llex.c	/^static void read_string (LexState *ls, int del, SemInfo *seminfo) {$/;"	f	file:
readable	.\3rd\lua\loadlib.c	/^static int readable (const char *filename) {$/;"	f	file:
readall	.\lualib\http\httpd.lua	/^local function readall(readbytes, bodylimit)$/;"	f
readcrln	.\lualib\http\internal.lua	/^local function readcrln(readbytes, body)$/;"	f
readdecesc	.\3rd\lua\llex.c	/^static int readdecesc (LexState *ls) {$/;"	f	file:
reader	.\3rd\lua\luac.c	/^static const char* reader(lua_State *L, void *ud, size_t *size)$/;"	f	file:
reader	.\3rd\lua\lzio.h	/^  lua_Reader reader;		\/* reader function *\/$/;"	m	struct:Zio
readhexa	.\3rd\lua\lobject.c	/^static lua_Number readhexa (const char **s, lua_Number r, int *count) {$/;"	f	file:
readhexaesc	.\3rd\lua\llex.c	/^static int readhexaesc (LexState *ls) {$/;"	f	file:
readline_stdin	.\lualib-src\lua-clientsocket.c	/^readline_stdin(void * arg) {$/;"	f	file:
ready	.\service\cslave.lua	/^local function ready()$/;"	f
reallocprog	.\3rd\lpeg\lpcode.c	/^void reallocprog (lua_State *L, Pattern *p, int nsize) {$/;"	f
reallymarkobject	.\3rd\lua\lgc.c	/^static void reallymarkobject (global_State *g, GCObject *o) {$/;"	f	file:
recfield	.\3rd\lua\lparser.c	/^static void recfield (LexState *ls, struct ConsControl *cc) {$/;"	f	file:
recover	.\3rd\lua\ldo.c	/^static int recover (lua_State *L, int status) {$/;"	f	file:
recv_buffer	.\service-src\service_harbor.c	/^	char * recv_buffer;$/;"	m	struct:slave	file:
recv_package	.\examples\client.lua	/^local function recv_package(last)$/;"	f
recv_response	.\examples\login\client.lua	/^local function recv_response(v)$/;"	f
recvctrl_fd	.\skynet-src\socket_server.c	/^	int recvctrl_fd;	\/\/读取控制文件描述符$/;"	m	struct:socket_server	file:
redcmd[36] 	.\lualib\redis.lua	/^redcmd[36] = function(fd, data) -- '$'$/;"	f
redcmd[42] 	.\lualib\redis.lua	/^redcmd[42] = function(fd, data)	-- '*'$/;"	f
redcmd[43] 	.\lualib\redis.lua	/^redcmd[43] = function(fd, data) -- '+'$/;"	f
redcmd[45] 	.\lualib\redis.lua	/^redcmd[45] = function(fd, data) -- '-'$/;"	f
redcmd[58] 	.\lualib\redis.lua	/^redcmd[58] = function(fd, data) -- ':'$/;"	f
redis.connect	.\lualib\redis.lua	/^function redis.connect(db_conf)$/;"	f
redis.watch	.\lualib\redis.lua	/^function redis.watch(db_conf)$/;"	f
redis_login	.\lualib\redis.lua	/^local function redis_login(auth, db)$/;"	f
ref	.\lualib-src\lua-sharedata.c	/^	int ref;$/;"	m	struct:state	file:
ref	.\skynet-src\skynet_server.c	/^	int ref;						\/\/引用计数$/;"	m	struct:skynet_context	file:
ref 	.\3rd\lpeg\test.lua	/^function ref (s, i, a, b)$/;"	f
ref 	.\3rd\lpeg\test.lua	/^local function ref (s, i, x)$/;"	f
ref 	.\3rd\lpeg\test.lua	/^ref = function (s,i,x) return i == tonumber(x) and i, 'xuxu' end$/;"	f
reference	.\lualib-src\lua-multicast.c	/^	int reference;$/;"	m	struct:mc_package	file:
reference	.\lualib-src\lua-stm.c	/^	int reference;$/;"	m	struct:stm_copy	file:
reference	.\lualib-src\lua-stm.c	/^	int reference;$/;"	m	struct:stm_object	file:
register_global	.\service\service_mgr.lua	/^local function register_global()$/;"	f
register_local	.\service\service_mgr.lua	/^local function register_local()$/;"	f
registerlocalvar	.\3rd\lua\lparser.c	/^static int registerlocalvar (LexState *ls, TString *varname) {$/;"	f	file:
rehash	.\3rd\lua\ltable.c	/^static void rehash (lua_State *L, Table *t, const TValue *ek) {$/;"	f	file:
release	.\skynet-src\skynet_module.h	/^	skynet_dl_release release;\/\/释放函数$/;"	m	struct:skynet_module
release	.\skynet-src\skynet_mq.c	/^	int release;	\/\/消息队列释放标记，当要释放一个服务的时候 清理标记$/;"	m	struct:message_queue	file:
release_queue	.\service-src\service_harbor.c	/^release_queue(struct harbor_msg_queue *queue) {$/;"	f	file:
release_watching	.\lualib\skynet.lua	/^local function release_watching(address) --释放引用数$/;"	f
releaseobj	.\lualib-src\lua-sharedata.c	/^releaseobj(lua_State *L) {$/;"	f	file:
remarkupvals	.\3rd\lua\lgc.c	/^static void remarkupvals (global_State *g) {$/;"	f	file:
remote_message	.\skynet-src\skynet_harbor.h	/^struct remote_message {$/;"	s
remote_message_header	.\service-src\service_harbor.c	/^struct remote_message_header {$/;"	s	file:
remote_name	.\service-src\service_gate.c	/^	char remote_name[32];$/;"	m	struct:connection	file:
remote_name	.\skynet-src\skynet_harbor.h	/^struct remote_name {$/;"	s
remote_publish	.\service\multicastd.lua	/^local function remote_publish(node, channel, source, ...)$/;"	f
remote_send_handle	.\service-src\service_harbor.c	/^remote_send_handle(struct harbor *h, uint32_t source, uint32_t destination, int type, int session, const char * msg, size_t sz) {$/;"	f	file:
remote_send_name	.\service-src\service_harbor.c	/^remote_send_name(struct harbor *h, uint32_t source, const char name[GLOBALNAME_LENGTH], int type, int session, const char * msg, size_t sz) {$/;"	f	file:
removedyncap	.\3rd\lpeg\lpvm.c	/^static int removedyncap (lua_State *L, Capture *capture,$/;"	f	file:
removeentry	.\3rd\lua\lgc.c	/^static void removeentry (Node *n) {$/;"	f	file:
removevalues	.\3rd\lua\lcode.c	/^static void removevalues (FuncState *fs, int list) {$/;"	f	file:
removevars	.\3rd\lua\lparser.c	/^static void removevars (FuncState *fs, int tolevel) {$/;"	f	file:
repeatstat	.\3rd\lua\lparser.c	/^static void repeatstat (LexState *ls, int line) {$/;"	f	file:
replace_object	.\lualib-src\lua-bson.c	/^replace_object(lua_State *L, int type, struct bson * bs) {$/;"	f	file:
reply_length	.\lualib-src\lua-mongo.c	/^reply_length(lua_State *L) {$/;"	f	file:
report	.\3rd\lua\lua.c	/^static int report (lua_State *L, int status) {$/;"	f	file:
report_accept	.\skynet-src\socket_server.c	/^report_accept(struct socket_server *ss, struct socket *s, struct socket_message *result) {$/;"	f	file:
report_connect	.\skynet-src\socket_server.c	/^report_connect(struct socket_server *ss, struct socket *s, struct socket_message *result) {$/;"	f	file:
report_harbor_down	.\service-src\service_harbor.c	/^report_harbor_down(struct harbor *h, int id) {$/;"	f	file:
report_slave	.\service\cmaster.lua	/^local function report_slave(fd, slave_id, slave_addr)$/;"	f
request	.\examples\agent.lua	/^local function request(name, args, response)$/;"	f
request	.\lualib\http\httpc.lua	/^local function request(fd, method, host, url, recvheader, header, content)$/;"	f
request	.\lualib\snax\msgserver.lua	/^	local function request(fd, msg, sz)$/;"	f
request	.\service\service_mgr.lua	/^local function request(name, func, ...)$/;"	f
request	.\test\testresponse.lua	/^local function request(tick, i)$/;"	f
request_bind	.\skynet-src\socket_server.c	/^struct request_bind {$/;"	s	file:
request_close	.\skynet-src\socket_server.c	/^struct request_close {$/;"	s	file:
request_listen	.\skynet-src\socket_server.c	/^struct request_listen {$/;"	s	file:
request_open	.\skynet-src\socket_server.c	/^struct request_open {$/;"	s	file:
request_package	.\skynet-src\socket_server.c	/^struct request_package {$/;"	s	file:
request_send	.\skynet-src\socket_server.c	/^struct request_send {$/;"	s	file:
request_send_udp	.\skynet-src\socket_server.c	/^struct request_send_udp {$/;"	s	file:
request_setopt	.\skynet-src\socket_server.c	/^struct request_setopt {$/;"	s	file:
request_setudp	.\skynet-src\socket_server.c	/^struct request_setudp {$/;"	s	file:
request_start	.\skynet-src\socket_server.c	/^struct request_start {$/;"	s	file:
request_udp	.\skynet-src\socket_server.c	/^struct request_udp {$/;"	s	file:
resdyncaptures	.\3rd\lpeg\lpvm.c	/^static int resdyncaptures (lua_State *L, int fr, int curr, int limit) {$/;"	f	file:
reserve_id	.\skynet-src\socket_server.c	/^reserve_id(struct socket_server *ss) {$/;"	f	file:
reserve_length	.\lualib-src\lua-bson.c	/^reserve_length(struct bson *b) {$/;"	f	file:
reserve_length	.\lualib-src\lua-mongo.c	/^reserve_length(struct buffer *b) {$/;"	f	file:
resetbit	.\3rd\lua\lgc.h	82;"	d
resetbits	.\3rd\lua\lgc.h	76;"	d
resethookcount	.\3rd\lua\ldebug.h	18;"	d
resetoldbit	.\3rd\lua\lgc.h	108;"	d
response	.\examples\simpleweb.lua	/^local function response(id, ...)$/;"	f
response	.\lualib-src\lua-mongo.c	/^struct response {$/;"	s	file:
response	.\lualib\skynet.lua	/^		local function response(ok, ...)$/;"	f
response	.\test\testresponse.lua	/^local function response()$/;"	f
response.error	.\test\pingserver.lua	/^function response.error()$/;"	f
response.ping	.\test\pingserver.lua	/^function response.ping(hello)$/;"	f
response_name	.\service\cdummy.lua	/^local function response_name(name)$/;"	f
response_name	.\service\cslave.lua	/^local function response_name(name)$/;"	f
restartcollection	.\3rd\lua\lgc.c	/^static void restartcollection (global_State *g) {$/;"	f	file:
restorestack	.\3rd\lua\ldo.h	23;"	d
result	.\skynet-src\skynet_server.c	/^	char result[32];				\/\/结果缓冲区$/;"	m	struct:skynet_context	file:
result_index	.\lualib-src\sproto\lsproto.c	/^	int result_index;$/;"	m	struct:decode_ud	file:
resume	.\3rd\lua\ldo.c	/^static void resume (lua_State *L, void *ud) {$/;"	f	file:
resume_error	.\3rd\lua\ldo.c	/^static l_noret resume_error (lua_State *L, const char *msg, StkId firstArg) {$/;"	f	file:
ret_pack	.\lualib\snax\loginserver.lua	/^	local function ret_pack(ok, err, ...)$/;"	f
retire_response	.\lualib\snax\msgserver.lua	/^	local function retire_response(u)$/;"	f
retraversegrays	.\3rd\lua\lgc.c	/^static void retraversegrays (global_State *g) {$/;"	f	file:
retstat	.\3rd\lua\lparser.c	/^static void retstat (LexState *ls) {$/;"	f	file:
return_f	.\service\snaxd.lua	/^local function return_f(f, ...)$/;"	f
return_free_node	.\lualib-src\lua-socket.c	/^return_free_node(lua_State *L, int pool, struct socket_buffer *sb) {$/;"	f	file:
rfds	.\skynet-src\socket_server.c	/^	fd_set rfds;	\/\/用于select的描述符集$/;"	m	struct:socket_server	file:
right	.\3rd\lua\lparser.c	/^  lu_byte right; \/* right priority *\/$/;"	m	struct:__anon12	file:
righttt	.\3rd\lua\lobject.h	177;"	d
rol	.\lualib-src\lsha1.c	99;"	d	file:
root	.\lualib-src\lua-sharedata.c	/^	struct table * root;$/;"	m	struct:ctrl	typeref:struct:ctrl::table	file:
root	.\lualib-src\lua-sharedata.c	/^	struct table * root;$/;"	m	struct:state	typeref:struct:state::table	file:
rotate	.\3rd\lua-md5\md5.c	38;"	d	file:
rttype	.\3rd\lua\lobject.h	118;"	d
rttype	.\3rd\lua\lobject.h	342;"	d
rttype	.\3rd\lua\lobject.h	343;"	d
runargs	.\3rd\lua\lua.c	/^static int runargs (lua_State *L, char **argv, int n) {$/;"	f	file:
runtimecap	.\3rd\lpeg\lpcap.c	/^int runtimecap (CapState *cs, Capture *close, const char *s, int *rem) {$/;"	f
rwlock	.\skynet-src\rwlock.h	/^struct rwlock {$/;"	s
rwlock_init	.\skynet-src\rwlock.h	/^rwlock_init(struct rwlock *lock) {\/\/初始化$/;"	f
rwlock_rlock	.\skynet-src\rwlock.h	/^rwlock_rlock(struct rwlock *lock) {\/\/读加锁$/;"	f
rwlock_runlock	.\skynet-src\rwlock.h	/^rwlock_runlock(struct rwlock *lock) {\/\/读解锁$/;"	f
rwlock_wlock	.\skynet-src\rwlock.h	/^rwlock_wlock(struct rwlock *lock) {\/\/写加锁$/;"	f
rwlock_wunlock	.\skynet-src\rwlock.h	/^rwlock_wunlock(struct rwlock *lock) {\/\/写解锁$/;"	f
s	.\3rd\lpeg\lpcap.c	/^      const char *s;  \/* ... starts here *\/$/;"	m	struct:StrAux::__anon1::__anon2	file:
s	.\3rd\lpeg\lpcap.c	/^    } s;$/;"	m	union:StrAux::__anon1	typeref:struct:StrAux::__anon1::__anon2	file:
s	.\3rd\lpeg\lpcap.h	/^  const char *s;  \/* original string *\/$/;"	m	struct:CapState
s	.\3rd\lpeg\lpcap.h	/^  const char *s;  \/* subject position *\/$/;"	m	struct:Capture
s	.\3rd\lpeg\lpvm.c	/^  const char *s;  \/* saved position (or NULL for calls) *\/$/;"	m	struct:Stack	file:
s	.\3rd\lua\lauxlib.c	/^  const char *s;$/;"	m	struct:LoadS	file:
s	.\service-src\service_harbor.c	/^	struct slave s[REMOTE_MAX];$/;"	m	struct:harbor	typeref:struct:harbor::slave	file:
s	.\skynet-src\socket_poll.h	/^	void * s;$/;"	m	struct:event
s	.\skynet-src\socket_server.c	/^	struct sockaddr s;$/;"	m	union:sockaddr_all	typeref:struct:sockaddr_all::sockaddr	file:
sat_SHA1_Final	.\lualib-src\lsha1.c	/^static void sat_SHA1_Final(SHA1_CTX* context, uint8_t digest[SHA1_DIGEST_SIZE])$/;"	f	file:
sat_SHA1_Init	.\lualib-src\lsha1.c	/^static void sat_SHA1_Init(SHA1_CTX* context)$/;"	f	file:
sat_SHA1_Update	.\lualib-src\lsha1.c	/^static void sat_SHA1_Update(SHA1_CTX* context,	const uint8_t* data, const size_t len)$/;"	f	file:
save	.\3rd\lua\lauxlib.c	/^save(const char *key, const void * proto) {$/;"	f	file:
save	.\3rd\lua\llex.c	/^static void save (LexState *ls, int c) {$/;"	f	file:
save_and_next	.\3rd\lua\llex.c	46;"	d	file:
save_uncomplete	.\lualib-src\lua-netpack.c	/^save_uncomplete(lua_State *L, int fd) {$/;"	f	file:
savedpc	.\3rd\lua\lstate.h	/^      const Instruction *savedpc;$/;"	m	struct:CallInfo::__anon17::__anon18
savestack	.\3rd\lua\ldo.h	22;"	d
scanformat	.\3rd\lua\lstrlib.c	/^static const char *scanformat (lua_State *L, const char *strfrmt, char *form) {$/;"	f	file:
searcher_C	.\3rd\lua\loadlib.c	/^static int searcher_C (lua_State *L) {$/;"	f	file:
searcher_Croot	.\3rd\lua\loadlib.c	/^static int searcher_Croot (lua_State *L) {$/;"	f	file:
searcher_Lua	.\3rd\lua\loadlib.c	/^static int searcher_Lua (lua_State *L) {$/;"	f	file:
searcher_preload	.\3rd\lua\loadlib.c	/^static int searcher_preload (lua_State *L) {$/;"	f	file:
searchpath	.\3rd\lua\loadlib.c	/^static const char *searchpath (lua_State *L, const char *name,$/;"	f	file:
searchupvalue	.\3rd\lua\lparser.c	/^static int searchupvalue (FuncState *fs, TString *name) {$/;"	f	file:
searchvar	.\3rd\lua\lparser.c	/^static int searchvar (FuncState *fs, TString *n) {$/;"	f	file:
seed	.\3rd\lua\lstate.h	/^  unsigned int seed;  \/* randomized seed for hashes *\/$/;"	m	struct:global_State
semerror	.\3rd\lua\lparser.c	/^static l_noret semerror (LexState *ls, const char *msg) {$/;"	f	file:
seminfo	.\3rd\lua\llex.h	/^  SemInfo seminfo;$/;"	m	struct:Token
send	.\skynet-src\socket_server.c	/^		struct request_send send;$/;"	m	union:request_package::__anon25	typeref:struct:request_package::__anon25::request_send	file:
send	.\skynet-src\socket_server.c	/^	struct request_send send;$/;"	m	struct:request_send_udp	typeref:struct:request_send_udp::request_send	file:
send_buffer	.\skynet-src\socket_server.c	/^send_buffer(struct socket_server *ss, struct socket *s, struct socket_message *result) {$/;"	f	file:
send_buffer_empty	.\skynet-src\socket_server.c	/^send_buffer_empty(struct socket *s) {$/;"	f	file:
send_list	.\skynet-src\socket_server.c	/^send_list(struct socket_server *ss, struct socket *s, struct wb_list *list, struct socket_message *result) {$/;"	f	file:
send_list_tcp	.\skynet-src\socket_server.c	/^send_list_tcp(struct socket_server *ss, struct socket *s, struct wb_list *list, struct socket_message *result) {$/;"	f	file:
send_list_udp	.\skynet-src\socket_server.c	/^send_list_udp(struct socket_server *ss, struct socket *s, struct wb_list *list, struct socket_message *result) {$/;"	f	file:
send_object	.\skynet-src\socket_server.c	/^struct send_object {$/;"	s	file:
send_object_init	.\skynet-src\socket_server.c	/^send_object_init(struct socket_server *ss, struct send_object *so, void *object, int sz) {$/;"	f	file:
send_package	.\examples\agent.lua	/^local function send_package(pack)$/;"	f
send_package	.\examples\client.lua	/^local function send_package(fd, pack)$/;"	f
send_package	.\examples\login\client.lua	/^local function send_package(fd, pack)$/;"	f
send_remote	.\service-src\service_harbor.c	/^send_remote(struct skynet_context * ctx, int fd, const char * buffer, size_t sz, struct remote_message_header * cookie) {$/;"	f	file:
send_request	.\examples\client.lua	/^local function send_request(name, args)$/;"	f
send_request	.\examples\login\client.lua	/^local function send_request(v, session)$/;"	f
send_request	.\service\clusterd.lua	/^local function send_request(source, node, addr, msg, sz)$/;"	f
send_request	.\skynet-src\socket_server.c	/^send_request(struct socket_server *ss, struct request_package *request, char type, int len) {$/;"	f	file:
send_socket	.\skynet-src\socket_server.c	/^send_socket(struct socket_server *ss, struct request_send * request, struct socket_message *result, int priority, const uint8_t *udp_address) {$/;"	f	file:
send_udp	.\skynet-src\socket_server.c	/^		struct request_send_udp send_udp;$/;"	m	union:request_package::__anon25	typeref:struct:request_package::__anon25::request_send_udp	file:
sendctrl_fd	.\skynet-src\socket_server.c	/^	int sendctrl_fd;	\/\/写入控制文件描述符$/;"	m	struct:socket_server	file:
separatetobefnz	.\3rd\lua\lgc.c	/^static void separatetobefnz (lua_State *L, int all) {$/;"	f	file:
seqaux	.\3rd\lpeg\lptree.c	/^static TTree *seqaux (TTree *tree, TTree *sib, int sibsize) {$/;"	f	file:
seri	.\lualib-src\lua-seri.c	/^seri(lua_State *L, struct block *b, int len) {$/;"	f	file:
server	.\test\testudp.lua	/^local function server()$/;"	f
server.auth_handler	.\examples\login\logind.lua	/^function server.auth_handler(token)$/;"	f
server.command_handler	.\examples\login\logind.lua	/^function server.command_handler(command, source, ...)$/;"	f
server.disconnect_handler	.\examples\login\gated.lua	/^function server.disconnect_handler(username)$/;"	f
server.ip	.\lualib\snax\msgserver.lua	/^function server.ip(username)$/;"	f
server.kick_handler	.\examples\login\gated.lua	/^function server.kick_handler(uid, subid)$/;"	f
server.login	.\lualib\snax\msgserver.lua	/^function server.login(username, secret)$/;"	f
server.login_handler	.\examples\login\gated.lua	/^function server.login_handler(uid, secret)$/;"	f
server.login_handler	.\examples\login\logind.lua	/^function server.login_handler(server, uid, secret)$/;"	f
server.logout	.\lualib\snax\msgserver.lua	/^function server.logout(username)$/;"	f
server.logout_handler	.\examples\login\gated.lua	/^function server.logout_handler(uid, subid)$/;"	f
server.register_handler	.\examples\login\gated.lua	/^function server.register_handler(name)$/;"	f
server.request_handler	.\examples\login\gated.lua	/^function server.request_handler(username, msg, sz)$/;"	f
server.start	.\lualib\snax\msgserver.lua	/^function server.start(conf)$/;"	f
server.userid	.\lualib\snax\msgserver.lua	/^function server.userid(username)$/;"	f
server.username	.\lualib\snax\msgserver.lua	/^function server.username(uid, subid, servername)$/;"	f
service_name	.\lualib\snax.lua	/^local function service_name(global, name, ...)$/;"	f
session	.\service-src\service_harbor.c	/^	uint32_t session;$/;"	m	struct:remote_message_header	file:
session	.\skynet-src\skynet_mq.h	/^	int session;	\/\/消息标识$/;"	m	struct:skynet_message
session	.\skynet-src\skynet_timer.c	/^	int session;$/;"	m	struct:timer_event	file:
session_id	.\skynet-src\skynet_server.c	/^	int session_id;					\/\/会话id，用于产生会话$/;"	m	struct:skynet_context	file:
set2	.\3rd\lua\ltablib.c	/^static void set2 (lua_State *L, int i, int j) {$/;"	f	file:
set_env	.\3rd\lua\loadlib.c	/^static void set_env (lua_State *L) {$/;"	f	file:
set_info	.\3rd\lua-md5\md5lib.c	/^static void set_info (lua_State *L) {$/;"	f	file:
set_udp	.\skynet-src\socket_server.c	/^		struct request_setudp set_udp;$/;"	m	union:request_package::__anon25	typeref:struct:request_package::__anon25::request_setudp	file:
set_udp_address	.\skynet-src\socket_server.c	/^set_udp_address(struct socket_server *ss, struct request_setudp *request, struct socket_message *result) {$/;"	f	file:
setarg	.\3rd\lua\lopcodes.h	94;"	d
setarray	.\lualib-src\lua-sharedata.c	/^setarray(struct context *ctx, lua_State *L, int index, int key) {$/;"	f	file:
setarrayvector	.\3rd\lua\ltable.c	/^static void setarrayvector (lua_State *L, Table *t, int size) {$/;"	f	file:
setbits	.\3rd\lua\lgc.h	77;"	d
setboolfield	.\3rd\lua\loslib.c	/^static void setboolfield (lua_State *L, const char *key, int value) {$/;"	f	file:
setbvalue	.\3rd\lua\lobject.h	198;"	d
setchar	.\3rd\lpeg\lptypes.h	108;"	d
setclCvalue	.\3rd\lua\lobject.h	226;"	d
setclLvalue	.\3rd\lua\lobject.h	221;"	d
setdeadvalue	.\3rd\lua\lobject.h	236;"	d
seterrorobj	.\3rd\lua\ldo.c	/^static void seterrorobj (lua_State *L, int errcode, StkId oldtop) {$/;"	f	file:
setfield	.\3rd\lua\loslib.c	/^static void setfield (lua_State *L, const char *key, int value) {$/;"	f	file:
setfvalue	.\3rd\lua\lobject.h	192;"	d
setgcovalue	.\3rd\lua\lobject.h	201;"	d
sethvalue	.\3rd\lua\lobject.h	231;"	d
sethvalue2s	.\3rd\lua\lobject.h	255;"	d
setmetatable(command, { __index 	.\lualib\redis.lua	/^setmetatable(command, { __index = function(t,k)$/;"	f
setnilvalue	.\3rd\lua\lobject.h	190;"	d
setnodevector	.\3rd\lua\ltable.c	/^static void setnodevector (lua_State *L, Table *t, int size) {$/;"	f	file:
setnvalue	.\3rd\lua\lobject.h	187;"	d
setnvalue	.\3rd\lua\lobject.h	348;"	d
setnvalue	.\3rd\lua\lobject.h	349;"	d
setobj	.\3rd\lua\lobject.h	240;"	d
setobj	.\3rd\lua\lobject.h	352;"	d
setobj	.\3rd\lua\lobject.h	353;"	d
setobj2n	.\3rd\lua\lobject.h	262;"	d
setobj2s	.\3rd\lua\lobject.h	253;"	d
setobj2t	.\3rd\lua\lobject.h	260;"	d
setobjs2s	.\3rd\lua\lobject.h	251;"	d
setobjt2t	.\3rd\lua\lobject.h	258;"	d
setoffset	.\3rd\lpeg\lpcode.c	/^static void setoffset (CompileState *compst, int instruction, int offset) {$/;"	f	file:
setopt	.\skynet-src\socket_server.c	/^		struct request_setopt setopt;$/;"	m	union:request_package::__anon25	typeref:struct:request_package::__anon25::request_setopt	file:
setopt_socket	.\skynet-src\socket_server.c	/^setopt_socket(struct socket_server *ss, struct request_setopt *request) {$/;"	f	file:
setpath	.\3rd\lua\loadlib.c	/^static void setpath (lua_State *L, const char *fieldname, const char *envname1,$/;"	f	file:
setpause	.\3rd\lua\lgc.c	/^static void setpause (global_State *g, l_mem estimate) {$/;"	f	file:
setprogdir	.\3rd\lua\loadlib.c	/^static void setprogdir (lua_State *L) {$/;"	f	file:
setprogdir	.\3rd\lua\loadlib.c	105;"	d	file:
setprogdir	.\3rd\lua\loadlib.c	158;"	d	file:
setptvalue2s	.\3rd\lua\lobject.h	256;"	d
setpvalue	.\3rd\lua\lobject.h	195;"	d
setsvalue	.\3rd\lua\lobject.h	205;"	d
setsvalue2n	.\3rd\lua\lobject.h	263;"	d
setsvalue2s	.\3rd\lua\lobject.h	254;"	d
settabsb	.\3rd\lua\ldblib.c	/^static void settabsb (lua_State *L, const char *i, int v) {$/;"	f	file:
settabsi	.\3rd\lua\ldblib.c	/^static void settabsi (lua_State *L, const char *i, int v) {$/;"	f	file:
settabss	.\3rd\lua\ldblib.c	/^static void settabss (lua_State *L, const char *i, const char *v) {$/;"	f	file:
setthvalue	.\3rd\lua\lobject.h	216;"	d
settt_	.\3rd\lua\lobject.h	185;"	d
settt_	.\3rd\lua\lobject.h	345;"	d
settt_	.\3rd\lua\lobject.h	346;"	d
setuvalue	.\3rd\lua\lobject.h	211;"	d
setvalue	.\lualib-src\lua-sharedata.c	/^setvalue(struct context * ctx, lua_State *L, int index, struct node *n) {$/;"	f	file:
sha1	.\test\testsha.lua	/^local function sha1(text)$/;"	f
sharedata.delete	.\lualib\sharedata.lua	/^function sharedata.delete(name)$/;"	f
sharedata.new	.\lualib\sharedata.lua	/^function sharedata.new(name, v)$/;"	f
sharedata.query	.\lualib\sharedata.lua	/^function sharedata.query(name)$/;"	f
sharedata.update	.\lualib\sharedata.lua	/^function sharedata.update(name, v)$/;"	f
short_src	.\3rd\lua\lua.h	/^  char short_src[LUA_IDSIZE]; \/* (S) *\/$/;"	m	struct:lua_Debug
sib1	.\3rd\lpeg\lptree.h	68;"	d
sib2	.\3rd\lpeg\lptree.h	69;"	d
sigign	.\skynet-src\skynet_main.c	/^int sigign() {$/;"	f
simpleexp	.\3rd\lua\lparser.c	/^static void simpleexp (LexState *ls, expdesc *v) {$/;"	f	file:
singlematch	.\3rd\lua\lstrlib.c	/^static int singlematch (MatchState *ms, const char *s, const char *p,$/;"	f	file:
singlestep	.\3rd\lua\lgc.c	/^static lu_mem singlestep (lua_State *L) {$/;"	f	file:
singlevar	.\3rd\lua\lparser.c	/^static void singlevar (LexState *ls, expdesc *var) {$/;"	f	file:
singlevaraux	.\3rd\lua\lparser.c	/^static int singlevaraux (FuncState *fs, TString *n, expdesc *var, int base) {$/;"	f	file:
siz	.\3rd\lpeg\lpcap.h	/^  byte siz;  \/* size of full capture + 1 (0 = not a full capture) *\/$/;"	m	struct:Capture
size	.\3rd\lua\lauxlib.c	/^  size_t size;$/;"	m	struct:LoadS	file:
size	.\3rd\lua\lauxlib.h	/^  size_t size;  \/* buffer size *\/$/;"	m	struct:luaL_Buffer
size	.\3rd\lua\lparser.h	/^    int size;$/;"	m	struct:Dyndata::__anon16
size	.\3rd\lua\lparser.h	/^  int size;  \/* array size *\/$/;"	m	struct:Labellist
size	.\3rd\lua\lstate.h	/^  int size;$/;"	m	struct:stringtable
size	.\lualib-src\lua-bson.c	/^	int size;$/;"	m	struct:bson	file:
size	.\lualib-src\lua-bson.c	/^	int size;$/;"	m	struct:bson_reader	file:
size	.\lualib-src\lua-mongo.c	/^	int size;$/;"	m	struct:buffer	file:
size	.\lualib-src\lua-multicast.c	/^	uint32_t size;$/;"	m	struct:mc_package	file:
size	.\lualib-src\lua-netpack.c	/^	int size;$/;"	m	struct:netpack	file:
size	.\lualib-src\lua-socket.c	/^	int size;$/;"	m	struct:socket_buffer	file:
size	.\service-src\databuffer.h	/^	int size;$/;"	m	struct:databuffer
size	.\service-src\databuffer.h	/^	int size;$/;"	m	struct:message
size	.\service-src\service_harbor.c	/^	int size;$/;"	m	struct:harbor_msg_queue	file:
size	.\service-src\service_harbor.c	/^	size_t size;$/;"	m	struct:harbor_msg	file:
size	.\service-src\service_harbor.c	/^	uint8_t size[4];$/;"	m	struct:slave	file:
size	.\skynet-src\socket_server.c	/^		int size;	\/\/下一次read操作要分配的缓冲区大小?$/;"	m	union:socket::__anon24	file:
size	.\skynet-src\socket_server.h	/^	int (*size)(void *);$/;"	m	struct:socket_object_interface
sizeCclosure	.\3rd\lua\lfunc.h	14;"	d
sizeLclosure	.\3rd\lua\lfunc.h	17;"	d
sizearray	.\3rd\lua\lobject.h	/^  int sizearray;  \/* size of `array' array *\/$/;"	m	struct:Table
sizearray	.\lualib-src\lua-sharedata.c	/^	int sizearray;$/;"	m	struct:table	file:
sizecode	.\3rd\lua\lobject.h	/^  int sizecode;$/;"	m	struct:SharedProto
sizehash	.\lualib-src\lua-sharedata.c	/^	int sizehash;$/;"	m	struct:table	file:
sizei	.\3rd\lpeg\lpcode.c	/^int sizei (const Instruction *i) {$/;"	f
sizek	.\3rd\lua\lobject.h	/^  int sizek;  \/* size of `k' *\/$/;"	m	struct:SharedProto
sizelineinfo	.\3rd\lua\lobject.h	/^  int sizelineinfo;$/;"	m	struct:SharedProto
sizelocvars	.\3rd\lua\lobject.h	/^  int sizelocvars;$/;"	m	struct:SharedProto
sizenode	.\3rd\lua\lobject.h	587;"	d
sizep	.\3rd\lua\lobject.h	/^  int sizep;  \/* size of `p' *\/$/;"	m	struct:SharedProto
sizestring	.\3rd\lua\lstring.h	15;"	d
sizeudata	.\3rd\lua\lstring.h	17;"	d
sizeupvalues	.\3rd\lua\lobject.h	/^  int sizeupvalues;  \/* size of 'upvalues' *\/$/;"	m	struct:SharedProto
skipBOM	.\3rd\lua\lauxlib.c	/^static int skipBOM (LoadF *lf) {$/;"	f	file:
skip_sep	.\3rd\lua\llex.c	/^static int skip_sep (LexState *ls) {$/;"	f	file:
skipcomment	.\3rd\lua\lauxlib.c	/^static int skipcomment (LoadF *lf, int *cp) {$/;"	f	file:
skipnoopstat	.\3rd\lua\lparser.c	/^static void skipnoopstat (LexState *ls) {$/;"	f	file:
skynet.abort	.\lualib\skynet.lua	/^function skynet.abort()$/;"	f
skynet.address	.\lualib\skynet.lua	/^function skynet.address(addr)$/;"	f
skynet.call	.\lualib\skynet.lua	/^function skynet.call(addr, typename, ...)--阻塞发送消息$/;"	f
skynet.dispatch	.\lualib\skynet.lua	/^function skynet.dispatch(typename, func) --注册消息处理函数$/;"	f
skynet.dispatch_unknown_request	.\lualib\skynet.lua	/^function skynet.dispatch_unknown_request(unknown)$/;"	f
skynet.dispatch_unknown_response	.\lualib\skynet.lua	/^function skynet.dispatch_unknown_response(unknown)$/;"	f
skynet.endless	.\lualib\skynet.lua	/^function skynet.endless()$/;"	f
skynet.error	.\lualib\skynet.lua	/^function skynet.error(...)$/;"	f
skynet.exit	.\lualib\skynet.lua	/^function skynet.exit()$/;"	f
skynet.filter	.\lualib\skynet.lua	/^function skynet.filter(f ,start_func)$/;"	f
skynet.fork	.\lualib\skynet.lua	/^function skynet.fork(func,...) --创建一个新的协程$/;"	f
skynet.forward_type	.\lualib\skynet.lua	/^function skynet.forward_type(map, start_func)$/;"	f
skynet.getenv	.\lualib\skynet.lua	/^function skynet.getenv(key)$/;"	f
skynet.harbor	.\lualib\skynet.lua	/^function skynet.harbor(addr)$/;"	f
skynet.info_func	.\lualib\skynet\debug.lua	/^function skynet.info_func(func)$/;"	f
skynet.init	.\lualib\skynet.lua	/^function skynet.init(f, name) --注册初始化函数，这些函数会在调用启动函数前被调用$/;"	f
skynet.kill	.\lualib\skynet.lua	/^function skynet.kill(name)$/;"	f
skynet.launch	.\lualib\skynet.lua	/^function skynet.launch(...) --启动一个服务,通过调用C库$/;"	f
skynet.localname	.\lualib\skynet.lua	/^function skynet.localname(name)$/;"	f
skynet.monitor	.\lualib\skynet.lua	/^function skynet.monitor(service, query)$/;"	f
skynet.mqlen	.\lualib\skynet.lua	/^function skynet.mqlen()$/;"	f
skynet.name	.\lualib\skynet.lua	/^function skynet.name(name, handle)$/;"	f
skynet.newservice	.\lualib\skynet.lua	/^function skynet.newservice(name, ...) --启动一个LUA服务,实际上是给launcher发送消息实现的$/;"	f
skynet.now	.\lualib\skynet.lua	/^function skynet.now()$/;"	f
skynet.queryservice	.\lualib\skynet.lua	/^function skynet.queryservice(global, ...) --查询服务$/;"	f
skynet.queue	.\lualib\skynet\queue.lua	/^function skynet.queue()$/;"	f
skynet.rawcall	.\lualib\skynet.lua	/^function skynet.rawcall(addr, typename, msg, sz)$/;"	f
skynet.redirect 	.\lualib\skynet.lua	/^skynet.redirect = function(dest,source,typename,...)$/;"	f
skynet.register	.\lualib\skynet.lua	/^function skynet.register(name)$/;"	f
skynet.register_protocol	.\lualib\skynet.lua	/^function skynet.register_protocol(class) --注册新的消息类别，传入的class是个table$/;"	f
skynet.response	.\lualib\skynet.lua	/^function skynet.response(pack)$/;"	f
skynet.ret	.\lualib\skynet.lua	/^function skynet.ret(msg, sz)$/;"	f
skynet.retpack	.\lualib\skynet.lua	/^function skynet.retpack(...) --skynet.ret(skynet.pack(...))简写$/;"	f
skynet.self	.\lualib\skynet.lua	/^function skynet.self()$/;"	f
skynet.send	.\lualib\skynet.lua	/^function skynet.send(addr, typename, ...) --非阻塞发送消息$/;"	f
skynet.setenv	.\lualib\skynet.lua	/^function skynet.setenv(key, value)$/;"	f
skynet.sleep	.\lualib\skynet.lua	/^function skynet.sleep(ti) --休眠ti个单位时间$/;"	f
skynet.start	.\lualib\skynet.lua	/^function skynet.start(start_func)  --注册启动函数$/;"	f
skynet.starttime	.\lualib\skynet.lua	/^function skynet.starttime()$/;"	f
skynet.task	.\lualib\skynet.lua	/^function skynet.task(ret)$/;"	f
skynet.term	.\lualib\skynet.lua	/^function skynet.term(service)$/;"	f
skynet.time	.\lualib\skynet.lua	/^function skynet.time()$/;"	f
skynet.timeout	.\lualib\skynet.lua	/^function skynet.timeout(ti, func)--注册定时器 非阻塞API$/;"	f
skynet.uniqueservice	.\lualib\skynet.lua	/^function skynet.uniqueservice(global, ...) --启动一个唯一的LUA服务，如果global等于true,则是全局唯一的$/;"	f
skynet.wait	.\lualib\skynet.lua	/^function skynet.wait() --挂起协程$/;"	f
skynet.wakeup	.\lualib\skynet.lua	/^function skynet.wakeup(co) --唤醒一个协程$/;"	f
skynet.yield	.\lualib\skynet.lua	/^function skynet.yield()$/;"	f
skynet_callback	.\skynet-src\skynet_server.c	/^skynet_callback(struct skynet_context * context, void *ud, skynet_cb cb) {$/;"	f
skynet_calloc	.\skynet-src\malloc_hook.c	/^skynet_calloc(size_t nmemb,size_t size) {$/;"	f
skynet_calloc	.\skynet-src\skynet_malloc.h	8;"	d
skynet_cb	.\skynet-src\skynet.h	/^typedef int (*skynet_cb)(struct skynet_context * context, void *ud, int type, int session, uint32_t source , const void * msg, size_t sz);$/;"	t
skynet_command	.\skynet-src\skynet_server.c	/^skynet_command(struct skynet_context * context, const char * cmd , const char * param) {$/;"	f
skynet_config	.\skynet-src\skynet_imp.h	/^struct skynet_config {$/;"	s
skynet_context	.\skynet-src\skynet_server.c	/^struct skynet_context {$/;"	s	file:
skynet_context_dispatchall	.\skynet-src\skynet_server.c	/^skynet_context_dispatchall(struct skynet_context * ctx) {$/;"	f
skynet_context_endless	.\skynet-src\skynet_server.c	/^skynet_context_endless(uint32_t handle) {$/;"	f
skynet_context_grab	.\skynet-src\skynet_server.c	/^skynet_context_grab(struct skynet_context *ctx) {$/;"	f
skynet_context_handle	.\skynet-src\skynet_server.c	/^skynet_context_handle(struct skynet_context *ctx) {$/;"	f
skynet_context_message_dispatch	.\skynet-src\skynet_server.c	/^skynet_context_message_dispatch(struct skynet_monitor *sm, struct message_queue *q, int weight) {$/;"	f
skynet_context_new	.\skynet-src\skynet_server.c	/^skynet_context_new(const char * name, const char *param) {$/;"	f
skynet_context_newsession	.\skynet-src\skynet_server.c	/^skynet_context_newsession(struct skynet_context *ctx) {$/;"	f
skynet_context_push	.\skynet-src\skynet_server.c	/^skynet_context_push(uint32_t handle, struct skynet_message *message) {$/;"	f
skynet_context_release	.\skynet-src\skynet_server.c	/^skynet_context_release(struct skynet_context *ctx) {$/;"	f
skynet_context_reserve	.\skynet-src\skynet_server.c	/^skynet_context_reserve(struct skynet_context *ctx) {$/;"	f
skynet_context_send	.\skynet-src\skynet_server.c	/^skynet_context_send(struct skynet_context * ctx, void * msg, size_t sz, uint32_t source, int type, int session) {$/;"	f
skynet_context_total	.\skynet-src\skynet_server.c	/^skynet_context_total() {$/;"	f
skynet_current_handle	.\skynet-src\skynet_server.c	/^skynet_current_handle(void) {$/;"	f
skynet_daemon_h	.\skynet-src\skynet_daemon.h	3;"	d
skynet_databuffer_h	.\service-src\databuffer.h	3;"	d
skynet_dl_create	.\skynet-src\skynet_module.h	/^typedef void * (*skynet_dl_create)(void);$/;"	t
skynet_dl_init	.\skynet-src\skynet_module.h	/^typedef int (*skynet_dl_init)(void * inst, struct skynet_context *, const char * parm);$/;"	t
skynet_dl_release	.\skynet-src\skynet_module.h	/^typedef void (*skynet_dl_release)(void * inst);$/;"	t
skynet_env	.\skynet-src\skynet_env.c	/^struct skynet_env {$/;"	s	file:
skynet_env_init	.\skynet-src\skynet_env.c	/^skynet_env_init() {$/;"	f
skynet_error	.\skynet-src\skynet_error.c	/^skynet_error(struct skynet_context * context, const char *msg, ...) {$/;"	f
skynet_free	.\skynet-src\malloc_hook.c	/^skynet_free(void *ptr) {$/;"	f
skynet_free	.\skynet-src\skynet_malloc.h	10;"	d
skynet_getenv	.\skynet-src\skynet_env.c	/^skynet_getenv(const char *key) {$/;"	f
skynet_gettime	.\skynet-src\skynet_timer.c	/^skynet_gettime(void) {$/;"	f
skynet_gettime_fixsec	.\skynet-src\skynet_timer.c	/^skynet_gettime_fixsec(void) {$/;"	f
skynet_globalexit	.\skynet-src\skynet_server.c	/^skynet_globalexit(void) {$/;"	f
skynet_globalinit	.\skynet-src\skynet_server.c	/^skynet_globalinit(void) {$/;"	f
skynet_globalmq_pop	.\skynet-src\skynet_mq.c	/^skynet_globalmq_pop() {$/;"	f
skynet_globalmq_push	.\skynet-src\skynet_mq.c	/^skynet_globalmq_push(struct message_queue * queue) {$/;"	f
skynet_handle_findname	.\skynet-src\skynet_handle.c	/^skynet_handle_findname(const char * name) {$/;"	f
skynet_handle_grab	.\skynet-src\skynet_handle.c	/^skynet_handle_grab(uint32_t handle) {$/;"	f
skynet_handle_init	.\skynet-src\skynet_handle.c	/^skynet_handle_init(int harbor) {$/;"	f
skynet_handle_namehandle	.\skynet-src\skynet_handle.c	/^skynet_handle_namehandle(uint32_t handle, const char *name) {$/;"	f
skynet_handle_register	.\skynet-src\skynet_handle.c	/^skynet_handle_register(struct skynet_context *ctx) {$/;"	f
skynet_handle_retire	.\skynet-src\skynet_handle.c	/^skynet_handle_retire(uint32_t handle) {$/;"	f
skynet_handle_retireall	.\skynet-src\skynet_handle.c	/^skynet_handle_retireall() {$/;"	f
skynet_harbor_exit	.\skynet-src\skynet_harbor.c	/^skynet_harbor_exit() {$/;"	f
skynet_harbor_init	.\skynet-src\skynet_harbor.c	/^skynet_harbor_init(int harbor) {$/;"	f
skynet_harbor_message_isremote	.\skynet-src\skynet_harbor.c	/^skynet_harbor_message_isremote(uint32_t handle) {$/;"	f
skynet_harbor_send	.\skynet-src\skynet_harbor.c	/^skynet_harbor_send(struct remote_message *rmsg, uint32_t source, int session) {$/;"	f
skynet_harbor_start	.\skynet-src\skynet_harbor.c	/^skynet_harbor_start(void *ctx) {$/;"	f
skynet_hashid_h	.\service-src\hashid.h	2;"	d
skynet_initthread	.\skynet-src\skynet_server.c	/^skynet_initthread(int m) {$/;"	f
skynet_isremote	.\skynet-src\skynet_server.c	/^skynet_isremote(struct skynet_context * ctx, uint32_t handle, int * harbor) {$/;"	f
skynet_lalloc	.\skynet-src\malloc_hook.c	/^skynet_lalloc(void *ud, void *ptr, size_t osize, size_t nsize) {$/;"	f
skynet_log_close	.\skynet-src\skynet_log.c	/^skynet_log_close(struct skynet_context * ctx, FILE *f, uint32_t handle) {$/;"	f
skynet_log_h	.\skynet-src\skynet_log.h	3;"	d
skynet_log_open	.\skynet-src\skynet_log.c	/^skynet_log_open(struct skynet_context * ctx, uint32_t handle) {$/;"	f
skynet_log_output	.\skynet-src\skynet_log.c	/^skynet_log_output(FILE *f, uint32_t source, int type, int session, void * buffer, size_t sz) {$/;"	f
skynet_malloc	.\skynet-src\malloc_hook.c	/^skynet_malloc(size_t size) {$/;"	f
skynet_malloc	.\skynet-src\skynet_malloc.h	7;"	d
skynet_malloc_h	.\skynet-src\skynet_malloc.h	3;"	d
skynet_message	.\skynet-src\skynet_mq.h	/^struct skynet_message {$/;"	s
skynet_module	.\skynet-src\skynet_module.h	/^struct skynet_module {$/;"	s
skynet_module_init	.\skynet-src\skynet_module.c	/^skynet_module_init(const char *path) {$/;"	f
skynet_module_insert	.\skynet-src\skynet_module.c	/^skynet_module_insert(struct skynet_module *mod) {$/;"	f
skynet_module_instance_create	.\skynet-src\skynet_module.c	/^skynet_module_instance_create(struct skynet_module *m) {$/;"	f
skynet_module_instance_init	.\skynet-src\skynet_module.c	/^skynet_module_instance_init(struct skynet_module *m, void * inst, struct skynet_context *ctx, const char * parm) {$/;"	f
skynet_module_instance_release	.\skynet-src\skynet_module.c	/^skynet_module_instance_release(struct skynet_module *m, void *inst) {$/;"	f
skynet_module_query	.\skynet-src\skynet_module.c	/^skynet_module_query(const char * name) {$/;"	f
skynet_monitor	.\skynet-src\skynet_monitor.c	/^struct skynet_monitor {$/;"	s	file:
skynet_monitor_check	.\skynet-src\skynet_monitor.c	/^skynet_monitor_check(struct skynet_monitor *sm) {$/;"	f
skynet_monitor_delete	.\skynet-src\skynet_monitor.c	/^skynet_monitor_delete(struct skynet_monitor *sm) {$/;"	f
skynet_monitor_new	.\skynet-src\skynet_monitor.c	/^skynet_monitor_new() {$/;"	f
skynet_monitor_trigger	.\skynet-src\skynet_monitor.c	/^skynet_monitor_trigger(struct skynet_monitor *sm, uint32_t source, uint32_t destination) {$/;"	f
skynet_mq_create	.\skynet-src\skynet_mq.c	/^skynet_mq_create(uint32_t handle) {$/;"	f
skynet_mq_handle	.\skynet-src\skynet_mq.c	/^skynet_mq_handle(struct message_queue *q) {$/;"	f
skynet_mq_init	.\skynet-src\skynet_mq.c	/^skynet_mq_init() {$/;"	f
skynet_mq_length	.\skynet-src\skynet_mq.c	/^skynet_mq_length(struct message_queue *q) {$/;"	f
skynet_mq_mark_release	.\skynet-src\skynet_mq.c	/^skynet_mq_mark_release(struct message_queue *q) {$/;"	f
skynet_mq_overload	.\skynet-src\skynet_mq.c	/^skynet_mq_overload(struct message_queue *q) {$/;"	f
skynet_mq_pop	.\skynet-src\skynet_mq.c	/^skynet_mq_pop(struct message_queue *q, struct skynet_message *message) {$/;"	f
skynet_mq_push	.\skynet-src\skynet_mq.c	/^skynet_mq_push(struct message_queue *q, struct skynet_message *message) {$/;"	f
skynet_mq_release	.\skynet-src\skynet_mq.c	/^skynet_mq_release(struct message_queue *q, message_drop drop_func, void *ud) {$/;"	f
skynet_node	.\skynet-src\skynet_server.c	/^struct skynet_node {$/;"	s	file:
skynet_queryname	.\skynet-src\skynet_server.c	/^skynet_queryname(struct skynet_context * context, const char * name) {$/;"	f
skynet_realloc	.\skynet-src\malloc_hook.c	/^skynet_realloc(void *ptr, size_t size) {$/;"	f
skynet_realloc	.\skynet-src\skynet_malloc.h	9;"	d
skynet_send	.\skynet-src\skynet_server.c	/^skynet_send(struct skynet_context * context, uint32_t source, uint32_t destination , int type, int session, void * data, size_t sz) {$/;"	f
skynet_sendname	.\skynet-src\skynet_server.c	/^skynet_sendname(struct skynet_context * context, uint32_t source, const char * addr , int type, int session, void * data, size_t sz) {$/;"	f
skynet_setenv	.\skynet-src\skynet_env.c	/^skynet_setenv(const char *key, const char *value) {$/;"	f
skynet_socket_bind	.\skynet-src\skynet_socket.c	/^skynet_socket_bind(struct skynet_context *ctx, int fd) {$/;"	f
skynet_socket_close	.\skynet-src\skynet_socket.c	/^skynet_socket_close(struct skynet_context *ctx, int id) {$/;"	f
skynet_socket_connect	.\skynet-src\skynet_socket.c	/^skynet_socket_connect(struct skynet_context *ctx, const char *host, int port) {$/;"	f
skynet_socket_exit	.\skynet-src\skynet_socket.c	/^skynet_socket_exit() {$/;"	f
skynet_socket_free	.\skynet-src\skynet_socket.c	/^skynet_socket_free() {$/;"	f
skynet_socket_h	.\skynet-src\skynet_socket.h	3;"	d
skynet_socket_init	.\skynet-src\skynet_socket.c	/^skynet_socket_init() {$/;"	f
skynet_socket_listen	.\skynet-src\skynet_socket.c	/^skynet_socket_listen(struct skynet_context *ctx, const char *host, int port, int backlog) {$/;"	f
skynet_socket_message	.\skynet-src\skynet_socket.h	/^struct skynet_socket_message {$/;"	s
skynet_socket_nodelay	.\skynet-src\skynet_socket.c	/^skynet_socket_nodelay(struct skynet_context *ctx, int id) {$/;"	f
skynet_socket_poll	.\skynet-src\skynet_socket.c	/^skynet_socket_poll() {$/;"	f
skynet_socket_send	.\skynet-src\skynet_socket.c	/^skynet_socket_send(struct skynet_context *ctx, int id, void *buffer, int sz) {$/;"	f
skynet_socket_send_lowpriority	.\skynet-src\skynet_socket.c	/^skynet_socket_send_lowpriority(struct skynet_context *ctx, int id, void *buffer, int sz) {$/;"	f
skynet_socket_server_h	.\skynet-src\socket_server.h	3;"	d
skynet_socket_start	.\skynet-src\skynet_socket.c	/^skynet_socket_start(struct skynet_context *ctx, int id) {$/;"	f
skynet_socket_udp	.\skynet-src\skynet_socket.c	/^skynet_socket_udp(struct skynet_context *ctx, const char * addr, int port) {$/;"	f
skynet_socket_udp_address	.\skynet-src\skynet_socket.c	/^skynet_socket_udp_address(struct skynet_socket_message *msg, int *addrsz) {$/;"	f
skynet_socket_udp_connect	.\skynet-src\skynet_socket.c	/^skynet_socket_udp_connect(struct skynet_context *ctx, int id, const char * addr, int port) {$/;"	f
skynet_socket_udp_send	.\skynet-src\skynet_socket.c	/^skynet_socket_udp_send(struct skynet_context *ctx, int id, const char * address, const void *buffer, int sz) {$/;"	f
skynet_start	.\skynet-src\skynet_start.c	/^skynet_start(struct skynet_config * config) {$/;"	f
skynet_strdup	.\skynet-src\malloc_hook.c	/^skynet_strdup(const char *str) {\/\/将串拷贝到新建的位置处$/;"	f
skynet_timeout	.\skynet-src\skynet_timer.c	/^skynet_timeout(uint32_t handle, int time, int session) {$/;"	f
skynet_timer_init	.\skynet-src\skynet_timer.c	/^skynet_timer_init(void) {$/;"	f
skynet_updatetime	.\skynet-src\skynet_timer.c	/^skynet_updatetime(void) {$/;"	f
slave	.\service-src\service_harbor.c	/^	uint32_t slave;$/;"	m	struct:harbor	file:
slave	.\service-src\service_harbor.c	/^struct slave {$/;"	s	file:
sleep	.\skynet-src\skynet_start.c	/^	int sleep;\/\/睡眠线程数$/;"	m	struct:monitor	file:
slot	.\skynet-src\skynet_handle.c	/^	struct skynet_context ** slot;\/\/槽$/;"	m	struct:handle_storage	typeref:struct:handle_storage::skynet_context	file:
slot	.\skynet-src\socket_server.c	/^	struct socket slot[MAX_SOCKET];\/\/槽，用于存储套接字	MAX_SOCKET:65536$/;"	m	struct:socket_server	typeref:struct:socket_server::socket	file:
slot_size	.\skynet-src\skynet_handle.c	/^	int slot_size;\/\/槽大小$/;"	m	struct:handle_storage	file:
snax.bind	.\lualib\snax.lua	/^function snax.bind(handle, type)$/;"	f
snax.exit	.\lualib\snax.lua	/^function snax.exit(...)$/;"	f
snax.globalservice	.\lualib\snax.lua	/^function snax.globalservice(name, ...)$/;"	f
snax.hotfix	.\lualib\snax.lua	/^function snax.hotfix(obj, source, ...)$/;"	f
snax.interface	.\lualib\snax.lua	/^function snax.interface(name)$/;"	f
snax.kill	.\lualib\snax.lua	/^function snax.kill(obj, ...)$/;"	f
snax.newservice	.\lualib\snax.lua	/^function snax.newservice(name, ...)$/;"	f
snax.queryglobal	.\lualib\snax.lua	/^function snax.queryglobal(name)$/;"	f
snax.queryservice	.\lualib\snax.lua	/^function snax.queryservice(name)$/;"	f
snax.rawnewservice	.\lualib\snax.lua	/^function snax.rawnewservice(name, ...)$/;"	f
snax.self	.\lualib\snax.lua	/^function snax.self()$/;"	f
snax.uniqueservice	.\lualib\snax.lua	/^function snax.uniqueservice(name, ...)$/;"	f
snlua	.\lualib-src\lua-skynet.c	/^struct snlua {$/;"	s	file:
snlua	.\service-src\service_snlua.c	/^struct snlua {$/;"	s	file:
snlua_create	.\service-src\service_snlua.c	/^snlua_create(void) {$/;"	f
snlua_init	.\service-src\service_snlua.c	/^snlua_init(struct snlua *l, struct skynet_context *ctx, const char * args) {$/;"	f
snlua_release	.\service-src\service_snlua.c	/^snlua_release(struct snlua *l) {$/;"	f
sock	.\lualib-src\lua-mongo.c	/^	int sock;$/;"	m	struct:connection	file:
sockaddr_all	.\skynet-src\socket_server.c	/^union sockaddr_all {$/;"	u	file:
socket	.\skynet-src\socket_server.c	/^struct socket {$/;"	s	file:
socket.abandon	.\lualib\socket.lua	/^function socket.abandon(id)$/;"	f
socket.bind	.\lualib\socket.lua	/^function socket.bind(os_fd)$/;"	f
socket.block	.\lualib\socket.lua	/^function socket.block(id)$/;"	f
socket.close	.\lualib\socket.lua	/^function socket.close(id)$/;"	f
socket.invalid	.\lualib\socket.lua	/^function socket.invalid(id)$/;"	f
socket.limit	.\lualib\socket.lua	/^function socket.limit(id, limit)$/;"	f
socket.listen	.\lualib\socket.lua	/^function socket.listen(host, port, backlog)$/;"	f
socket.lock	.\lualib\socket.lua	/^function socket.lock(id)$/;"	f
socket.open	.\lualib\socket.lua	/^function socket.open(addr, port)--建立一个 TCP 连接$/;"	f
socket.read	.\lualib\socket.lua	/^function socket.read(id, sz)$/;"	f
socket.readall	.\lualib\socket.lua	/^function socket.readall(id)$/;"	f
socket.readline	.\lualib\socket.lua	/^function socket.readline(id, sep)$/;"	f
socket.shutdown	.\lualib\socket.lua	/^function socket.shutdown(id)$/;"	f
socket.start	.\lualib\socket.lua	/^function socket.start(id, func)$/;"	f
socket.stdin	.\lualib\socket.lua	/^function socket.stdin()$/;"	f
socket.udp	.\lualib\socket.lua	/^function socket.udp(callback, host, port)$/;"	f
socket.udp_connect	.\lualib\socket.lua	/^function socket.udp_connect(id, addr, port, callback)$/;"	f
socket.unlock	.\lualib\socket.lua	/^function socket.unlock(id)$/;"	f
socket_buffer	.\lualib-src\lua-clientsocket.c	/^struct socket_buffer {$/;"	s	file:
socket_buffer	.\lualib-src\lua-socket.c	/^struct socket_buffer {$/;"	s	file:
socket_channel.channel	.\lualib\socketchannel.lua	/^function socket_channel.channel(desc)$/;"	f
socket_keepalive	.\skynet-src\socket_server.c	/^socket_keepalive(int fd) {$/;"	f	file:
socket_message	.\skynet-src\socket_server.h	/^struct socket_message {$/;"	s
socket_message[1] 	.\lualib\socket.lua	/^socket_message[1] = function(id, size, data)$/;"	f
socket_message[2] 	.\lualib\socket.lua	/^socket_message[2] = function(id, _ , addr)$/;"	f
socket_message[3] 	.\lualib\socket.lua	/^socket_message[3] = function(id)$/;"	f
socket_message[4] 	.\lualib\socket.lua	/^socket_message[4] = function(id, newid, addr)$/;"	f
socket_message[5] 	.\lualib\socket.lua	/^socket_message[5] = function(id)$/;"	f
socket_message[6] 	.\lualib\socket.lua	/^socket_message[6] = function(id, size, data, address)$/;"	f
socket_object_interface	.\skynet-src\socket_server.h	/^struct socket_object_interface {$/;"	s
socket_poll_h	.\skynet-src\socket_poll.h	3;"	d
socket_server	.\skynet-src\socket_server.c	/^struct socket_server {$/;"	s	file:
socket_server_bind	.\skynet-src\socket_server.c	/^socket_server_bind(struct socket_server *ss, uintptr_t opaque, int fd) {$/;"	f
socket_server_close	.\skynet-src\socket_server.c	/^socket_server_close(struct socket_server *ss, uintptr_t opaque, int id) {$/;"	f
socket_server_connect	.\skynet-src\socket_server.c	/^socket_server_connect(struct socket_server *ss, uintptr_t opaque, const char * addr, int port) {\/\/opaque实际上是上下文的句柄(handler,也叫source)$/;"	f
socket_server_create	.\skynet-src\socket_server.c	/^socket_server_create() {$/;"	f
socket_server_exit	.\skynet-src\socket_server.c	/^socket_server_exit(struct socket_server *ss) {$/;"	f
socket_server_listen	.\skynet-src\socket_server.c	/^socket_server_listen(struct socket_server *ss, uintptr_t opaque, const char * addr, int port, int backlog) {$/;"	f
socket_server_nodelay	.\skynet-src\socket_server.c	/^socket_server_nodelay(struct socket_server *ss, int id) {$/;"	f
socket_server_poll	.\skynet-src\socket_server.c	/^socket_server_poll(struct socket_server *ss, struct socket_message * result, int * more) {$/;"	f
socket_server_release	.\skynet-src\socket_server.c	/^socket_server_release(struct socket_server *ss) {$/;"	f
socket_server_send	.\skynet-src\socket_server.c	/^socket_server_send(struct socket_server *ss, int id, const void * buffer, int sz) {$/;"	f
socket_server_send_lowpriority	.\skynet-src\socket_server.c	/^socket_server_send_lowpriority(struct socket_server *ss, int id, const void * buffer, int sz) {$/;"	f
socket_server_start	.\skynet-src\socket_server.c	/^socket_server_start(struct socket_server *ss, uintptr_t opaque, int id) {$/;"	f
socket_server_udp	.\skynet-src\socket_server.c	/^socket_server_udp(struct socket_server *ss, uintptr_t opaque, const char * addr, int port) {$/;"	f
socket_server_udp_address	.\skynet-src\socket_server.c	/^socket_server_udp_address(struct socket_server *ss, struct socket_message *msg, int *addrsz) {$/;"	f
socket_server_udp_connect	.\skynet-src\socket_server.c	/^socket_server_udp_connect(struct socket_server *ss, int id, const char * addr, int port) {$/;"	f
socket_server_udp_send	.\skynet-src\socket_server.c	/^socket_server_udp_send(struct socket_server *ss, int id, const struct socket_udp_address *addr, const void *buffer, int sz) {$/;"	f
socket_server_userobject	.\skynet-src\socket_server.c	/^socket_server_userobject(struct socket_server *ss, struct socket_object_interface *soi) {$/;"	f
sockethelper.close	.\lualib\http\sockethelper.lua	/^function sockethelper.close(fd)$/;"	f
sockethelper.connect	.\lualib\http\sockethelper.lua	/^function sockethelper.connect(host, port)$/;"	f
sockethelper.readfunc	.\lualib\http\sockethelper.lua	/^function sockethelper.readfunc(fd)$/;"	f
sockethelper.writefunc	.\lualib\http\sockethelper.lua	/^function sockethelper.writefunc(fd)$/;"	f
soi	.\skynet-src\socket_server.c	/^	struct socket_object_interface soi;		\/\/套接字对象接口$/;"	m	struct:socket_server	typeref:struct:socket_server::socket_object_interface	file:
sort	.\3rd\lua\ltablib.c	/^static int sort (lua_State *L) {$/;"	f	file:
sort_comp	.\3rd\lua\ltablib.c	/^static int sort_comp (lua_State *L, int a, int b) {$/;"	f	file:
source	.\3rd\lua\llex.h	/^  TString *source;  \/* current source name *\/$/;"	m	struct:LexState
source	.\3rd\lua\lobject.h	/^  TString  *source;  \/* used for debug information *\/$/;"	m	struct:SharedProto
source	.\3rd\lua\lua.h	/^  const char *source;	\/* (S) *\/$/;"	m	struct:lua_Debug
source	.\service-src\service_harbor.c	/^	uint32_t source;$/;"	m	struct:remote_message_header	file:
source	.\skynet-src\skynet_monitor.c	/^	uint32_t source;	\/\/源$/;"	m	struct:skynet_monitor	file:
source	.\skynet-src\skynet_mq.h	/^	uint32_t source;\/\/消息源$/;"	m	struct:skynet_message
sp	.\3rd\lua\lobject.h	/^  struct SharedProto *sp;$/;"	m	struct:Proto	typeref:struct:Proto::SharedProto
sp_add	.\skynet-src\socket_epoll.h	/^sp_add(int efd, int sock, void *ud) {$/;"	f
sp_add	.\skynet-src\socket_kqueue.h	/^sp_add(int kfd, int sock, void *ud) {$/;"	f
sp_create	.\skynet-src\socket_epoll.h	/^sp_create() {\/\/创建socket poll$/;"	f
sp_create	.\skynet-src\socket_kqueue.h	/^sp_create() {$/;"	f
sp_del	.\skynet-src\socket_epoll.h	/^sp_del(int efd, int sock) {$/;"	f
sp_del	.\skynet-src\socket_kqueue.h	/^sp_del(int kfd, int sock) {$/;"	f
sp_invalid	.\skynet-src\socket_epoll.h	/^sp_invalid(int efd) {$/;"	f
sp_invalid	.\skynet-src\socket_kqueue.h	/^sp_invalid(int kfd) {$/;"	f
sp_nonblocking	.\skynet-src\socket_epoll.h	/^sp_nonblocking(int fd) {$/;"	f
sp_nonblocking	.\skynet-src\socket_kqueue.h	/^sp_nonblocking(int fd) {$/;"	f
sp_release	.\skynet-src\socket_epoll.h	/^sp_release(int efd) {$/;"	f
sp_release	.\skynet-src\socket_kqueue.h	/^sp_release(int kfd) {$/;"	f
sp_wait	.\skynet-src\socket_epoll.h	/^sp_wait(int efd, struct event *e, int max) {$/;"	f
sp_wait	.\skynet-src\socket_kqueue.h	/^sp_wait(int kfd, struct event *e, int max) {$/;"	f
sp_write	.\skynet-src\socket_epoll.h	/^sp_write(int efd, int sock, void *ud, bool enable) {$/;"	f
sp_write	.\skynet-src\socket_kqueue.h	/^sp_write(int kfd, int sock, void *ud, bool enable) {$/;"	f
sparser.dump	.\lualib\sprotoparser.lua	/^function sparser.dump(str)$/;"	f
sparser.parse	.\lualib\sprotoparser.lua	/^function sparser.parse(text, name)$/;"	f
split	.\3rd\lpeg\lpeg.html	/^function split (s, sep)$/;"	f
split_cmdline	.\service\debug_console.lua	/^local function split_cmdline(cmdline)$/;"	f
sproto	.\lualib-src\sproto\sproto.c	/^struct sproto {$/;"	s	file:
sproto.new	.\lualib\sproto.lua	/^function sproto.new(pbin)$/;"	f
sproto.parse	.\lualib\sproto.lua	/^function sproto.parse(ptext)$/;"	f
sproto:decode	.\lualib\sproto.lua	/^function sproto:decode(typename, bin)$/;"	f
sproto:encode	.\lualib\sproto.lua	/^function sproto:encode(typename, tbl)$/;"	f
sproto:host	.\lualib\sproto.lua	/^function sproto:host( packagename )$/;"	f
sproto:pdecode	.\lualib\sproto.lua	/^function sproto:pdecode(typename, bin)$/;"	f
sproto:pencode	.\lualib\sproto.lua	/^function sproto:pencode(typename, tbl)$/;"	f
sproto_callback	.\lualib-src\sproto\sproto.h	/^typedef int (*sproto_callback)(void *ud, const char *tagname, int type, int index, struct sproto_type *, void *value, int length);$/;"	t
sproto_create	.\lualib-src\sproto\sproto.c	/^sproto_create(const void * proto, size_t sz) {$/;"	f
sproto_decode	.\lualib-src\sproto\sproto.c	/^sproto_decode(struct sproto_type *st, const void * data, int size, sproto_callback cb, void *ud) {$/;"	f
sproto_dump	.\lualib-src\sproto\sproto.c	/^sproto_dump(struct sproto *s) {$/;"	f
sproto_encode	.\lualib-src\sproto\sproto.c	/^sproto_encode(struct sproto_type *st, void * buffer, int size, sproto_callback cb, void *ud) {$/;"	f
sproto_h	.\lualib-src\sproto\sproto.h	2;"	d
sproto_mt:__gc	.\lualib\sproto.lua	/^function sproto_mt:__gc()$/;"	f
sproto_name	.\lualib-src\sproto\sproto.c	/^sproto_name(struct sproto_type * st) {$/;"	f
sproto_pack	.\lualib-src\sproto\sproto.c	/^sproto_pack(const void * srcv, int srcsz, void * bufferv, int bufsz) {$/;"	f
sproto_protoname	.\lualib-src\sproto\sproto.c	/^sproto_protoname(struct sproto *sp, int proto) {$/;"	f
sproto_protoquery	.\lualib-src\sproto\sproto.c	/^sproto_protoquery(struct sproto *sp, int proto, int what) {$/;"	f
sproto_prototag	.\lualib-src\sproto\sproto.c	/^sproto_prototag(struct sproto *sp, const char * name) {$/;"	f
sproto_release	.\lualib-src\sproto\sproto.c	/^sproto_release(struct sproto * s) {$/;"	f
sproto_type	.\lualib-src\sproto\sproto.c	/^sproto_type(struct sproto *sp, const char * type_name) {$/;"	f
sproto_type	.\lualib-src\sproto\sproto.c	/^struct sproto_type {$/;"	s	file:
sproto_unpack	.\lualib-src\sproto\sproto.c	/^sproto_unpack(const void * srcv, int srcsz, void * bufferv, int bufsz) {$/;"	f
src_end	.\3rd\lua\lstrlib.c	/^  const char *src_end;  \/* end ('\\0') of source string *\/$/;"	m	struct:MatchState	file:
src_init	.\3rd\lua\lstrlib.c	/^  const char *src_init;  \/* init of source string *\/$/;"	m	struct:MatchState	file:
st	.\lualib-src\sproto\lsproto.c	/^	struct sproto_type *st;$/;"	m	struct:encode_ud	typeref:struct:encode_ud::sproto_type	file:
st	.\lualib-src\sproto\sproto.c	/^	struct sproto_type * st;$/;"	m	struct:field	typeref:struct:field::sproto_type	file:
stack	.\3rd\lua\lstate.h	/^  StkId stack;  \/* stack base *\/$/;"	m	struct:lua_State
stack_init	.\3rd\lua\lstate.c	/^static void stack_init (lua_State *L1, lua_State *L) {$/;"	f	file:
stack_last	.\3rd\lua\lstate.h	/^  StkId stack_last;  \/* last free slot in the stack *\/$/;"	m	struct:lua_State
stackidx	.\3rd\lpeg\lptypes.h	80;"	d
stackinuse	.\3rd\lua\ldo.c	/^static int stackinuse (lua_State *L) {$/;"	f	file:
stacksize	.\3rd\lua\lstate.h	/^  int stacksize;$/;"	m	struct:lua_State
start	.\skynet-src\socket_server.c	/^		struct request_start start;$/;"	m	union:request_package::__anon25	typeref:struct:request_package::__anon25::request_start	file:
start_capture	.\3rd\lua\lstrlib.c	/^static const char *start_capture (MatchState *ms, const char *s,$/;"	f	file:
start_listen	.\service-src\service_gate.c	/^start_listen(struct gate *g, char * listen_addr) {$/;"	f	file:
start_socket	.\skynet-src\socket_server.c	/^start_socket(struct socket_server *ss, struct request_start *request, struct socket_message *result) {$/;"	f	file:
starting_from	.\lualib-src\lua-mongo.c	/^	int starting_from;$/;"	m	struct:response	file:
startpc	.\3rd\lua\lobject.h	/^  int startpc;  \/* first point where variable is active *\/$/;"	m	struct:LocVar
starttime	.\skynet-src\skynet_timer.c	/^	uint32_t starttime;$/;"	m	struct:timer	file:
state	.\lualib-src\lsha1.c	/^	uint32_t state[5];$/;"	m	struct:__anon23	file:
state	.\lualib-src\lua-sharedata.c	/^struct state {$/;"	s	file:
statement	.\3rd\lua\lparser.c	/^static void statement (LexState *ls) {$/;"	f	file:
statlist	.\3rd\lua\lparser.c	/^static void statlist (LexState *ls) {$/;"	f	file:
status	.\3rd\lua\ldo.c	/^  volatile int status;  \/* error code *\/$/;"	m	struct:lua_longjmp	file:
status	.\3rd\lua\ldump.c	/^ int status;$/;"	m	struct:__anon4	file:
status	.\3rd\lua\lstate.h	/^      lu_byte status;$/;"	m	struct:CallInfo::__anon17::__anon19
status	.\3rd\lua\lstate.h	/^  lu_byte status;$/;"	m	struct:lua_State
status	.\service-src\service_harbor.c	/^	int status;$/;"	m	struct:slave	file:
stm_copy	.\lualib-src\lua-stm.c	/^stm_copy(struct stm_object *obj) {$/;"	f	file:
stm_copy	.\lualib-src\lua-stm.c	/^struct stm_copy {$/;"	s	file:
stm_grab	.\lualib-src\lua-stm.c	/^stm_grab(struct stm_object *obj) {$/;"	f	file:
stm_new	.\lualib-src\lua-stm.c	/^stm_new(void * msg, int32_t sz) {$/;"	f	file:
stm_newcopy	.\lualib-src\lua-stm.c	/^stm_newcopy(void * msg, int32_t sz) {$/;"	f	file:
stm_object	.\lualib-src\lua-stm.c	/^struct stm_object {$/;"	s	file:
stm_release	.\lualib-src\lua-stm.c	/^stm_release(struct stm_object *obj) {$/;"	f	file:
stm_releasecopy	.\lualib-src\lua-stm.c	/^stm_releasecopy(struct stm_copy *copy) {$/;"	f	file:
stm_releasereader	.\lualib-src\lua-stm.c	/^stm_releasereader(struct stm_object *obj) {$/;"	f	file:
stm_update	.\lualib-src\lua-stm.c	/^stm_update(struct stm_object *obj, void *msg, int32_t sz) {$/;"	f	file:
str_byte	.\3rd\lua\lstrlib.c	/^static int str_byte (lua_State *L) {$/;"	f	file:
str_char	.\3rd\lua\lstrlib.c	/^static int str_char (lua_State *L) {$/;"	f	file:
str_checkname	.\3rd\lua\lparser.c	/^static TString *str_checkname (LexState *ls) {$/;"	f	file:
str_dump	.\3rd\lua\lstrlib.c	/^static int str_dump (lua_State *L) {$/;"	f	file:
str_find	.\3rd\lua\lstrlib.c	/^static int str_find (lua_State *L) {$/;"	f	file:
str_find_aux	.\3rd\lua\lstrlib.c	/^static int str_find_aux (lua_State *L, int find) {$/;"	f	file:
str_format	.\3rd\lua\lstrlib.c	/^static int str_format (lua_State *L) {$/;"	f	file:
str_gsub	.\3rd\lua\lstrlib.c	/^static int str_gsub (lua_State *L) {$/;"	f	file:
str_len	.\3rd\lua\lstrlib.c	/^static int str_len (lua_State *L) {$/;"	f	file:
str_lower	.\3rd\lua\lstrlib.c	/^static int str_lower (lua_State *L) {$/;"	f	file:
str_match	.\3rd\lua\lstrlib.c	/^static int str_match (lua_State *L) {$/;"	f	file:
str_rep	.\3rd\lua\lstrlib.c	/^static int str_rep (lua_State *L) {$/;"	f	file:
str_reverse	.\3rd\lua\lstrlib.c	/^static int str_reverse (lua_State *L) {$/;"	f	file:
str_sub	.\3rd\lua\lstrlib.c	/^static int str_sub (lua_State *L) {$/;"	f	file:
str_upper	.\3rd\lua\lstrlib.c	/^static int str_upper (lua_State *L) {$/;"	f	file:
string	.\lualib-src\lua-sharedata.c	/^	int string;$/;"	m	union:value	file:
string_index	.\lualib-src\lua-sharedata.c	/^	int string_index;$/;"	m	struct:context	file:
string_to_handle	.\lualib\skynet.lua	/^local function string_to_handle(str) --字符串转换为数字句柄$/;"	f
stringcap	.\3rd\lpeg\lpcap.c	/^static void stringcap (luaL_Buffer *b, CapState *cs) {$/;"	f	file:
stringindex	.\lualib-src\lua-sharedata.c	/^stringindex(struct context *ctx, const char * str, size_t sz) {$/;"	f	file:
stringtable	.\3rd\lua\lstate.h	/^typedef struct stringtable {$/;"	s
stringtable	.\3rd\lua\lstate.h	/^} stringtable;$/;"	t	typeref:struct:stringtable
strip	.\3rd\lua\ldump.c	/^ int strip;$/;"	m	struct:__anon4	file:
stripping	.\3rd\lua\luac.c	/^static int stripping=0;			\/* strip debug information? *\/$/;"	v	file:
strlib	.\3rd\lua\lstrlib.c	/^static const luaL_Reg strlib[] = {$/;"	v	file:
strt	.\3rd\lua\lstate.h	/^  stringtable strt;  \/* hash table for strings *\/$/;"	m	struct:global_State
struct_field	.\lualib-src\sproto\sproto.c	/^struct_field(const uint8_t * stream, size_t sz) {$/;"	f	file:
subexpr	.\3rd\lua\lparser.c	/^static BinOpr subexpr (LexState *ls, expdesc *v, int limit) {$/;"	f	file:
substcap	.\3rd\lpeg\lpcap.c	/^static void substcap (luaL_Buffer *b, CapState *cs) {$/;"	f	file:
suffixedexp	.\3rd\lua\lparser.c	/^static void suffixedexp (LexState *ls, expdesc *v) {$/;"	f	file:
suspend	.\lualib\skynet.lua	/^function suspend(co, result, command, param, size) --当协程执行完当前请求或者调用了阻塞API(会yield自己)时$/;"	f
suspend	.\lualib\socket.lua	/^local function suspend(s)$/;"	f
svalue	.\3rd\lua\lobject.h	425;"	d
sweepfin	.\3rd\lua\lstate.h	/^  GCObject **sweepfin;  \/* current position of sweep in list 'finobj' *\/$/;"	m	struct:global_State
sweepgc	.\3rd\lua\lstate.h	/^  GCObject **sweepgc;  \/* current position of sweep in list 'allgc' *\/$/;"	m	struct:global_State
sweeplist	.\3rd\lua\lgc.c	/^static GCObject **sweeplist (lua_State *L, GCObject **p, lu_mem count) {$/;"	f	file:
sweepphases	.\3rd\lua\lgc.c	932;"	d	file:
sweepstrgc	.\3rd\lua\lstate.h	/^  int sweepstrgc;  \/* position of sweep in `strt' *\/$/;"	m	struct:global_State
sweepthread	.\3rd\lua\lgc.c	/^static void sweepthread (lua_State *L, lua_State *L1) {$/;"	f	file:
sweeptolive	.\3rd\lua\lgc.c	/^static GCObject **sweeptolive (lua_State *L, GCObject **p, int *n) {$/;"	f	file:
sweepwholelist	.\3rd\lua\lgc.c	698;"	d	file:
syslib	.\3rd\lua\loslib.c	/^static const luaL_Reg syslib[] = {$/;"	v	file:
systime	.\skynet-src\skynet_timer.c	/^systime(uint32_t *sec, uint32_t *cs) {$/;"	f	file:
sz	.\lualib-src\lua-clientsocket.c	/^	int sz;$/;"	m	struct:socket_buffer	file:
sz	.\lualib-src\lua-socket.c	/^	int sz;$/;"	m	struct:buffer_node	file:
sz	.\lualib-src\lua-stm.c	/^	uint32_t sz;$/;"	m	struct:stm_copy	file:
sz	.\skynet-src\skynet_harbor.h	/^	size_t sz;$/;"	m	struct:remote_message
sz	.\skynet-src\skynet_mq.h	/^	size_t sz;		\/\/大小$/;"	m	struct:skynet_message
sz	.\skynet-src\socket_server.c	/^	int sz;$/;"	m	struct:request_send	file:
sz	.\skynet-src\socket_server.c	/^	int sz;$/;"	m	struct:send_object	file:
sz	.\skynet-src\socket_server.c	/^	int sz;$/;"	m	struct:write_buffer	file:
t	.\3rd\lua\llex.h	/^  Token t;  \/* current token *\/$/;"	m	struct:LexState
t	.\3rd\lua\lparser.c	/^  expdesc *t;  \/* table descriptor *\/$/;"	m	struct:ConsControl	file:
t	.\3rd\lua\lparser.h	/^      lu_byte t;  \/* table (register or upvalue) *\/$/;"	m	struct:expdesc::__anon14::__anon15
t	.\3rd\lua\lparser.h	/^  int t;  \/* patch list of `exit when true' *\/$/;"	m	struct:expdesc
t	.\skynet-src\skynet_timer.c	/^	struct link_list t[4][TIME_LEVEL];$/;"	m	struct:timer	typeref:struct:timer::link_list	file:
t 	.\3rd\lpeg\test.lua	/^t = m.match(m.Ct((m.C(1) \/ function (x,y) return y, x end * m.Cc(1))^0), "abc")$/;"	f
t 	.\3rd\lpeg\test.lua	/^t = {m.match((m.C(1) \/ function (x) return x, x.."x" end)^0, "abc")}$/;"	f
tab_funcs	.\3rd\lua\ltablib.c	/^static const luaL_Reg tab_funcs[] = {$/;"	v	file:
table	.\lualib-src\lua-sharedata.c	/^struct table {$/;"	s	file:
tablecap	.\3rd\lpeg\lpcap.c	/^static int tablecap (CapState *cs) {$/;"	f	file:
tag	.\3rd\lpeg\lptree.h	/^  byte tag;$/;"	m	struct:TTree
tag	.\lualib-src\sproto\sproto.c	/^	int tag;$/;"	m	struct:field	file:
tag	.\lualib-src\sproto\sproto.c	/^	int tag;$/;"	m	struct:protocol	file:
tag2tt	.\3rd\lua\lobject.h	340;"	d
tag_error	.\3rd\lua\lauxlib.c	/^static void tag_error (lua_State *L, int narg, int tag) {$/;"	f	file:
tagnames	.\3rd\lpeg\lpprint.c	/^static const char *tagnames[] = {$/;"	v	file:
tail	.\lualib-src\lua-clientsocket.c	/^	int tail;$/;"	m	struct:queue	file:
tail	.\lualib-src\lua-netpack.c	/^	int tail;$/;"	m	struct:queue	file:
tail	.\lualib-src\lua-socket.c	/^	struct buffer_node *tail;$/;"	m	struct:socket_buffer	typeref:struct:socket_buffer::buffer_node	file:
tail	.\service-src\databuffer.h	/^	struct message * tail;$/;"	m	struct:databuffer	typeref:struct:databuffer::message
tail	.\service-src\service_harbor.c	/^	int tail;$/;"	m	struct:harbor_msg_queue	file:
tail	.\skynet-src\skynet_mq.c	/^	int tail;		\/\/队尾索引$/;"	m	struct:message_queue	file:
tail	.\skynet-src\skynet_mq.c	/^	struct message_queue *tail;	\/\/消息队列尾指针$/;"	m	struct:global_queue	typeref:struct:global_queue::message_queue	file:
tail	.\skynet-src\skynet_timer.c	/^	struct timer_node *tail;$/;"	m	struct:link_list	typeref:struct:link_list::timer_node	file:
tail	.\skynet-src\socket_server.c	/^	struct write_buffer * tail;\/\/尾$/;"	m	struct:wb_list	typeref:struct:wb_list::write_buffer	file:
target	.\3rd\lpeg\lpcode.c	494;"	d	file:
tbl	.\lualib-src\lua-sharedata.c	/^	struct table * tbl;$/;"	m	struct:context	typeref:struct:context::table	file:
tbl	.\lualib-src\lua-sharedata.c	/^	struct table * tbl;$/;"	m	union:value	typeref:struct:value::table	file:
tbl_index	.\lualib-src\sproto\lsproto.c	/^	int tbl_index;$/;"	m	struct:encode_ud	file:
tconcat	.\3rd\lua\ltablib.c	/^static int tconcat (lua_State *L) {$/;"	f	file:
term	.\test\testterm.lua	/^local function term()$/;"	f
test	.\test\testtimer.lua	/^local function test()$/;"	f
test2	.\test\testmysql.lua	/^local function test2( db)$/;"	f
test3	.\test\testmysql.lua	/^local function test3( db)$/;"	f
testAMode	.\3rd\lua\lopcodes.h	277;"	d
testTMode	.\3rd\lua\lopcodes.h	278;"	d
test_eof	.\3rd\lua\liolib.c	/^static int test_eof (lua_State *L, FILE *f) {$/;"	f	file:
test_expire_index	.\test\testmongodb.lua	/^function test_expire_index()$/;"	f
test_find_and_remove	.\test\testmongodb.lua	/^function test_find_and_remove()$/;"	f
test_insert_with_index	.\test\testmongodb.lua	/^function test_insert_with_index()$/;"	f
test_insert_without_index	.\test\testmongodb.lua	/^function test_insert_without_index()$/;"	f
test_result	.\lualib\snax.lua	/^local function test_result(ok, ...)$/;"	f
test_then_block	.\3rd\lua\lparser.c	/^static void test_then_block (LexState *ls, int *escapelist) {$/;"	f	file:
testbit	.\3rd\lua\lgc.h	83;"	d
testbits	.\3rd\lua\lgc.h	78;"	d
testchar	.\3rd\lpeg\lptypes.h	143;"	d
testnext	.\3rd\lua\lparser.c	/^static int testnext (LexState *ls, int c) {$/;"	f	file:
testpattern	.\3rd\lpeg\lptree.c	/^static int testpattern (lua_State *L, int idx) {$/;"	f	file:
testprop	.\3rd\lua\lctype.h	52;"	d
th	.\3rd\lua\lstate.h	/^  struct lua_State th;  \/* thread *\/$/;"	m	union:GCObject	typeref:struct:GCObject::lua_State
thread	.\skynet-src\skynet_imp.h	/^	int thread;					\/\/工作线程数$/;"	m	struct:skynet_config
thvalue	.\3rd\lua\lobject.h	166;"	d
time	.\skynet-src\skynet_timer.c	/^	uint32_t time;$/;"	m	struct:timer	file:
timeout	.\test\testtimer.lua	/^local function timeout(t)$/;"	f
timer	.\skynet-src\skynet_timer.c	/^struct timer {$/;"	s	file:
timer_add	.\skynet-src\skynet_timer.c	/^timer_add(struct timer *T,void *arg,size_t sz,int time) {$/;"	f	file:
timer_create_timer	.\skynet-src\skynet_timer.c	/^timer_create_timer() {$/;"	f	file:
timer_event	.\skynet-src\skynet_timer.c	/^struct timer_event {$/;"	s	file:
timer_execute	.\skynet-src\skynet_timer.c	/^timer_execute(struct timer *T) {$/;"	f	file:
timer_execute_func	.\skynet-src\skynet_timer.c	/^typedef void (*timer_execute_func)(void *ud,void *arg);$/;"	t	file:
timer_node	.\skynet-src\skynet_timer.c	/^struct timer_node {$/;"	s	file:
timer_shift	.\skynet-src\skynet_timer.c	/^timer_shift(struct timer *T) {$/;"	f	file:
timer_update	.\skynet-src\skynet_timer.c	/^timer_update(struct timer *T) {$/;"	f	file:
timing	.\service\snaxd.lua	/^local function timing( method, ... )$/;"	f
tinsert	.\3rd\lua\ltablib.c	/^static int tinsert (lua_State *L) {$/;"	f	file:
tmname	.\3rd\lua\lstate.h	/^  TString *tmname[TM_N];  \/* array with tag-method names *\/$/;"	m	struct:global_State
to_bigendian	.\service-src\service_harbor.c	/^to_bigendian(uint8_t *buffer, uint32_t n) {$/;"	f	file:
tobefnz	.\3rd\lua\lstate.h	/^  GCObject *tobefnz;  \/* list of userdata to be GC *\/$/;"	m	struct:global_State
tocharset	.\3rd\lpeg\lpcode.c	/^int tocharset (TTree *tree, Charset *cs) {$/;"	f
todword	.\lualib-src\sproto\sproto.c	/^todword(const uint8_t *p) {$/;"	f	file:
tofile	.\3rd\lua\liolib.c	/^static FILE *tofile (lua_State *L) {$/;"	f	file:
tohandle	.\skynet-src\skynet_server.c	/^tohandle(struct skynet_context * context, const char * param) {$/;"	f	file:
token	.\3rd\lua\llex.h	/^  int token;$/;"	m	struct:Token
tolstream	.\3rd\lua\liolib.c	125;"	d	file:
tolstring	.\lualib-src\lua-netpack.c	/^tolstring(lua_State *L, size_t *sz, int index) {$/;"	f	file:
tonumber	.\3rd\lua\lvm.h	18;"	d
top	.\3rd\lua\lstate.h	/^  StkId	top;  \/* top for this function *\/$/;"	m	struct:CallInfo
top	.\3rd\lua\lstate.h	/^  StkId top;  \/* first free slot in the stack *\/$/;"	m	struct:lua_State
toproto	.\3rd\lua\luac.c	134;"	d	file:
tostore	.\3rd\lua\lparser.c	/^  int tostore;  \/* number of array elements pending to be stored *\/$/;"	m	struct:ConsControl	file:
tostring	.\3rd\lua-int64\int64.c	/^tostring(lua_State *L) {$/;"	f	file:
tostring	.\3rd\lua\lvm.h	16;"	d
total	.\skynet-src\skynet_server.c	/^	int total;			\/\/上下文计数器$/;"	m	struct:skynet_node	file:
totalbytes	.\3rd\lua\lstate.h	/^  lu_mem totalbytes;  \/* number of bytes currently allocated - GCdebt *\/$/;"	m	struct:global_State
toword	.\lualib-src\sproto\sproto.c	/^toword(const uint8_t * p) {$/;"	f	file:
traceback	.\3rd\lua\lua.c	/^static int traceback (lua_State *L) {$/;"	f	file:
traceback	.\lualib-src\lua-skynet.c	/^traceback (lua_State *L) {$/;"	f	file:
traceback	.\service-src\service_snlua.c	/^traceback (lua_State *L) {$/;"	f	file:
traceexec	.\3rd\lua\lvm.c	/^static void traceexec (lua_State *L) {$/;"	f	file:
traverseCclosure	.\3rd\lua\lgc.c	/^static lu_mem traverseCclosure (global_State *g, CClosure *cl) {$/;"	f	file:
traverseLclosure	.\3rd\lua\lgc.c	/^static lu_mem traverseLclosure (global_State *g, LClosure *cl) {$/;"	f	file:
traverseephemeron	.\3rd\lua\lgc.c	/^static int traverseephemeron (global_State *g, Table *h) {$/;"	f	file:
traverseproto	.\3rd\lua\lgc.c	/^static int traverseproto (global_State *g, Proto *f) {$/;"	f	file:
traversestack	.\3rd\lua\lgc.c	/^static lu_mem traversestack (global_State *g, lua_State *th) {$/;"	f	file:
traversestrongtable	.\3rd\lua\lgc.c	/^static void traversestrongtable (global_State *g, Table *h) {$/;"	f	file:
traversetable	.\3rd\lua\lgc.c	/^static lu_mem traversetable (global_State *g, Table *h) {$/;"	f	file:
traverseweakvalue	.\3rd\lua\lgc.c	/^static void traverseweakvalue (global_State *g, Table *h) {$/;"	f	file:
treatstackoption	.\3rd\lua\ldblib.c	/^static void treatstackoption (lua_State *L, lua_State *L1, const char *fname) {$/;"	f	file:
tree	.\3rd\lpeg\lptree.h	/^  TTree tree[1];$/;"	m	struct:Pattern
treebuffer	.\3rd\lpeg\lptypes.h	102;"	d
tremove	.\3rd\lua\ltablib.c	/^static int tremove (lua_State *L) {$/;"	f	file:
trim	.\3rd\lua\lbitlib.c	25;"	d	file:
try_connect	.\lualib\socketchannel.lua	/^local function try_connect(self , once)$/;"	f
try_recv	.\examples\login\client.lua	/^	local function try_recv(fd, last)--尝试接收数据函数$/;"	f
trydecpoint	.\3rd\lua\llex.c	/^static void trydecpoint (LexState *ls, SemInfo *seminfo) {$/;"	f	file:
tryfuncTM	.\3rd\lua\ldo.c	/^static StkId tryfuncTM (lua_State *L, StkId func) {$/;"	f	file:
ts	.\3rd\lua\llex.h	/^  TString *ts;$/;"	m	union:__anon5
ts	.\3rd\lua\lstate.h	/^  union TString ts;$/;"	m	union:GCObject	typeref:union:GCObject::TString
tsv	.\3rd\lua\lobject.h	/^  } tsv;$/;"	m	union:TString	typeref:struct:TString::__anon6
tsvalue	.\3rd\lua\lobject.h	157;"	d
tt_	.\3rd\lua\lobject.h	308;"	d
tt_	.\3rd\lua\lobject.h	319;"	d
ttisCclosure	.\3rd\lua\lobject.h	143;"	d
ttisLclosure	.\3rd\lua\lobject.h	144;"	d
ttisboolean	.\3rd\lua\lobject.h	135;"	d
ttisclosure	.\3rd\lua\lobject.h	142;"	d
ttisdeadkey	.\3rd\lua\lobject.h	148;"	d
ttisequal	.\3rd\lua\lobject.h	150;"	d
ttisequal	.\3rd\lua\lobject.h	368;"	d
ttisequal	.\3rd\lua\lobject.h	369;"	d
ttisfunction	.\3rd\lua\lobject.h	141;"	d
ttislcf	.\3rd\lua\lobject.h	145;"	d
ttislightuserdata	.\3rd\lua\lobject.h	136;"	d
ttislngstring	.\3rd\lua\lobject.h	139;"	d
ttisnil	.\3rd\lua\lobject.h	134;"	d
ttisnumber	.\3rd\lua\lobject.h	133;"	d
ttisnumber	.\3rd\lua\lobject.h	337;"	d
ttisnumber	.\3rd\lua\lobject.h	338;"	d
ttisshrstring	.\3rd\lua\lobject.h	138;"	d
ttisstring	.\3rd\lua\lobject.h	137;"	d
ttistable	.\3rd\lua\lobject.h	140;"	d
ttisthread	.\3rd\lua\lobject.h	147;"	d
ttisuserdata	.\3rd\lua\lobject.h	146;"	d
ttype	.\3rd\lua\lobject.h	124;"	d
ttypename	.\3rd\lua\ltm.h	46;"	d
ttypenv	.\3rd\lua\lobject.h	127;"	d
tvk	.\3rd\lua\lobject.h	/^  TValue tvk;$/;"	m	union:TKey
twoto	.\3rd\lua\lobject.h	586;"	d
txtToken	.\3rd\lua\llex.c	/^static const char *txtToken (LexState *ls, int token) {$/;"	f	file:
type	.\lualib-src\sproto\sproto.c	/^	int type;$/;"	m	struct:field	file:
type	.\lualib-src\sproto\sproto.c	/^	struct sproto_type * type;$/;"	m	struct:sproto	typeref:struct:sproto::sproto_type	file:
type	.\skynet-src\skynet_socket.h	/^	int type;$/;"	m	struct:skynet_socket_message
type	.\skynet-src\socket_server.c	/^	uint16_t type;	\/\/socket类型或者状态$/;"	m	struct:socket	file:
type_n	.\lualib-src\sproto\sproto.c	/^	int type_n;$/;"	m	struct:sproto	file:
typeclosure	.\lualib-src\lua-bson.c	/^typeclosure(lua_State *L) {$/;"	f	file:
typeerror	.\3rd\lua\lauxlib.c	/^static int typeerror (lua_State *L, int narg, const char *tname) {$/;"	f	file:
u	.\3rd\lpeg\lpcap.c	/^  } u;$/;"	m	struct:StrAux	typeref:union:StrAux::__anon1	file:
u	.\3rd\lpeg\lptree.h	/^  } u;$/;"	m	struct:TTree	typeref:union:TTree::__anon3
u	.\3rd\lua\lobject.h	/^  } u;$/;"	m	struct:UpVal	typeref:union:UpVal::__anon8
u	.\3rd\lua\lparser.h	/^  } u;$/;"	m	struct:expdesc	typeref:union:expdesc::__anon14
u	.\3rd\lua\lstate.h	/^  union Udata u;$/;"	m	union:GCObject	typeref:union:GCObject::Udata
u	.\3rd\lua\lstate.h	/^  } u;$/;"	m	struct:CallInfo	typeref:union:CallInfo::__anon17
u	.\skynet-src\socket_server.c	/^	} u;$/;"	m	struct:request_package	typeref:union:request_package::__anon25	file:
uchar	.\3rd\lua\lstrlib.c	33;"	d	file:
ud	.\3rd\lua\lstate.h	/^  void *ud;         \/* auxiliary data to `frealloc' *\/$/;"	m	struct:global_State
ud	.\skynet-src\skynet_socket.h	/^	int ud;$/;"	m	struct:skynet_socket_message
ud	.\skynet-src\socket_server.h	/^	int ud;	\/\/ for accept, ud is listen id ; for data, ud is size of data $/;"	m	struct:socket_message
udata2finalize	.\3rd\lua\lgc.c	/^static GCObject *udata2finalize (global_State *g) {$/;"	f	file:
udatatypename	.\3rd\lua\ltm.c	/^static const char udatatypename[] = "userdata";$/;"	v	file:
udp	.\skynet-src\socket_server.c	/^		struct request_udp udp;$/;"	m	union:request_package::__anon25	typeref:struct:request_package::__anon25::request_udp	file:
udp_address	.\skynet-src\socket_server.c	/^		uint8_t udp_address[UDP_ADDRESS_SIZE];$/;"	m	union:socket::__anon24	file:
udp_address	.\skynet-src\socket_server.c	/^	uint8_t udp_address[UDP_ADDRESS_SIZE];$/;"	m	struct:write_buffer	file:
udp_socket_address	.\skynet-src\socket_server.c	/^udp_socket_address(struct socket *s, const uint8_t udp_address[UDP_ADDRESS_SIZE], union sockaddr_all *sa) {$/;"	f	file:
udpbuffer	.\skynet-src\socket_server.c	/^	uint8_t udpbuffer[MAX_UDP_PACKAGE];	\/\/udp缓冲区		MAX_UDP_PACKAGE:65535$/;"	m	struct:socket_server	file:
uint16_t	.\lualib-src\sproto\msvcint.h	/^typedef unsigned __int16  uint16_t;$/;"	t
uint16_t	.\lualib-src\sproto\msvcint.h	/^typedef unsigned short    uint16_t;$/;"	t
uint32_t	.\lualib-src\sproto\msvcint.h	/^typedef unsigned __int32  uint32_t;$/;"	t
uint32_t	.\lualib-src\sproto\msvcint.h	/^typedef unsigned int      uint32_t;$/;"	t
uint32_to_uint64	.\lualib-src\sproto\sproto.c	/^uint32_to_uint64(int negative, uint8_t *buffer) {$/;"	f	file:
uint64_t	.\lualib-src\sproto\msvcint.h	/^typedef unsigned __int64     uint64_t;$/;"	t
uint8_t	.\lualib-src\sproto\msvcint.h	/^typedef unsigned __int8   uint8_t;$/;"	t
uint8_t	.\lualib-src\sproto\msvcint.h	/^typedef unsigned char     uint8_t;$/;"	t
unbound_search	.\3rd\lua\ltable.c	/^static int unbound_search (Table *t, unsigned int j) {$/;"	f	file:
uncomplete	.\lualib-src\lua-netpack.c	/^struct uncomplete {$/;"	s	file:
undefgoto	.\3rd\lua\lparser.c	/^static l_noret undefgoto (LexState *ls, Labeldesc *gt) {$/;"	f	file:
unforward	.\service\gate.lua	/^local function unforward(c)$/;"	f
unknown_request	.\lualib\skynet.lua	/^local function unknown_request(session, address, msg, sz, prototype)$/;"	f
unknown_response	.\lualib\skynet.lua	/^local function unknown_response(session, address, msg, sz)$/;"	f
unlinkupval	.\3rd\lua\lfunc.c	/^static void unlinkupval (UpVal *uv) {$/;"	f	file:
unmakemask	.\3rd\lua\ldblib.c	/^static char *unmakemask (int mask, char *smask) {$/;"	f	file:
unpack	.\3rd\lua\ltablib.c	/^static int unpack (lua_State *L) {$/;"	f	file:
unpack 	.\examples\agent.lua	/^	unpack = function (msg, sz)$/;"	f
unpack 	.\examples\simplemonitor.lua	/^	unpack = function() end,$/;"	f
unpack 	.\lualib\skynet.lua	/^		unpack = function(...) return ... end,$/;"	f
unpack 	.\lualib\snax\gateserver.lua	/^		unpack = function ( msg, sz )$/;"	f
unpack 	.\service\clusterproxy.lua	/^	unpack = function (...) return ... end,$/;"	f
unpack 	.\service\multicastd.lua	/^	unpack = function(msg, sz)$/;"	f
unpack_dict	.\lualib-src\lua-bson.c	/^unpack_dict(lua_State *L, struct bson_reader *br, bool array) {$/;"	f	file:
unpack_f	.\examples\login\client.lua	/^local function unpack_f(f)$/;"	f
unpack_line	.\examples\login\client.lua	/^local function unpack_line(text)$/;"	f
unpack_one	.\lualib-src\lua-seri.c	/^unpack_one(lua_State *L, struct read_block *rb) {$/;"	f	file:
unpack_package	.\examples\client.lua	/^local function unpack_package(text)$/;"	f
unpack_package	.\examples\login\client.lua	/^local function unpack_package(text)$/;"	f
unpack_table	.\lualib-src\lua-seri.c	/^unpack_table(lua_State *L, struct read_block *rb, int array_size) {$/;"	f	file:
unpack_uint32	.\lualib-src\lua-cluster.c	/^unpack_uint32(const uint8_t * buf) {$/;"	f	file:
unpackreq_number	.\lualib-src\lua-cluster.c	/^unpackreq_number(lua_State *L, const uint8_t * buf, size_t sz) {$/;"	f	file:
unpackreq_string	.\lualib-src\lua-cluster.c	/^unpackreq_string(lua_State *L, const uint8_t * buf, size_t sz) {$/;"	f	file:
unroll	.\3rd\lua\ldo.c	/^static void unroll (lua_State *L, void *ud) {$/;"	f	file:
update	.\lualib-src\lua-sharedata.c	/^	struct table * update;$/;"	m	struct:ctrl	typeref:struct:ctrl::table	file:
update	.\lualib\sharedata\corelib.lua	/^local function update(root, cobj, gcobj)$/;"	f
update	.\service\datacenterd.lua	/^local function update(db, key, value, ...)$/;"	f
update_name	.\service-src\service_harbor.c	/^update_name(struct harbor *h, const char name[GLOBALNAME_LENGTH], uint32_t handle) {$/;"	f	file:
update_stat	.\service\snaxd.lua	/^local function update_stat(name, ti)$/;"	f
update_xmalloc_stat_alloc	.\skynet-src\malloc_hook.c	/^update_xmalloc_stat_alloc(uint32_t handle, size_t __n) {$/;"	f	file:
update_xmalloc_stat_free	.\skynet-src\malloc_hook.c	/^update_xmalloc_stat_free(uint32_t handle, size_t __n) {$/;"	f	file:
updatecache	.\3rd\lpeg\lpcap.c	/^static int updatecache (CapState *cs, int v) {$/;"	f	file:
updatelocale 	.\3rd\lpeg\re.lua	/^local function updatelocale ()$/;"	f
upval	.\3rd\lua\lparser.c	/^  lu_byte upval;  \/* true if some variable in the block is an upvalue *\/$/;"	m	struct:BlockCnt	file:
upvalname	.\3rd\lua\ldebug.c	/^static const char *upvalname (Proto *p, int uv) {$/;"	f	file:
upvals	.\3rd\lua\lobject.h	/^  UpVal *upvals[1];  \/* list of upvalues *\/$/;"	m	struct:LClosure
upvalue	.\3rd\lua\lobject.h	/^  TValue upvalue[1];  \/* list of upvalues *\/$/;"	m	struct:CClosure
upvalues	.\3rd\lua\lobject.h	/^  Upvaldesc *upvalues;  \/* upvalue information *\/$/;"	m	struct:SharedProto
url.parse	.\lualib\http\url.lua	/^function url.parse(u)$/;"	f
url.parse_query	.\lualib\http\url.lua	/^function url.parse_query(q)$/;"	f
usage	.\3rd\lua\luac.c	/^static void usage(const char* message)$/;"	f	file:
userobject	.\skynet-src\socket_server.c	/^	bool userobject;$/;"	m	struct:write_buffer	file:
uv	.\3rd\lua\lobject.h	/^  } uv;$/;"	m	union:Udata	typeref:struct:Udata::__anon7
uv	.\3rd\lua\lstate.h	/^  struct UpVal uv;$/;"	m	union:GCObject	typeref:struct:GCObject::UpVal
uvalue	.\3rd\lua\lobject.h	159;"	d
uvhead	.\3rd\lua\lstate.h	/^  UpVal uvhead;  \/* head of double-linked list of all open upvalues *\/$/;"	m	struct:global_State
v	.\3rd\lua\lobject.h	/^  TValue *v;  \/* points to stack or to its own value *\/$/;"	m	struct:UpVal
v	.\3rd\lua\lparser.c	/^  expdesc v;  \/* last list item read *\/$/;"	m	struct:ConsControl	file:
v	.\3rd\lua\lparser.c	/^  expdesc v;  \/* variable (global, local, upvalue, or indexed) *\/$/;"	m	struct:LHS_assign	file:
v	.\lualib-src\lua-sharedata.c	/^	union value v;$/;"	m	struct:node	typeref:union:node::value	file:
v4	.\skynet-src\socket_server.c	/^	struct sockaddr_in v4;$/;"	m	union:sockaddr_all	typeref:struct:sockaddr_all::sockaddr_in	file:
v6	.\skynet-src\socket_server.c	/^	struct sockaddr_in6 v6;$/;"	m	union:sockaddr_all	typeref:struct:sockaddr_all::sockaddr_in6	file:
v_	.\3rd\lua\lobject.h	306;"	d
v_	.\3rd\lua\lobject.h	317;"	d
val2str	.\3rd\lpeg\lptree.c	/^static const char *val2str (lua_State *L, int idx) {$/;"	f	file:
val_	.\3rd\lua\lobject.h	113;"	d
val_	.\3rd\lua\lobject.h	327;"	d
val_	.\3rd\lua\lobject.h	328;"	d
valiswhite	.\3rd\lua\lgc.h	117;"	d
value	.\3rd\lua\lobject.h	/^    TValue value;  \/* the value (when closed) *\/$/;"	m	union:UpVal::__anon8
value	.\lualib-src\lua-sharedata.c	/^union value {$/;"	u	file:
value	.\service-src\service_harbor.c	/^	uint32_t value;$/;"	m	struct:keyvalue	file:
value	.\skynet-src\socket_server.c	/^	int value;$/;"	m	struct:request_setopt	file:
valuecached	.\3rd\lpeg\lpcap.h	/^  int valuecached;  \/* value stored in cache slot *\/$/;"	m	struct:CapState
valuetype	.\lualib-src\lua-sharedata.c	/^	uint8_t valuetype;	\/\/ value type can be number\/string\/boolean\/table$/;"	m	struct:node	file:
varname	.\3rd\lua\lobject.h	/^  TString *varname;$/;"	m	struct:LocVar
verifyerror	.\3rd\lpeg\lptree.c	/^static int verifyerror (lua_State *L, int *passed, int npassed) {$/;"	f	file:
verifygrammar	.\3rd\lpeg\lptree.c	/^static void verifygrammar (lua_State *L, TTree *grammar) {$/;"	f	file:
verifyrule	.\3rd\lpeg\lptree.c	/^static int verifyrule (lua_State *L, TTree *tree, int *passed, int npassed,$/;"	f	file:
version	.\3rd\lua\lstate.h	/^  const lua_Number *version;  \/* pointer to version number *\/$/;"	m	struct:global_State
version	.\skynet-src\skynet_monitor.c	/^	int version;		\/\/当前版本$/;"	m	struct:skynet_monitor	file:
vkisinreg	.\3rd\lua\lparser.h	38;"	d
vkisvar	.\3rd\lua\lparser.h	37;"	d
vmcase	.\3rd\lua\lvm.c	531;"	d	file:
vmcasenb	.\3rd\lua\lvm.c	532;"	d	file:
vmdispatch	.\3rd\lua\lvm.c	530;"	d	file:
vt	.\3rd\lua\lparser.h	/^      lu_byte vt;  \/* whether 't' is register (VLOCAL) or upvalue (VUPVAL) *\/$/;"	m	struct:expdesc::__anon14::__anon15
wait_for_response	.\lualib\socketchannel.lua	/^local function wait_for_response(self, response)$/;"	f
waitfor	.\service\datacenterd.lua	/^local function waitfor(db, key1, key2, ...)$/;"	f
waitfor	.\service\service_mgr.lua	/^local function waitfor(name , func, ...)$/;"	f
wakeup	.\lualib\socket.lua	/^local function wakeup(s)$/;"	f
wakeup	.\service\datacenterd.lua	/^local function wakeup(db, key1, ...)$/;"	f
wakeup	.\skynet-src\skynet_start.c	/^wakeup(struct monitor *m, int busy) {$/;"	f	file:
wakeup	.\test\testtimer.lua	/^local function wakeup(co)$/;"	f
wakeup_all	.\lualib\socketchannel.lua	/^local function wakeup_all(self, errmsg)$/;"	f
watch:disconnect	.\lualib\redis.lua	/^function watch:disconnect()$/;"	f
watch:message	.\lualib\redis.lua	/^function watch:message()$/;"	f
watch[name] 	.\lualib\redis.lua	/^	watch[name] = function(self, ...)$/;"	f
watch_func	.\lualib\redis.lua	/^local function watch_func( name )$/;"	f
watch_login	.\lualib\redis.lua	/^local function watch_login(obj, auth)$/;"	f
watchdog	.\service-src\service_gate.c	/^	uint32_t watchdog;$/;"	m	struct:gate	file:
watching	.\test\testredis.lua	/^local function watching()$/;"	f
wb_boolean	.\lualib-src\lua-seri.c	/^wb_boolean(struct write_block *wb, int boolean) {$/;"	f	file:
wb_free	.\lualib-src\lua-seri.c	/^wb_free(struct write_block *wb) {$/;"	f	file:
wb_init	.\lualib-src\lua-seri.c	/^wb_init(struct write_block *wb , struct block *b) {$/;"	f	file:
wb_integer	.\lualib-src\lua-seri.c	/^wb_integer(struct write_block *wb, int v, int type) {$/;"	f	file:
wb_list	.\skynet-src\socket_server.c	/^struct wb_list {$/;"	s	file:
wb_nil	.\lualib-src\lua-seri.c	/^wb_nil(struct write_block *wb) {$/;"	f	file:
wb_number	.\lualib-src\lua-seri.c	/^wb_number(struct write_block *wb, double v) {$/;"	f	file:
wb_pointer	.\lualib-src\lua-seri.c	/^wb_pointer(struct write_block *wb, void *v) {$/;"	f	file:
wb_push	.\lualib-src\lua-seri.c	/^wb_push(struct write_block *b, const void *buf, int sz) {$/;"	f	file:
wb_size	.\skynet-src\socket_server.c	/^	int64_t wb_size;		\/\/发送缓冲区未发送的数据$/;"	m	struct:socket	file:
wb_string	.\lualib-src\lua-seri.c	/^wb_string(struct write_block *wb, const char *str, int len) {$/;"	f	file:
wb_table	.\lualib-src\lua-seri.c	/^wb_table(lua_State *L, struct write_block *wb, int index, int depth) {$/;"	f	file:
wb_table_array	.\lualib-src\lua-seri.c	/^wb_table_array(lua_State *L, struct write_block * wb, int index, int depth) {$/;"	f	file:
wb_table_hash	.\lualib-src\lua-seri.c	/^wb_table_hash(lua_State *L, struct write_block * wb, int index, int depth, int array_size) {$/;"	f	file:
weak	.\3rd\lua\lstate.h	/^  GCObject *weak;  \/* list of tables with weak values *\/$/;"	m	struct:global_State
weight	.\skynet-src\skynet_start.c	/^	int weight;		\/\/权重$/;"	m	struct:worker_parm	file:
what	.\3rd\lua\lua.h	/^  const char *what;	\/* (S) 'Lua', 'C', 'main', 'tail' *\/$/;"	m	struct:lua_Debug
what	.\skynet-src\socket_server.c	/^	int what;$/;"	m	struct:request_setopt	file:
when a new user login, alloc a subid for it. 	.\lualib\snax\msgserver.lua	/^	conf.login_handler(uid, secret) -> subid : the function when a new user login, alloc a subid for it. (may call by login server)$/;"	f
whilestat	.\3rd\lua\lparser.c	/^static void whilestat (LexState *ls, int line) {$/;"	f	file:
white2gray	.\3rd\lua\lgc.c	62;"	d	file:
word32tobytes	.\3rd\lua-md5\md5.c	/^static void word32tobytes (const WORD32 *input, char *output) {$/;"	f	file:
worker_parm	.\skynet-src\skynet_start.c	/^struct worker_parm {$/;"	s	file:
wrapKey 	.\test\testmysql.lua	/^    wrapKey = function(val)$/;"	f
wrapVal 	.\test\testmysql.lua	/^    wrapVal = function(val, level)$/;"	f
wrapper	.\lualib\snax.lua	/^local function wrapper(handle, name, type)$/;"	f
wrapper_socket_function	.\lualib\socketchannel.lua	/^local function wrapper_socket_function(f)$/;"	f
write	.\lualib\snax\loginserver.lua	/^local function write(fd, text)$/;"	f
write	.\skynet-src\rwlock.h	/^	int write;$/;"	m	struct:rwlock
write	.\skynet-src\socket_poll.h	/^	bool write;$/;"	m	struct:event
write_binary	.\lualib-src\lua-bson.c	/^write_binary(struct bson *b, const void * buffer, size_t sz) {$/;"	f	file:
write_block	.\lualib-src\lua-seri.c	/^struct write_block {$/;"	s	file:
write_buffer	.\skynet-src\socket_server.c	/^struct write_buffer {$/;"	s	file:
write_buffer_free	.\skynet-src\socket_server.c	/^write_buffer_free(struct socket_server *ss, struct write_buffer *wb) {$/;"	f	file:
write_byte	.\lualib-src\lua-bson.c	/^write_byte(struct bson *b, uint8_t v) {$/;"	f	file:
write_bytes	.\lualib-src\lua-mongo.c	/^write_bytes(struct buffer *b, const void * buf, int sz) {$/;"	f	file:
write_double	.\lualib-src\lua-bson.c	/^write_double(struct bson *b, lua_Number d) {$/;"	f	file:
write_ff	.\lualib-src\sproto\sproto.c	/^write_ff(const uint8_t * src, uint8_t * des, int n) {$/;"	f	file:
write_int32	.\lualib-src\lua-bson.c	/^write_int32(struct bson *b, int32_t v) {$/;"	f	file:
write_int32	.\lualib-src\lua-mongo.c	/^write_int32(struct buffer *b, int32_t v) {$/;"	f	file:
write_int64	.\lualib-src\lua-bson.c	/^write_int64(struct bson *b, int64_t v) {$/;"	f	file:
write_length	.\lualib-src\lua-bson.c	/^write_length(struct bson *b, int32_t v, int off) {$/;"	f	file:
write_length	.\lualib-src\lua-mongo.c	/^write_length(struct buffer *b, int32_t v, int off) {$/;"	f	file:
write_pid	.\skynet-src\skynet_daemon.c	/^write_pid(const char *pidfile) {$/;"	f	file:
write_size	.\lualib-src\lua-netpack.c	/^write_size(uint8_t * buffer, int len) {$/;"	f	file:
write_string	.\lualib-src\lua-bson.c	/^write_string(struct bson *b, const char *key, size_t sz) {$/;"	f	file:
write_string	.\lualib-src\lua-mongo.c	/^write_string(struct buffer *b, const char *key, size_t sz) {$/;"	f	file:
writeall	.\lualib\http\httpd.lua	/^local function writeall(writefunc, statuscode, bodyfunc, header)$/;"	f
writeline	.\examples\login\client.lua	/^local function writeline(fd, text)$/;"	f
writer	.\3rd\lua\ldump.c	/^ lua_Writer writer;$/;"	m	struct:__anon4	file:
writer	.\3rd\lua\lstrlib.c	/^static int writer (lua_State *L, const void* b, size_t size, void* B) {$/;"	f	file:
writer	.\3rd\lua\luac.c	/^static int writer(lua_State* L, const void* p, size_t size, void* u)$/;"	f	file:
xor_key	.\lualib-src\lsha1.c	/^xor_key(uint8_t key[BLOCKSIZE], uint32_t xor) {$/;"	f	file:
yield_call	.\lualib\skynet.lua	/^local function yield_call(service, session)$/;"	f
yindex	.\3rd\lua\lparser.c	/^static void yindex (LexState *ls, expdesc *v) {$/;"	f	file:
z	.\3rd\lua\ldo.c	/^  ZIO *z;$/;"	m	struct:SParser	file:
z	.\3rd\lua\llex.h	/^  ZIO *z;  \/* input stream *\/$/;"	m	struct:LexState
zgetc	.\3rd\lua\lzio.h	20;"	d
{ __gc 	.\lualib\socket.lua	/^	{ __gc = function(p)$/;"	f
{ m.Cmt(']' * m.C(m.P'	.\3rd\lpeg\test.lua	/^    { m.Cmt(']' * m.C(m.P'='^0) * ']' * m.Cb("init"), function (_, _, s1, s2)$/;"	f
